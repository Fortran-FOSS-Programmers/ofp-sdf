module fast2pp

imports
   libstratego-lib
   FAST

signature
  constructors

    // These extra constructors are not part of FAST but required for unparsing
    //

    LanguageBinding : Language                       -> LanguageBinding

    FuncPart        : ListStarOfDecl                 -> FuncPart

    ppScope         : SpecPart * ExecPart            -> ppScope
    ppScope         : SpecPart * ExecPart * FuncPart -> ppScope

    ppImplicitStmt  : Label          -> ppImplicitStmt

    ppSubmodule    : OfpSubmodule    -> ppSubmodule
    ppFunction     : OfpFunction     -> ppFunction
    ppSubroutine   : OfpSubroutine   -> ppSubroutine
    ppMpSubprogram : OfpMpSubprogram -> ppMpSubprogram

    ppEntityDecl   : name * ppArraySpec * ppCoarraySpec * CharLength * Initialization -> ppEntityDecl
    ppArraySpec    : ArraySpec       -> ppArraySpec
    ppCoarraySpec  : CoarraySpec     -> ppCoarraySpec

    ppActualArgSpec: ppKeyword * arg -> ppActualArgSpec
    ppKeyword      : keyword         -> ppKeyword

    ppDimSpec      : upper            -> ppDimSpec
    ppDimSpec      : lower * upper    -> ppDimSpec

    ppLetterSpec   : Spec            -> ppLetterSpec
    ppLetterSpec   : Spec * Spec     -> ppLetterSpec

    ppPartRef           : name * ss * is -> ppPartRef
    ppSectionSubscripts : ss             -> ppSectionSubscripts
    ppImageSelector     : ss             -> ppImageSelector

    ppAllocation        : ppPartRef           -> ppAllocation
    ppAllocationShape   : ppPartRef * shape   -> ppAllocationShape
    ppAllocationCoshape : ppPartRef * coshape -> ppAllocationCoshape
    ppAllocShapeSpec    : upper               -> ppAllocShapeSpec
    ppAllocShapeSpec    : lower * upper       -> ppAllocShapeSpec
    ppAllocCoshapeSpec  : upper               -> ppAllocCoshapeSpec
    ppAllocCoshapeSpec  : lower * upper       -> ppAllocCoshapeSpec

    eos            : EOStmt          -> EOS

    ppSelectCaseStmt : OptLabel * CaseConstructName * CaseExpr * EOS -> ppSelectCaseStmt    // R838

    ppNonlabelDoStmt : OptLabel * DoConstructName * OptLoopControl * EOS -> ppNonlabelDoStmt  //R817

    ppAssociateStmt  : OptLabel * NoName * List(Association) * EOS -> ppAssociateStmt        //R803

//    ppSelectTypeStmt : OptLabel * NoSelectConstructName * OptAssociateName * Selector * EOS -> ppSelectTypeStmt  //R847

    opt-list       : list            -> opt-list
    append-colon   : name            -> append-colon

strategies

  main =
    io-wrap(fast2pp)

  fast2pp =
      outermost(ast-to-pp)
    ; outermost(no-to-none)

  pp-opt-list =
      where(<gt>(<length>,0))
    ; !opt-list(<id>)

  append-colon = ?no-name() < id + !append-colon(<id>)

rules

// Don't print EOS and associated comments
//
  ast-to-pp:  eos(_)                       -> None()

// Make a separate scope without FuncPart when empty.  This will allow the implied contains
// statement to be unparsed when the FuncPart is present.
//
  ast-to-pp:
    Scope(decls,exes,[])                     -> ppScope(decls,exes)

  ast-to-pp:
    Scope(decls,exes,funcs)                  -> ppScope(decls,exes,FuncPart(funcs))

//R503
//  ast-to-pp:
//    EntityDecl(name,as,cs,cl,init)         -> ppEntityDecl(name,ppArraySpec(as),ppCoarraySpec(cs),cl,init)

//R508
//  ast-to-pp:  LanguageBinding(lang,no-binding-name()) -> LanguageBinding("C")

//R510
  ast-to-pp:
    DimSpec(no-lower-bound(), upper)       -> ppDimSpec(upper)
  ast-to-pp:
    DimSpec(lower, upper)                  -> ppDimSpec(lower, upper)

//R560
  ast-to-pp:
    ImplicitStmt(label,[])                 -> ppImplicitStmt(label)

//R562
//  ast-to-pp:  LetterSpec(s1,no-letter())   -> ppLetterSpec(s1)
//  ast-to-pp:  LetterSpec(s1,s2)            -> ppLetterSpec(s1,s2)

//R612
  ast-to-pp:
    PartRef(name,ss,is) -> ppPartRef(name,ppSectionSubscripts(ss),ppImageSelector(is))

//R631
//  ast-to-pp:  Allocation(part,[],[])                 -> ppAllocation(part)
//  ast-to-pp:  Allocation(part,shape,[])              -> ppAllocationShape(part,shape)
//  ast-to-pp:  Allocation(part,[],coshape)            -> ppAllocationCoshape(part,coshape)

//R633
//  ast-to-pp:  AllocateShapeSpec(no-lower-bound(),ub) -> ppAllocShapeSpec(ub)
//  ast-to-pp:  AllocateShapeSpec(lb,ub)               -> ppAllocShapeSpec(lb,ub)

//R637
//  ast-to-pp:  AllocateCoshapeSpec(no-lower-bound(),ub) -> ppAllocCoshapeSpec(ub)
//  ast-to-pp:  AllocateCoshapeSpec(lb,ub)               -> ppAllocCoshapeSpec(lb,ub)

//R803
//  ast-to-pp:
//    AssociateStmt(label,name,list,eos) -> ppAssociateStmt(label,<append-colon>name,list,eos)

//R817
//  ast-to-pp:
//    NonlabelDoStmt(label,name,loopcontrol,eos) -> ppNonlabelDoStmt(label,<append-colon>name,loopcontrol,eos)

//R838
//  ast-to-pp:
//    SelectCaseStmt(label,name,expr,eos)    -> ppSelectCaseStmt(label,<append-colon>name,expr,eos)

//R847
//  ast-to-pp:
//    SelectTypeStmt(label,name,name,selector,eos) -> ppSelectTypeStmt(label,<append-colon>name,name,selector,eos)

//R860
//  ast-to-pp:
//    SyncImagesStmt(label,set,list,eos)     -> SyncImagesStmt(label,set,<pp-opt-list>(list))

//R1104
//  ast-to-pp:  OfpModule(name, scope)       -> ppModule(scope)

//R1116
//  ast-to-pp:  OfpSubmodule(name, scope)    -> ppSubmodule(scope)

//R1222
  ast-to-pp:  ActualArgSpec(keyword, arg)  -> ppActualArgSpec(ppKeyword(keyword), arg)

//R1227
//  ast-to-pp:  OfpFunction(name, scope)     -> ppFunction(scope)

//R1233
//  ast-to-pp:  OfpSubroutine(name, scope)   -> ppSubroutine(scope)

//R1237
  ast-to-pp:  OfpMpSubprogram(name, scope) -> ppMpSubprogram(scope)


//  no-to-none: no-kind-param()              -> None()   // R408
//  no-to-none: no-char-selector()           -> None()   // R420
//  no-to-none: no-char-length()             -> None()   // R503
//  no-to-none: no-init()                    -> None()   // R503
//  no-to-none: no-kind()                    -> None()   // R405
//  no-to-none: no-prefix()                  -> None()   // R1225
//  no-to-none: no-language-binding()        -> None()   // R1229
//  no-to-none: no-generic-spec()            -> None()   // R1204
//  no-to-none: no-module-name()             -> None()   // R1106
//  no-to-none: no-module-nature()           -> None()   // R1109
//  no-to-none: no-block-data-name()         -> None()   // R1122
//  no-to-none: no-proc-interface()          -> None()   // R1212
//  no-to-none: no-subroutine-name()         -> None()   // R1236
//  no-to-none: no-binding-name()            -> None()   // R508
//  no-to-none: no-expr()                    -> None()   // R1241
//  no-to-none: no-stop-code()               -> None()   // R857
//  no-to-none: no-r()                       -> None()   // R1004
//  no-to-none: no-m()                       -> None()   // R1007
//  no-to-none: no-e()                       -> None()   // R1007
//  no-to-none: no-name()                    -> None()   // R839, R850
//  no-to-none: no-parent-submodule-name()   -> None()   // R1118
//  no-to-none: no-high()                    -> None()   // R844
//  no-to-none: no-low()                     -> None()   // R844
//  no-to-none: no-stride()                  -> None()   // R920
//  no-to-none: no-type-spec()               -> None()   // R626
//  no-to-none: no-lower-bound()             -> None()   // R633
//  no-to-none: no-component-name()          -> None()   // R734
//  no-to-none: no-upper-bounds()            -> None()   // R736
//  no-to-none: no-type-bound-procedure-part()  -> None()   //R445
//  no-to-none: no-binding-private-stmt()    -> None()   // R446
//  no-to-none: no-arg-name()                -> None()   // R451
//  no-to-none: no-subprogram-part()         -> None()   // R210
//  no-to-none: no-repeat()                  -> None()   // R541
//  no-to-none: no-forall-step()             -> None()   // R753
//  no-to-none: no-mask-expr()               -> None()   // R752
//  no-to-none: no-else-stmt()               -> None()   // R832
//  no-to-none: no-loop-control()            -> None()   // R818
//  no-to-none: no-subscript()               -> None()   // R619

  no-to-none: ppKeyword(no-keyword())      -> None()   // R215

  no-to-none: ppArraySpec([])              -> None()   // R515
  no-to-none: ppCoarraySpec([])            -> None()   // R509

  no-to-none: ppSectionSubscripts(no-section-subscripts()) -> None()
  no-to-none: ppImageSelector(no-image-selector())         -> None()