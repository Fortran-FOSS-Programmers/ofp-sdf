module ofp2fast

imports
   libstratego-lib
   Main
   AST

signature
  constructors

// Ambiguities

   amb : list -> choice

   Comment   : A -> B            /* comments are put in annotations */
   OfpString : A -> B            /* node for a string literal */

   tmpImplicitPart : A -> B    /* to combine all to a list */


strategies
  io-ofp2fast =
    io-wrap(ofp2fast)

  ofp2fast =
    outermost(ofp-disamb); innermost(ofp-to-ast)


rules

  // Disambiguation rules
  //

  //R703,R723
  ofp-disamb:  amb([DefinedOperator(x), DefinedOperator(y)]) -> DefinedOperator(x)

  //R631 : C633 ... AllocateShapeSpecList shall appear
  ofp-disamb:  amb([Allocation(u),   Allocation(x,y)  ]) -> Allocation(x,y)
  ofp-disamb:  amb([Allocation(u,v), Allocation(x,y,z)]) -> Allocation(x,y,z)

  ofp-extract-contains:  OfpModuleStmt   (label,name)                    -> name

  ofp-extract-name:  OfpModuleStmt       (label,name)                    -> name
  ofp-extract-name:  OfpProgramStmt      (label,name)                    -> name
  ofp-extract-name:  OfpMpSubprogramStmt (label,name)                    -> name
  ofp-extract-name:  OfpSubroutineStmt   (label,name,args,prefix,suffix) -> name
  ofp-extract-name:  OfpFunctionStmt     (label,name,args,prefix,suffix) -> name

  ofp-to-ast:  LanguageBindingName(str)  -> str

  ofp-to-ast:  ExternalName(str)         -> OfpName(str)
  ofp-to-ast:  GenericName(str)          -> OfpName(str)
  ofp-to-ast:  LocalName(str)            -> OfpName(str)
  ofp-to-ast:  ModuleName(str)           -> OfpName(str)
  ofp-to-ast:  ObjectName(str)           -> OfpName(str)
  ofp-to-ast:  OnlyUseName(str)          -> OfpName(str)
  ofp-to-ast:  PartName(str)             -> OfpName(str)
  ofp-to-ast:  ProcedureName(str)        -> OfpName(str)
  ofp-to-ast:  ProgramName(str)          -> OfpName(str)
  ofp-to-ast:  UseName(str)              -> OfpName(str)

//R201
  ofp-to-ast:  Program(Some(str),[ProgramUnit])  -> OfpProgram(None(),[ProgramUnit]) {Comment(str)}
  ofp-to-ast:  Program(None(),   [ProgramUnit])  -> OfpProgram(None(),[ProgramUnit])

//R202
  ofp-to-ast:  ProgramUnit(program_unit)         -> program_unit

//R203
  ofp-to-ast:  ExternalSubprogram(subprogram)    -> subprogram

//R204
  ofp-to-ast:
    SpecificationPart(l1, l2, None(), l4)                     -> OfpSpecPart(<conc> (l1, l2, l4))
  ofp-to-ast:
    SpecificationPart(l1, l2, Some(tmpImplicitPart(l3)), l4)  -> OfpSpecPart(<conc> (l1, l2, l3, l4))

//R205
  ofp-to-ast:  ImplicitPart(l, stmt)             -> tmpImplicitPart(<conc> (l, [stmt]))

//R208
  ofp-to-ast:  ExecutionPart(stmts)              -> OfpExecPart(stmts)

//R209
  ofp-to-ast:  ExecutionPartConstruct(construct) -> construct

//R211
  ofp-to-ast:  InternalSubprogram(subprogram)    -> subprogram

//R212
  ofp-to-ast:  OtherSpecificationStmt(stmt)      -> stmt

//R213
  ofp-to-ast:  ExecutableConstruct(construct)    -> construct

//R214
  ofp-to-ast:  ActionStmt(stmt)                  -> stmt

//R215
  ofp-to-ast:  Keyword(Name(str))                -> OfpKeyword(str)

//R304
  ofp-to-ast:  Constant_AMB(LiteralConstant)     -> LiteralConstant

//R305
  ofp-to-ast:  LiteralConstant(constant)         -> constant

//R310
  ofp-to-ast:  DefinedOperator(op)               -> op

  ofp-to-ast:  PowerOp(op)                       -> OfpOp(op)
  ofp-to-ast:  MultOp(op)                        -> OfpOp(op)
  ofp-to-ast:  AddOp(op)                         -> OfpOp(op)
  ofp-to-ast:  ConcatOp(op)                      -> OfpOp(op)
  ofp-to-ast:  RelOp(op)                         -> OfpOp(op)
  ofp-to-ast:  NotOp(op)                         -> OfpOp(op)
  ofp-to-ast:  AndOp(op)                         -> OfpOp(op)
  ofp-to-ast:  OrOp(op)                          -> OfpOp(op)
  ofp-to-ast:  EquivOp(op)                       -> OfpOp(op)

//R311
  ofp-to-ast:  ExtendedIntrinsicOp(op)           -> op

//R402
  ofp-to-ast:  TypeSpec(type)                    -> type

//R403
  ofp-to-ast:  DeclarationTypeSpec(DOUBLEPRECISION())   -> OfpType(DOUBLEPRECISION(), None())
  ofp-to-ast:  DeclarationTypeSpec(DOUBLECOMPLEX())     -> OfpType(DOUBLECOMPLEX(), None())
  ofp-to-ast:  DeclarationTypeSpec(type)                -> type

//R404
//TODO - move these to R403?
  ofp-to-ast:  INTEGER   (kind)  -> OfpType(INTEGER(),  kind)
  ofp-to-ast:  REAL      (kind)  -> OfpType(REAL(),     kind)
  ofp-to-ast:  COMPLEX   (kind)  -> OfpType(COMPLEX(),  kind)
  ofp-to-ast:  LOGICAL   (kind)  -> OfpType(LOGICAL(),  kind)
  ofp-to-ast:  CHARACTER (char)  -> OfpType(CHARACTER(),char)

//R407
  ofp-to-ast:  IntLiteralConstant(str)                 -> OfpLiteral(str, OfpType(INTEGER(), None()))
  ofp-to-ast:  IntLiteralConstant(str, kind)           -> OfpLiteral(str, OfpType(INTEGER(), Some(kind)))

//R410
  ofp-to-ast:  DigitString(str)                        -> str

//R413
  ofp-to-ast:  RealLiteralConstant(str)                -> OfpLiteral(str, OfpType(REAL(), None()))
  ofp-to-ast:  RealLiteralConstant(str, kind)          -> OfpLiteral(str, OfpType(REAL(), Some(kind)))

//R501
  ofp-to-ast:
    TypeDeclarationStmt(label,type,None(),entities,eos) -> OfpTypeDeclarationStmt(label,type,[],   entities) {Comment(eos)}
  ofp-to-ast:
    TypeDeclarationStmt(label,type,attrs, entities,eos) -> OfpTypeDeclarationStmt(label,type,attrs,entities) {Comment(eos)}

//R502
  ofp-to-ast:  AttrSpec(spec)                           -> spec
  ofp-to-ast:  Some(OptAttrSpecList(None()))            -> []
  ofp-to-ast:  Some(OptAttrSpecList(Some(tuplelist)))   -> <conc>tuplelist
  ofp-to-ast:  AttrSpecList(attributes)                 -> attributes

//R503
  ofp-to-ast:  EntityDecl(name, aspec, cospec, charlen, init) -> OfpEntityDecl(name, aspec, cospec, charlen, init)
  ofp-to-ast:  OptArraySpec(ArraySpec)                        -> ArraySpec
  ofp-to-ast:  OptCoarraySpec(CoarraySpec)                    -> CoarraySpec
  ofp-to-ast:  EntityDeclList(EntityDecls)                    -> EntityDecls
    
//R508
  ofp-to-ast:  LanguageBindingSpec(opt_name)    -> OfpLanguageBinding(opt_name)

//R509
  ofp-to-ast:  CoarraySpec(spec)                -> spec

//R511
  ofp-to-ast:  ExplicitCoshapeSpec([])          -> OfpExplicitCoshape([OfpDimSpec(None(),"*")])

//R515
  ofp-to-ast:  ArraySpec(spec)                  -> spec

//R516
  ofp-to-ast:  ExplicitShapeSpec(upper)         -> OfpDimSpec(None(),upper)
  ofp-to-ast:  ExplicitShapeSpec(lower,upper)   -> OfpDimSpec(Some(lower),upper)
  ofp-to-ast:  ExplicitShapeSpecList(list)      -> OfpExplicitShape(list)

//R517
  ofp-to-ast:  LowerBound(expr)                 -> expr

//R518
  ofp-to-ast:  UpperBound(expr)                 -> expr

//R519
  ofp-to-ast:  AssumedShapeSpec(AssumedOrDeferredShapeSpec()) -> OfpDimSpec(None(),":")
  ofp-to-ast:  AssumedShapeSpec(lower)                        -> OfpDimSpec(Some(lower),":")
  ofp-to-ast:  AssumedShapeSpecList(list)                     -> OfpAssumedOrDeferredShape(list)

//R521
  ofp-to-ast:  AssumedSizeSpec(OfpExplicitShape(list), lower)
                            -> OfpAssumedSize(<concat>[list, [OfpDimSpec(Some(lower),"*")]])
  ofp-to-ast:  AssumedSizeSpec(OfpExplicitShape(list))
                            -> OfpAssumedSize(<concat>[list, [OfpDimSpec(None(),"*")]])

//R522
  ofp-to-ast:  ImpliedShapeSpecList(spec,list)    -> OfpImpliedShape(<concat>[[spec],list])

//R522a
  ofp-to-ast:  AssumedRankSpec()                  -> OfpAssumedRank([OfpDimSpec(None(),Some(".."))])

//R523
  ofp-to-ast:  IntentSpec_IN()                    -> OfpIntent(IN())
  ofp-to-ast:  IntentSpec_OUT()                   -> OfpIntent(OUT())
  ofp-to-ast:  IntentSpec_INOUT()                 -> OfpIntent(INOUT())

// assumed-size-spec and implied-shape-spec are ambiguous with only rank 1 array declarations
//    - The following four rules remove the ambiguity by choosing assumed-size over
//      implied-shape arrays. If there is an initializer then likely it really is implied-shape.
//
  ofp-to-ast:  AssumedOrImpliedSpec()
                            -> OfpAssumedSize([OfpDimSpec(None(),"*")])
  ofp-to-ast:  AssumedOrImpliedSpec(lower)
                            -> OfpAssumedSize([OfpDimSpec(Some(lower),"*")])

  rm-assumed-size: OfpAssumedSize([l]) -> l

  ofp-to-ast:  OfpImpliedShape(l1) -> OfpImpliedShape( <map(rm-assumed-size)>l1 )

//R560
  ofp-to-ast:  ImplicitStmt(label,eos)   -> OfpImplicitStmt(label, []) {Comment(eos)}

//R601
  ofp-to-ast:  Designator_AMB(expr)      -> expr

//R602
  ofp-to-ast:  Variable(OfpVarRef(expr)) -> OfpVarDef(expr)

//R611
//TODO OfpArrayRef, make sure multiple partrefs works
  ofp-to-ast:  DataRef([OfpVarRef])                        -> OfpVarRef
  ofp-to-ast:  DataRef(list)                               -> list

//R612
//TODO
  ofp-to-ast:  PartRef(name,None(),None())                 -> OfpVarRef(name)

//  PartName OptSectionSubscriptList? ImageSelector?       -> PartRef   {cons("PartRef")}

//R613
  ofp-to-ast:  StructureComponent(OfpVarRef(name))         -> OfpVarRef(name)

//R626
  ofp-to-ast:  AllocateStmt(label,AllocationList(list),eos)
                                            -> OfpAllocateStmt(label,None(),[],list)       {Comment(eos)}
  ofp-to-ast:  AllocateStmt(label,type,AllocationList(list),eos)
                                            -> OfpAllocateStmt(label,Some(type),[],list)   {Comment(eos)}
  ofp-to-ast:  AllocateStmt(label,AllocationList(list),opts,eos)
                                            -> OfpAllocateStmt(label,None(),opts,list)     {Comment(eos)}
  ofp-to-ast:  AllocateStmt(label,type,AllocationList(list),opts,eos)
                                            -> OfpAllocateStmt(label,Some(type),opts,list) {Comment(eos)}

//R627
  ofp-to-ast:  AllocOptList(list)           -> list

//R631
  ofp-to-ast:  Allocation(obj)              -> OfpAllocation(obj,None(),None())
  ofp-to-ast:  Allocation(obj,coshp)        -> OfpAllocation(obj,None(),Some(coshp))
  ofp-to-ast:  Allocation(obj,shp)          -> OfpAllocation(obj,Some(shp),None())
  ofp-to-ast:  Allocation(obj,shp,coshp)    -> OfpAllocation(obj,Some(shp),Some(coshp))

//R632
  ofp-to-ast:  AllocateObject(var_or_comp)  -> var_or_comp

//R633
  ofp-to-ast:  AllocateShapeSpec(UpperBoundExpr(ub))                    -> OfpDimSpec(None(),ub)
  ofp-to-ast:  AllocateShapeSpec(LowerBoundExpr(lb),UpperBoundExpr(ub)) -> OfpDimSpec(Some(lb),ub)
  ofp-to-ast:  AllocateShapeSpecList(list)                              -> OfpShape(list)

//R636
  ofp-to-ast:  AllocateCoarraySpec()        -> OfpCoshape([OfpDimSpec(None(),"*")])
  ofp-to-ast:  AllocateCoarraySpec(LowerBoundExpr(lb))
                                            -> OfpCoshape([OfpDimSpec(Some(lb),"*")])
  ofp-to-ast:  AllocateCoarraySpec(AllocateCoshapeSpecList(list))
                                            -> OfpCoshape(<concat>[list,[OfpDimSpec(None(),"*")]])
  ofp-to-ast:  AllocateCoarraySpec(AllocateCoshapeSpecList(list),LowerBoundExpr(lb))
                                            -> OfpCoshape(<concat>[list,[OfpDimSpec(Some(lb),"*")]])

//R637
  ofp-to-ast:  AllocateCoshapeSpec(UpperBoundExpr(ub))                    -> OfpDimSpec(None(),ub)
  ofp-to-ast:  AllocateCoshapeSpec(LowerBoundExpr(lb),UpperBoundExpr(ub)) -> OfpDimSpec(Some(lb),ub)


//R701
  ofp-to-ast:  Primary_AMB(expr)            -> expr

// Operators...

//R703
  ofp-to-ast:  DefinedUnaryOp(op)           -> OfpDefinedOp(op)

//R713
  ofp-to-ast:  RelOp_EQ()                   -> EQ()
  ofp-to-ast:  RelOp_NE()                   -> NE()
  ofp-to-ast:  RelOp_LT()                   -> LT()
  ofp-to-ast:  RelOp_LE()                   -> LE()
  ofp-to-ast:  RelOp_GT()                   -> GT()
  ofp-to-ast:  RelOp_GE()                   -> GE()

  ofp-to-ast:  PlusExpr(left,right)         -> OfpPlusExpr(left,right)

//R722
  ofp-to-ast:  Expr(OfpVarRef)              -> OfpVarRef

//R726
  ofp-to-ast:  IntExpr(expr)                -> expr

//R723
  ofp-to-ast:  DefinedBinaryOp(op)          -> OfpDefinedOp(op)

//R728
  ofp-to-ast:  SpecificationExpr(IntExpr)   -> IntExpr

//R732
  ofp-to-ast:  AssignmentStmt(label,var,expr,eos)           -> OfpAssignmentStmt(label,var,expr)  {Comment(eos)}

//R1101
  ofp-to-ast:
    MainProgram(None(),spec,exec,None(),end)
                  -> OfpMainProgram(None(),OfpScope(spec,exec,OfpFuncPart([]),None(),None(),Some(end)))
  ofp-to-ast:
    MainProgram(Some(begin),spec,exec,None(),end)
                  -> OfpMainProgram(Some(<ofp-extract-name>begin),
                                    OfpScope(spec,exec,OfpFuncPart([]),Some(begin),None(),Some(end)))

  ofp-to-ast:
    MainProgram(None(),spec,exec,Some(InternalSubprogramPart(contains,funcs)),end)
                  -> OfpMainProgram(None(),OfpScope(spec,exec,OfpFuncPart(funcs),None(),Some(contains),Some(end)))
  ofp-to-ast:
    MainProgram(Some(begin),spec,exec,Some(InternalSubprogramPart(contains,funcs)),end)
                  -> OfpMainProgram(Some(<ofp-extract-name>begin),
                                    OfpScope(spec,exec,OfpFuncPart(funcs),Some(begin),Some(contains),Some(end)))

//R1102
  ofp-to-ast:
    ProgramStmt(label,name,eos)    -> OfpProgramStmt(label,name)          {Comment(eos)}

//R1103
  ofp-to-ast:
    EndProgramStmt(label,eos)      -> OfpEndProgramStmt(label,None())     {Comment(eos)}
  ofp-to-ast:
    EndProgramStmt(label,name,eos) -> OfpEndProgramStmt(label,Some(name)) {Comment(eos)}

//R1104
  ofp-to-ast:  Module(begin,spec,None(),end)
                 -> OfpModule(<ofp-extract-name>begin,
                    OfpScope(spec,OfpExecPart([]),OfpFuncPart([]),Some(begin),None(),Some(end)))
  ofp-to-ast:  Module(begin,spec,Some(ModuleSubprogramPart(contains,l)),end)
                 -> OfpModule(<ofp-extract-name>begin,
                    OfpScope(spec,OfpExecPart([]),OfpFuncPart(l),Some(begin),Some(contains),Some(end)))

//R1105
  ofp-to-ast:  ModuleStmt(label,name,eos)    -> OfpModuleStmt(label,name)        {Comment(eos)}

//R1106
  ofp-to-ast:  EndModuleStmt(label,eos)      -> OfpEndModuleStmt(label,None())   {Comment(eos)}
  ofp-to-ast:  EndModuleStmt(label,name,eos) -> OfpEndModuleStmt(label,name)     {Comment(eos)}

//R1108
  ofp-to-ast:  ModuleSubprogram(subprogram)  -> subprogram

//R1109
  ofp-to-ast:  UseStmt(label,name,eos)
                  -> OfpUseStmt(label,name,None(),OfpRenameList([]),OfpOnlyList([]))  {Comment(eos)}
  ofp-to-ast:  UseStmt(label,name,OptRenameList(list),eos)
                  -> OfpUseStmt(label,name,None(),list,OfpOnlyList([]))               {Comment(eos)}
  ofp-to-ast:  UseStmt(label,name,OptOnlyList(list),eos)
                  -> OfpUseStmt(label,name,None(),OfpRenameList([]),list)             {Comment(eos)}
  ofp-to-ast:  UseStmt(label,nature,name,eos)
                  -> OfpUseStmt(label,name,nature,OfpRenameList([]),OfpOnlyList([]))  {Comment(eos)}
  ofp-to-ast:  UseStmt(label,nature,name,OptRenameList(list),eos)
                  -> OfpUseStmt(label,name,nature,list,OfpOnlyList([]))               {Comment(eos)}
  ofp-to-ast:  UseStmt(label,nature,name,OptOnlyList(list),eos)
                  -> OfpUseStmt(label,name,nature,OfpRenameList([]),list)             {Comment(eos)}

//R1110
  ofp-to-ast:  OptModuleNature(nature)       -> nature
  ofp-to-ast:  ModuleNature_INTRINSIC()      -> INTRINSIC()
  ofp-to-ast:  ModuleNature_NON_INTRINSIC()  -> NONINTRINSIC()

//R1111
  ofp-to-ast:  Rename(local_name,use_name)   -> OfpRename(local_name,use_name)
  ofp-to-ast:  RenameList(list)              -> OfpRenameList(list)

//R1112
  ofp-to-ast:  Only(item)                    -> OfpOnly(item)
  ofp-to-ast:  OnlyList(list)                -> OfpOnlyList(list)

//R1201
  ofp-to-ast:  InterfaceBlock(stmt,l,end)    -> OfpInterfaceBlock(stmt,end,l)

//R1202
  ofp-to-ast:  InterfaceSpecification(spec)  -> spec

//R1203
  ofp-to-ast:
    InterfaceStmt(label,spec,eos) -> OfpInterfaceStmt(label,None(), spec)             {Comment(eos)}
  ofp-to-ast:
    InterfaceStmt(label,eos)      -> OfpInterfaceStmt(label,Some("ABSTRACT"),None())  {Comment(eos)}

//R1204
  ofp-to-ast:  EndInterfaceStmt(label,spec,eos) -> OfpEndInterfaceStmt(label,spec)    {Comment(eos)}

//R1205
  ofp-to-ast:  InterfaceBody(begin,spec,end) -> OfpScope(spec,OfpExecPart([]),OfpFuncPart([]),Some(begin),None(),Some(end))

//R1206
  ofp-to-ast:  ProcedureStmt   (label,names,eos) -> OfpProcedureStmt(label,None(),  names)  {Comment(eos)}
  ofp-to-ast:  ProcedureStmt_MP(label,names,eos) -> OfpProcedureStmt(label,MODULE(),names)  {Comment(eos)}
  ofp-to-ast:  ProcedureNameList(names)          -> names

//R1207

  ofp-to-ast:  GenericSpec(OfpName(name))     -> OfpGenericSpec(OfpName(name))
  ofp-to-ast:  GenericSpec_AE()               -> OfpGenericSpec(ASSIGNMENT())
  ofp-to-ast:  GenericSpec(spec)              -> OfpGenericSpec(spec)

//R1208
  ofp-to-ast:  DefinedIoGenericSpec_RF()      -> READFORMATTED()
  ofp-to-ast:  DefinedIoGenericSpec_RU()      -> READUNFORMATTED()
  ofp-to-ast:  DefinedIoGenericSpec_WF()      -> WRITEFORMATTED()
  ofp-to-ast:  DefinedIoGenericSpec_WU()      -> WRITEUNFORMATTED()

//R1210
  ofp-to-ast:  ExternalStmt(label,list,eos)   -> OfpExternalStmt(label,list)               {Comment(eos)}
  ofp-to-ast:  ExternalNameList(names)        -> names

//R1220
  ofp-to-ast:  CallStmt(label,name,eos)       -> OfpCallStmt(label,name,[])                {Comment(eos)}
  ofp-to-ast:  CallStmt(label,name,args,eos)  -> OfpCallStmt(label,name,args)              {Comment(eos)}

//R1221
  ofp-to-ast:  ProcedureDesignator(proc)      -> OfpProcRef(proc)

//R1222
  ofp-to-ast:  ActualArgSpec(arg)             -> OfpArg(arg)
  ofp-to-ast:  ActualArgSpec(keyword,arg)     -> OfpArg(arg,keyword)
  ofp-to-ast:  ActualArgSpecList(args)        -> args

//R1223
  ofp-to-ast:  ActualArg(arg)                 -> arg

//R1225
  ofp-to-ast:  Prefix(l) -> OfpPrefix(l)

//R1226
  ofp-to-ast:  PrefixSpec(DeclarationTypeSpec) -> DeclarationTypeSpec

//R1227
  ofp-to-ast:  FunctionSubprogram(begin,spec,exec,None(),end)
                   -> OfpFunction(<ofp-extract-name>begin,
                                  OfpScope(spec,exec,OfpFuncPart([]),Some(begin),None(),Some(end)))
  ofp-to-ast:  FunctionSubprogram(begin,spec,exec,func,end)
                   -> OfpFunction(<ofp-extract-name>begin,
                                  OfpScope(spec,exec,func,Some(begin),None(),Some(end)))

//R1228
  ofp-to-ast:  FunctionStmt(label,None(),name,args,None(),eos)
                       -> OfpFunctionStmt(label,name,args,OfpPrefix([]),OfpSuffix([]))             {Comment(eos)}
  ofp-to-ast:  FunctionStmt(label,Some(prefix),name,args,None(),eos)
                       -> OfpFunctionStmt(label,name,args,prefix,OfpSuffix([]))                    {Comment(eos)}
  ofp-to-ast:  FunctionStmt(label,None(),name,args,suffix,eos)
                       -> OfpFunctionStmt(label,name,args,OfpPrefix([]),suffix)                    {Comment(eos)}
  ofp-to-ast:  FunctionStmt(label,Some(prefix),name,args,suffix,eos)
                       -> OfpFunctionStmt(label,name,args,prefix,suffix)                           {Comment(eos)}

  ofp-to-ast:  FunctionName(str)                -> OfpFunctionName(str)
  ofp-to-ast:  OptDummyArgNameList(args)        -> args

//R1229
  ofp-to-ast:  ProcLanguageBindingSpec(binding) -> binding

//R1231
  ofp-to-ast:  ResultName(str)                  -> OfpResultName(str)
  ofp-to-ast:  Some(Suffix(a))                  -> OfpSuffix([a])
  ofp-to-ast:  Some(Suffix(a,b))                -> OfpSuffix([a,b])

//R1232
  ofp-to-ast:
    EndFunctionStmt(label,eos)                  -> OfpEndFunctionStmt(label,None())                 {Comment(eos)}
  ofp-to-ast:
    EndFunctionStmt(label,name,eos)             -> OfpEndFunctionStmt(label,name)                   {Comment(eos)}

//R1233
  ofp-to-ast:  SubroutineSubprogram(begin,spec,exec,None(),end)
                   -> OfpSubroutine(<ofp-extract-name>begin,
                                    OfpScope(spec,exec,OfpFuncPart([]),Some(begin),None(),Some(end)))
  ofp-to-ast:  SubroutineSubprogram(begin,spec,exec,func,end)
                   -> OfpSubroutine(<ofp-extract-name>begin,
                                    OfpScope(spec,exec,func,Some(begin),None(),Some(end)))

//R1234 
  ofp-to-ast:  SubroutineStmt(label,None(),name,args,None(),eos)
                       -> OfpSubroutineStmt(label,name,args,OfpPrefix([]),OfpSuffix([]))            {Comment(eos)}
  ofp-to-ast:  SubroutineStmt(label,Some(prefix),name,eos)
                       -> OfpSubroutineStmt(label,name,[],prefix,OfpSuffix([]))                     {Comment(eos)}
  ofp-to-ast:  SubroutineStmt(label,None(),name,eos)
                       -> OfpSubroutineStmt(label,name,[],OfpPrefix([]),OfpSuffix([]))  {Comment(eos)}
  ofp-to-ast:  SubroutineStmt(label,Some(prefix),name,args,Some(binding),eos)
                       -> OfpSubroutineStmt(label,name,args,prefix,OfpSuffix([binding]))            {Comment(eos)}
  ofp-to-ast:  SubroutineStmt(label,None(),name,args,Some(binding),eos)
                       -> OfpSubroutineStmt(label,name,args,OfpPrefix([]),OfpSuffix([binding]))     {Comment(eos)}
  ofp-to-ast:  SubroutineStmt(label,Some(prefix),name,args,None(),eos)
                       -> OfpSubroutineStmt(label,name,args,prefix,OfpSuffix([]))                   {Comment(eos)}

  ofp-to-ast:  SubroutineName(str)       -> OfpSubroutineName(str)

//R1235
  ofp-to-ast:  DummyArgName(str)          -> OfpDummyArg(str)
  ofp-to-ast:  DummyArg_STAR()            -> OfpDummyArg(STAR())
  ofp-to-ast:  DummyArg(arg)              -> arg
  ofp-to-ast:  Some(DummyArgList(args))   -> args


//R1236
  ofp-to-ast:
    EndSubroutineStmt(label,eos)          -> OfpEndSubroutineStmt(label,None())        {Comment(eos)}
  ofp-to-ast:
    EndSubroutineStmt(label,name,eos)     -> OfpEndSubroutineStmt(label,name)          {Comment(eos)}

//R1237
  ofp-to-ast:  SeparateModuleSubprogram(begin,spec,exec,None(),end)
                   -> OfpMpSubprogram(<ofp-extract-name>begin,
                                    OfpScope(spec,exec,OfpFuncPart([]),Some(begin),None(),Some(end)))

//R1238
  ofp-to-ast:
    MpSubprogramStmt(label,name,eos)      -> OfpMpSubprogramStmt(label,name)           {Comment(eos)}

//R1239
  ofp-to-ast:
    EndMpSubprogramStmt(label,eos)        -> OfpEndMpSubprogramStmt(label,None())      {Comment(eos)}
  ofp-to-ast:
    EndMpSubprogramStmt(label,name,eos)   -> OfpEndMpSubprogramStmt(label,name)        {Comment(eos)}

//R1242
  ofp-to-ast:
    ContainsStmt(label,eos) -> OfpContainsStmt(label) {Comment(eos)}

