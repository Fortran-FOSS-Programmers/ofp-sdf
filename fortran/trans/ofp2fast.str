module ofp2fast

imports
   libstratego-lib
   Main
   AST
   ofp-simplify

signature
  constructors

// Ambiguities

   amb : list -> choice

   Comment   : A -> B            /* comments are put in annotations */
   OfpString : A -> B            /* node for a string literal */
   ERROR     : A -> B            /* error reporting for a node */

strategies //=================START OF STRATEGIES============================

  main = io-wrap(ofp2fast)

  ofp2fast =
      ofp-simplify
    ; innermost(ofp-to-ast)

  ofp-add-some = ?None() < id + !Some(<id>)

  ofp-name       = is-string < !OfpName (<id>)       + !None()
  ofp-some-name  = is-string < !Some(OfpName (<id>)) + !None()
  ofp-label      = is-string < !Some(OfpLabel(<id>)) + !None()

  ofp-spec       = is-string < !Some(OfpGenericSpec(OfpName(<id>))) + !None()

  ofp-char-select = ofp-add-some; id
  ofp-kind = ofp-add-some; id
  ofp-args = !OfpArgList(<id>)

  ofp-prefix = is-list < !OfpPrefix(<id>) + !OfpPrefix([])
  ofp-suffix = ?no-language-binding() < !OfpSuffix([]) + !OfpSuffix(<id>)

  ofp-var-def = is-string < !OfpVarDef(OfpName(<id>)) + !ERROR(<id>)

rules //========================START OF RULES===============================

  ofp-extract-name:  None()                              -> None()
  ofp-extract-name:  OfpModuleStmt       (_,name)        -> name
  ofp-extract-name:  OfpProgramStmt      (_,name)        -> Some(name)
  ofp-extract-name:  OfpMpSubprogramStmt (_,name)        -> name
  ofp-extract-name:  OfpSubroutineStmt   (_,name,_,_,_)  -> name
  ofp-extract-name:  OfpFunctionStmt     (_,name,_,_,_)  -> name

  ofp-extract-subprograms:  no-subprogram-part()            -> OfpFuncPart([])
  ofp-extract-subprograms:  SubprogramPart(_,subprograms)   -> OfpFuncPart(subprograms)

  ofp-extract-contains:  no-subprogram-part()               -> None()
  ofp-extract-contains:  SubprogramPart(contains,_)         -> Some(contains)

  ofp-fixup-scope:
      OfpScope(spec,exec,funcs,begin,_,end)
         -> OfpScope(spec,exec,<ofp-extract-subprograms>funcs,
                               <ofp-add-some>begin,
                               <ofp-extract-contains>funcs,
                               <ofp-add-some>end)

  ofp-to-ast:  ExternalName(str)         -> OfpName(str)
  ofp-to-ast:  ObjectName(str)           -> OfpName(str)

//R201
  ofp-to-ast:  Program(str,           [ProgramUnit]) -> OfpProgram(None(),[ProgramUnit]) {Comment(str)}
  ofp-to-ast:  Program(no-comments(), [ProgramUnit]) -> OfpProgram(None(),[ProgramUnit])

//R204
  ofp-to-ast:
    SpecificationPart(l1)                        -> OfpSpecPart(l1)

//R208
  ofp-to-ast:  ExecutionPart(stmts)              -> OfpExecPart(stmts)

//R215
  ofp-to-ast:  Keyword(Name(str))                -> OfpKeyword(str)

//R310
  ofp-to-ast:  PowerOp(op)                       -> OfpOp(op)
  ofp-to-ast:  MultOp(op)                        -> OfpOp(op)
  ofp-to-ast:  AddOp(op)                         -> OfpOp(op)
  ofp-to-ast:  ConcatOp(op)                      -> OfpOp(op)
  ofp-to-ast:  RelOp(op)                         -> OfpOp(op)
  ofp-to-ast:  NotOp(op)                         -> OfpOp(op)
  ofp-to-ast:  AndOp(op)                         -> OfpOp(op)
  ofp-to-ast:  OrOp(op)                          -> OfpOp(op)
  ofp-to-ast:  EquivOp(op)                       -> OfpOp(op)

//R403
  ofp-to-ast:  Type(INTEGER(kind))               -> OfpType(INTEGER(),         <ofp-kind>kind)
  ofp-to-ast:  Type(REAL(kind))                  -> OfpType(REAL(),            <ofp-kind>kind)
  ofp-to-ast:  Type(DOUBLEPRECISION())           -> OfpType(DOUBLEPRECISION(), None())
  ofp-to-ast:  Type(COMPLEX(kind))               -> OfpType(COMPLEX(),         <ofp-kind>kind)
  ofp-to-ast:  Type(CHARACTER(char))             -> OfpType(CHARACTER(),       <ofp-char-select>char)
  ofp-to-ast:  Type(LOGICAL(kind))               -> OfpType(LOGICAL(),         <ofp-kind>kind)
  ofp-to-ast:  Type(DOUBLECOMPLEX())             -> OfpType(DOUBLECOMPLEX(),   None())

//R405
  ofp-to-ast:  no-kind()                         -> None()
  ofp-to-ast:  no-kind-param()                   -> None()

//R407
  ofp-to-ast:  IntLiteralConstant(str, kind)     -> OfpLiteral(str, OfpType(INTEGER(), <ofp-kind>kind))

//R413
  ofp-to-ast:  RealLiteralConstant(str, kind)          -> OfpLiteral(str, OfpType(REAL(), <ofp-kind>kind))

//R501
  ofp-to-ast:
    TypeDeclarationStmt(label,type,None(),entities,eos) -> OfpTypeDeclarationStmt(label,type,[],   entities) {Comment(eos)}
  ofp-to-ast:
    TypeDeclarationStmt(label,type,attrs, entities,eos) -> OfpTypeDeclarationStmt(label,type,attrs,entities) {Comment(eos)}

//R502
  ofp-to-ast:  attr-specs(attributes)                   -> attributes
  ofp-to-ast:  no-attr-specs()                          -> []

//R503
  ofp-to-ast:  EntityDecl(name, aspec, cospec, charlen, init) -> OfpEntityDecl(name, aspec, cospec, charlen, init)
  ofp-to-ast:  OptArraySpec(ArraySpec)                        -> ArraySpec
  ofp-to-ast:  OptCoarraySpec(CoarraySpec)                    -> CoarraySpec
  ofp-to-ast:  EntityDeclList(EntityDecls)                    -> EntityDecls
    
//R508
  ofp-to-ast:  LanguageBindingName(str)         -> str
  ofp-to-ast:  LanguageBindingSpec(opt_name)    -> OfpLanguageBinding(opt_name)

//R511
  ofp-to-ast:  ExplicitCoshapeSpec([])          -> OfpExplicitCoshape([OfpDimSpec(None(),"*")])

//R516
  ofp-to-ast:  ExplicitShapeSpec(upper)         -> OfpDimSpec(None(),upper)
  ofp-to-ast:  ExplicitShapeSpec(lower,upper)   -> OfpDimSpec(Some(lower),upper)
  ofp-to-ast:  ExplicitShapeSpecList(list)      -> OfpExplicitShape(list)

//R519
  ofp-to-ast:  AssumedShapeSpec(AssumedOrDeferredShapeSpec()) -> OfpDimSpec(None(),":")
  ofp-to-ast:  AssumedShapeSpec(lower)                        -> OfpDimSpec(Some(lower),":")
  ofp-to-ast:  AssumedShapeSpecList(list)                     -> OfpAssumedOrDeferredShape(list)

//R521
  ofp-to-ast:  AssumedSizeSpec(OfpExplicitShape(list), lower)
                            -> OfpAssumedSize(<concat>[list, [OfpDimSpec(Some(lower),"*")]])
  ofp-to-ast:  AssumedSizeSpec(OfpExplicitShape(list))
                            -> OfpAssumedSize(<concat>[list, [OfpDimSpec(None(),"*")]])

//R522
  ofp-to-ast:  ImpliedShapeSpecList(spec,list)    -> OfpImpliedShape(<concat>[[spec],list])

//R522a
  ofp-to-ast:  AssumedRankSpec()                  -> OfpAssumedRank([OfpDimSpec(None(),Some(".."))])

//R523
  ofp-to-ast:  IntentSpec_IN()                    -> OfpIntent(IN())
  ofp-to-ast:  IntentSpec_OUT()                   -> OfpIntent(OUT())
  ofp-to-ast:  IntentSpec_INOUT()                 -> OfpIntent(INOUT())

// assumed-size-spec and implied-shape-spec are ambiguous with only rank 1 array declarations
//    - The following four rules remove the ambiguity by choosing assumed-size over
//      implied-shape arrays. If there is an initializer then likely it really is implied-shape.
//
  ofp-to-ast:  AssumedOrImpliedSpec()
                            -> OfpAssumedSize([OfpDimSpec(None(),"*")])
  ofp-to-ast:  AssumedOrImpliedSpec(lower)
                            -> OfpAssumedSize([OfpDimSpec(Some(lower),"*")])

  rm-assumed-size: OfpAssumedSize([l]) -> l

  ofp-to-ast:  OfpImpliedShape(l1) -> OfpImpliedShape( <map(rm-assumed-size)>l1 )

//R560
  ofp-to-ast:  ImplicitStmt(label,eos)   -> OfpImplicitStmt(<ofp-label>label, []) {Comment(eos)}

//R611
//TODO OfpArrayRef, make sure multiple partrefs works
  ofp-to-ast:  DataRef([OfpVarRef])                        -> OfpVarRef
  ofp-to-ast:  DataRef(list)                               -> list

//R612
  ofp-to-ast:  PartRef(name,no-section-subscripts(),
                            no-image-selector())           -> OfpVarRef(OfpName(name))

//R626
  ofp-to-ast:  AllocateStmt(label,type,list,opts,eos)
                  -> OfpAllocateStmt(<ofp-label>label,type,list,opts) {Comment(eos)}

  ofp-to-ast:  no-type-spec()                             -> None()
  ofp-to-ast:  no-alloc-opt-list()                        -> []

//R631
  ofp-to-ast:  Allocation(obj)              -> OfpAllocation(obj,None(),None())
  ofp-to-ast:  Allocation(obj,coshp)        -> OfpAllocation(obj,None(),Some(coshp))
  ofp-to-ast:  Allocation(obj,shp)          -> OfpAllocation(obj,Some(shp),None())
  ofp-to-ast:  Allocation(obj,shp,coshp)    -> OfpAllocation(obj,Some(shp),Some(coshp))

//R633
  ofp-to-ast:  AllocateShapeSpec(lb,ub)       -> OfpDimSpec(Some(lb),ub)

//R636
  ofp-to-ast:  AllocateCoarraySpec()        -> OfpCoshape([OfpDimSpec(None(),"*")])
  ofp-to-ast:  AllocateCoarraySpec(lb)      -> OfpCoshape([OfpDimSpec(Some(lb),"*")])
  ofp-to-ast:  AllocateCoarraySpec(AllocateCoshapeSpecList(list))
                                            -> OfpCoshape(<concat>[list,[OfpDimSpec(None(),"*")]])
  ofp-to-ast:  AllocateCoarraySpec(AllocateCoshapeSpecList(list),lb)
                                            -> OfpCoshape(<concat>[list,[OfpDimSpec(Some(lb),"*")]])

//R637
  ofp-to-ast:  AllocateCoshapeSpec(lb,ub)   -> OfpDimSpec(Some(lb),ub)

// Operators...

//R703
  ofp-to-ast:  DefinedUnaryOp(op)           -> OfpDefinedOp(op)

//R713
  ofp-to-ast:  RelOp_EQ()                   -> EQ()
  ofp-to-ast:  RelOp_NE()                   -> NE()
  ofp-to-ast:  RelOp_LT()                   -> LT()
  ofp-to-ast:  RelOp_LE()                   -> LE()
  ofp-to-ast:  RelOp_GT()                   -> GT()
  ofp-to-ast:  RelOp_GE()                   -> GE()

  ofp-to-ast:  PlusExpr(left,right)         -> OfpPlusExpr(left,right)

//R723
  ofp-to-ast:  DefinedBinaryOp(op)          -> OfpDefinedOp(op)

//R732
  ofp-to-ast:  AssignmentStmt(label,var,expr,eos)
                  -> OfpAssignmentStmt(<ofp-label>label,<ofp-var-def>var,expr)  {Comment(eos)}

  ofp-to-ast:  no-program-stmt()            -> None()

//R1101
  ofp-to-ast:  MainProgram(begin,spec,exec,funcs,end)
                  -> OfpMainProgram(<ofp-extract-name>begin,
                                    <ofp-fixup-scope>OfpScope(spec,exec,funcs,begin,None(),end))

//R1102
  ofp-to-ast:  ProgramStmt(label,name,eos)
                  -> OfpProgramStmt(<ofp-label>label,<ofp-name>name)          {Comment(eos)}

//R1103
  ofp-to-ast:  EndProgramStmt(label,name,eos)
                  -> OfpEndProgramStmt(<ofp-label>label,<ofp-some-name>name)  {Comment(eos)}

//R1104
  ofp-to-ast:  Module(begin,spec,None(),end)
                  -> OfpModule(<ofp-extract-name>begin,
                     OfpScope(spec,OfpExecPart([]),OfpFuncPart([]),Some(begin),None(),Some(end)))
  ofp-to-ast:  Module(begin,spec,Some(ModuleSubprogramPart(contains,l)),end)
                  -> OfpModule(<ofp-extract-name>begin,
                     OfpScope(spec,OfpExecPart([]),OfpFuncPart(l),Some(begin),Some(contains),Some(end)))

//R1105
  ofp-to-ast:  ModuleStmt(label,name,eos)
                  -> OfpModuleStmt(<ofp-label>label,<ofp-name>name)             {Comment(eos)}

//R1106
  ofp-to-ast:  EndModuleStmt(label,name,eos)
                  -> OfpEndModuleStmt(<ofp-label>label,<ofp-some-name>name)     {Comment(eos)}

  ofp-to-ast:  no-module-nature()           -> None()

//R1109
  ofp-to-ast:  UseStmt(label,nature,name,rename_only,eos)
                  -> OfpUseStmt(<ofp-label>label,<ofp-add-some>nature,
                                <ofp-name>name,rename_only)                     {Comment(eos)}

//R1111
  ofp-to-ast:  Rename(local_name,use_name)   -> OfpRename(local_name,use_name)
  ofp-to-ast:  RenameList(list)              -> OfpRenameList(list)

//R1112
  ofp-to-ast:  OnlyList(list)                -> OfpOnlyList(list)

//R1201
  ofp-to-ast:  InterfaceBlock(stmt,l,end)    -> OfpInterfaceBlock(stmt,end,l)

//R1203
  ofp-to-ast:
    InterfaceStmt(label,spec,eos)      -> OfpInterfaceStmt(<ofp-label>label,None(),<ofp-spec>spec)    {Comment(eos)}
  ofp-to-ast:
    AbstractInterfaceStmt(label,eos)   -> OfpInterfaceStmt(<ofp-label>label,Some("ABSTRACT"),None())  {Comment(eos)}

//R1204
  ofp-to-ast:
    EndInterfaceStmt(label,spec,eos)   -> OfpEndInterfaceStmt(<ofp-label>label,<ofp-spec>spec)        {Comment(eos)}

//R1205
  ofp-to-ast:  InterfaceBody(begin,spec,end) -> OfpScope(spec,OfpExecPart([]),OfpFuncPart([]),Some(begin),None(),Some(end))

//R1206
  ofp-to-ast:  ProcedureStmt   (label,names,eos) -> OfpProcedureStmt(label,None(),  names)  {Comment(eos)}
  ofp-to-ast:  ProcedureStmt_MP(label,names,eos) -> OfpProcedureStmt(label,MODULE(),names)  {Comment(eos)}
  ofp-to-ast:  ProcedureNames(names)             -> names

//R1207
//  ofp-to-ast:  GenericSpec(OfpName(name))     -> OfpGenericSpec(OfpName(name))
//  ofp-to-ast:  GenericSpec_AE()               -> OfpGenericSpec(ASSIGNMENT())
//  ofp-to-ast:  GenericSpec(spec)              -> OfpGenericSpec(spec)

//R1210
  ofp-to-ast:  ExternalStmt(label,list,eos)   -> OfpExternalStmt(label,list)               {Comment(eos)}
  ofp-to-ast:  ExternalNameList(names)        -> names

//R1220
  ofp-to-ast:  CallStmt(label,name,eos)       -> OfpCallStmt(label,name,[])                {Comment(eos)}
  ofp-to-ast:  CallStmt(label,name,args,eos)  -> OfpCallStmt(label,name,args)              {Comment(eos)}

//R1221
  ofp-to-ast:  ProcedureDesignator(proc)      -> OfpProcRef(proc)

//R1222
  ofp-to-ast:  ActualArgSpec(arg)             -> OfpArg(arg)
  ofp-to-ast:  ActualArgSpec(keyword,arg)     -> OfpArg(arg,keyword)
  ofp-to-ast:  ActualArgSpecList(args)        -> args

//R1227
  ofp-to-ast:  FunctionSubprogram(begin,spec,exec,funcs,end)
                   -> OfpFunction(<ofp-extract-name>begin,
                                  OfpScope(spec,exec,funcs,Some(begin),None(),Some(end)))

//R1228
  ofp-to-ast:  FunctionStmt(label,prefix,name,args,suffix,eos)
                   -> OfpFunctionStmt(<ofp-label>label,<ofp-name>name,<ofp-args>args,
                                      <ofp-prefix>prefix,<ofp-suffix>suffix)   {Comment(eos)}

//R1231
  ofp-to-ast:  Suffix(a,b)                      -> OfpSuffix([a,b])
  ofp-to-ast:  no-suffix()                      -> OfpSuffix([])
  ofp-to-ast:  no-result-name()                 -> None()

//R1232
  ofp-to-ast:  EndFunctionStmt(label,name,eos)
                   -> OfpEndFunctionStmt(<ofp-label>label,<ofp-some-name>name)  {Comment(eos)}

//R1233
  ofp-to-ast:  SubroutineSubprogram(begin,spec,exec,funcs,end)
                   -> OfpSubroutine(<ofp-extract-name>begin,
                                    <ofp-fixup-scope>OfpScope(spec,exec,funcs,begin,None(),end))

//R1234 
  ofp-to-ast:  SubroutineStmt(label,prefix,name,args,binding,eos)
                   -> OfpSubroutineStmt(<ofp-label>label,<ofp-name>name,<ofp-args>args,
                                        <ofp-prefix>prefix,<ofp-suffix>binding)   {Comment(eos)}

//R1236
  ofp-to-ast:  EndSubroutineStmt(label,name,eos) 
                   -> OfpEndSubroutineStmt(<ofp-label>label,<ofp-some-name>name)  {Comment(eos)}

//R1237
  ofp-to-ast:  SeparateModuleSubprogram(begin,spec,exec,funcs,end)
                   -> OfpMpSubprogram(<ofp-extract-name>begin,
                                      <ofp-fixup-scope>OfpScope(spec,exec,funcs,begin,None(),end))

//R1238
  ofp-to-ast:  MpSubprogramStmt(label,name,eos)
                   -> OfpMpSubprogramStmt(<ofp-label>label,<ofp-name>name)         {Comment(eos)}

//R1239
  ofp-to-ast:  EndMpSubprogramStmt(label,name,eos)
                   -> OfpEndMpSubprogramStmt(<ofp-label>label,<ofp-some-name>name) {Comment(eos)}

//R1242
  ofp-to-ast:
    ContainsStmt(label,eos) -> OfpContainsStmt(<ofp-label>label)                   {Comment(eos)}

