module ofp2fast

imports
   libstratego-lib
   Main
   AST
   ofp-simplify

signature
  constructors

// Ambiguities
  amb : list -> choice

  Comment   : A -> B            /* comments are put in annotations */
  OfpString : A -> B            /* node for a string literal */
  ERROR     : A -> B            /* error reporting for a node */

strategies //=================START OF STRATEGIES============================

  main = io-wrap(ofp2fast)

  ofp2fast =
      ofp-simplify
    ; innermost(ofp-to-ast)

// Try to remove usage of Some()
//ofp-add-some = ?None() < id + !Some(<id>)
  ofp-add-some = id

  ofp-name       = is-string < !OfpName (<id>)       + !None()
  ofp-name-some  = is-string < !Some(OfpName (<id>)) + !None()
  ofp-name-fail  = is-string ; !OfpName (<id>)

  ofp-label      = is-string < !Label(<id>) + !None()

  ofp-spec       = is-string < !Some(OfpGenericSpec(OfpName(<id>))) + !None()

  ofp-char-select = id
  ofp-kind = id
  ofp-args = !OfpArgList(<id>)

  ofp-prefix = is-list < !OfpPrefix(<id>) + !OfpPrefix([])
  ofp-suffix = ?no-language-binding() < !OfpSuffix([]) + !OfpSuffix(<id>)

  ofp-var-def = is-string < !OfpVarDef(OfpName(<id>)) + !ERROR(<id>)
  ofp-var-ref = is-string < !OfpVarRef(OfpName(<id>)) + id

rules //========================START OF RULES===============================

  ofp-extract-name:  no-program-stmt()                      -> None()
  ofp-extract-name:  ModuleStmt       (_,name,_)            -> name
  ofp-extract-name:  ProgramStmt      (_,name,_)            -> name
  ofp-extract-name:  MpSubprogramStmt (_,name,_)            -> name
  ofp-extract-name:  SubroutineStmt   (_,_,name,_,_,_)      -> name
  ofp-extract-name:  FunctionStmt     (_,_,name,_,_,_)      -> name

  ofp-extract-subprograms:  no-subprogram-part()            -> OfpFuncPart([])
  ofp-extract-subprograms:  SubprogramPart(_,subprograms)   -> OfpFuncPart(subprograms)

  ofp-extract-contains:  no-subprogram-part()               -> None()
  ofp-extract-contains:  SubprogramPart(contains,_)         -> contains

  ofp-fixup-scope:
      OfpScope(spec,exec,funcs,begin,_,end)
         -> OfpScope(spec,exec,<ofp-extract-subprograms>funcs,
                               <ofp-add-some>begin,
                               <ofp-extract-contains>funcs,
                               <ofp-add-some>end)

  ofp-to-ast:  ObjectName(str)           -> OfpName(str)

//R201
  ofp-to-ast:  Program(no-comments(), ProgramUnits) -> OfpProgram(None(),ProgramUnits)
  ofp-to-ast:  Program(str,           ProgramUnits) -> OfpProgram(None(),ProgramUnits) {Comment(str)}

//R204
  ofp-to-ast:
    SpecificationPart(l1)                        -> OfpSpecPart(l1)

//R208
  ofp-to-ast:  ExecutionPart(stmts)              -> OfpExecPart(stmts)

//R215
//  ofp-to-ast:  Keyword(Name(str))                -> OfpKeyword(str)

//R310
  ofp-to-ast:  PowerOp(op)                       -> OfpOp(op)
  ofp-to-ast:  MultOp(op)                        -> OfpOp(op)
  ofp-to-ast:  AddOp(op)                         -> OfpOp(op)
  ofp-to-ast:  ConcatOp(op)                      -> OfpOp(op)
  ofp-to-ast:  RelOp(op)                         -> OfpOp(op)
  ofp-to-ast:  NotOp(op)                         -> OfpOp(op)
  ofp-to-ast:  AndOp(op)                         -> OfpOp(op)
  ofp-to-ast:  OrOp(op)                          -> OfpOp(op)
  ofp-to-ast:  EquivOp(op)                       -> OfpOp(op)

//R403
  ofp-to-ast:  INTEGER(kind)                     -> OfpType(INTEGER(),         <ofp-kind>kind)
  ofp-to-ast:  REAL(kind)                        -> OfpType(REAL(),            <ofp-kind>kind)
  ofp-to-ast:  DOUBLEPRECISION()                 -> OfpType(DOUBLEPRECISION(), None())
  ofp-to-ast:  COMPLEX(kind)                     -> OfpType(COMPLEX(),         <ofp-kind>kind)
  ofp-to-ast:  CHARACTER(char)                   -> OfpType(CHARACTER(),       <ofp-char-select>char)
  ofp-to-ast:  LOGICAL(kind)                     -> OfpType(LOGICAL(),         <ofp-kind>kind)
  ofp-to-ast:  DOUBLECOMPLEX()                   -> OfpType(DOUBLECOMPLEX(),   None())

//R511
  ofp-to-ast:  ExplicitCoshapeSpec([])          -> OfpExplicitCoshape([OfpDimSpec(None(),"*")])

//R516
  ofp-to-ast:  ExplicitShapeSpec(upper)         -> OfpDimSpec(None(),upper)
  ofp-to-ast:  ExplicitShapeSpec(lower,upper)   -> OfpDimSpec(<ofp-add-some>lower,upper)
  ofp-to-ast:  ExplicitShapeSpecList(list)      -> OfpExplicitShape(list)

//R519
  ofp-to-ast:  AssumedShapeSpec(AssumedOrDeferredShapeSpec()) -> OfpDimSpec(None(),":")
  ofp-to-ast:  AssumedShapeSpec(lower)                        -> OfpDimSpec(<ofp-add-some>lower,":")
  ofp-to-ast:  AssumedShapeSpecList(list)                     -> OfpAssumedOrDeferredShape(list)

//R521
  ofp-to-ast:  AssumedSizeSpec(OfpExplicitShape(list), lower)
                            -> OfpAssumedSize(<concat>[list, [OfpDimSpec(<ofp-add-some>lower,"*")]])
  ofp-to-ast:  AssumedSizeSpec(OfpExplicitShape(list))
                            -> OfpAssumedSize(<concat>[list, [OfpDimSpec(None(),"*")]])

//R522
  ofp-to-ast:  ImpliedShapeSpecList(spec,list)    -> OfpImpliedShape(<concat>[[spec],list])

//R522a
  ofp-to-ast:  AssumedRankSpec()                  -> OfpAssumedRank([OfpDimSpec(None(),<ofp-add-some>"..")])

//R523
  ofp-to-ast:  IntentSpec_IN()                    -> OfpIntent(IN())
  ofp-to-ast:  IntentSpec_OUT()                   -> OfpIntent(OUT())
  ofp-to-ast:  IntentSpec_INOUT()                 -> OfpIntent(INOUT())

// assumed-size-spec and implied-shape-spec are ambiguous with only rank 1 array declarations
//    - The following four rules remove the ambiguity by choosing assumed-size over
//      implied-shape arrays. If there is an initializer then likely it really is implied-shape.
//
  ofp-to-ast:  AssumedOrImpliedSpec()
                            -> OfpAssumedSize([OfpDimSpec(None(),"*")])
  ofp-to-ast:  AssumedOrImpliedSpec(lower)
                            -> OfpAssumedSize([OfpDimSpec(<ofp-add-some>lower,"*")])

  rm-assumed-size: OfpAssumedSize([l]) -> l

  ofp-to-ast:  OfpImpliedShape(l1) -> OfpImpliedShape( <map(rm-assumed-size)>l1 )

//R612
  ofp-to-ast:  PartRef(name,no-section-subscripts(),
                            no-image-selector())           -> OfpVarRef(OfpName(name))

//R626
  ofp-to-ast:  AllocateStmt(label,type,list,opts,eos)
                  -> OfpAllocateStmt(<ofp-label>label,type,list,<map(alloc-opt)>opts) {Comment(eos)}

  ofp-to-ast:  no-type-spec()                             -> None()

//R627
//TODO - these may not all be simple ids (check for arrays, ...)
  alloc-opt:  ERRMSG(str)                                 -> ERRMSG(<ofp-name-fail>str)
  alloc-opt:  MOLD  (str)                                 -> MOLD  (<ofp-name-fail>str)
  alloc-opt:  SOURCE(str)                                 -> SOURCE(<ofp-name-fail>str)
  alloc-opt:  STAT  (str)                                 -> STAT  (<ofp-name-fail>str)

//R631
  ofp-to-ast:  Allocation(obj,shp,coshp)    -> OfpAllocation(<ofp-var-ref>obj,shp,coshp)

//R633
  ofp-to-ast:  AllocateShapeSpec(lb,ub)     -> OfpDimSpec(<ofp-var-ref>lb,<ofp-var-ref>ub)
  ofp-to-ast:  no-shape-specs()             -> None()
  ofp-to-ast:  no-coshape-specs()           -> None()
  ofp-to-ast:  no-lower-bound()             -> None()

//R636
  ofp-to-ast:  AllocateCoarraySpec(list,lb) -> OfpCoshape(<concat>[list,[OfpDimSpec(<ofp-add-some>lb,"*")]])

/*****
  ofp-to-ast:  AllocateCoarraySpec()        -> OfpCoshape([OfpDimSpec(None(),"*")])
  ofp-to-ast:  AllocateCoarraySpec(lb)      -> OfpCoshape([OfpDimSpec(<ofp-add-some>lb,"*")])
  ofp-to-ast:  AllocateCoarraySpec(AllocateCoshapeSpecList(list))
                                            -> OfpCoshape(<concat>[list,[OfpDimSpec(None(),"*")]])
  ofp-to-ast:  AllocateCoarraySpec(AllocateCoshapeSpecList(list),lb)
                                            -> OfpCoshape(<concat>[list,[OfpDimSpec(<ofp-add-some>lb,"*")]])
*****/

//R637
  ofp-to-ast:  AllocateCoshapeSpec(lb,ub)   -> OfpDimSpec(<ofp-add-some>lb,ub)

// Operators...

//R703
  ofp-to-ast:  DefinedUnaryOp(op)           -> OfpDefinedOp(op)

//R713
  ofp-to-ast:  RelOp_EQ()                   -> EQ()
  ofp-to-ast:  RelOp_NE()                   -> NE()
  ofp-to-ast:  RelOp_LT()                   -> LT()
  ofp-to-ast:  RelOp_LE()                   -> LE()
  ofp-to-ast:  RelOp_GT()                   -> GT()
  ofp-to-ast:  RelOp_GE()                   -> GE()

//R723
  ofp-to-ast:  DefinedBinaryOp(op)          -> OfpDefinedOp(op)

//R1101
  ofp-to-ast:  MainProgram(begin,spec,exec,funcs,end)
                  -> OfpMainProgram(<ofp-extract-name>begin,
                                    <ofp-fixup-scope>OfpScope(spec,exec,funcs,begin,None(),end))

//R1104
  ofp-to-ast:  Module(begin,spec,no-module-subprogram-part(),end)
                  -> OfpModule(<ofp-extract-name>begin,
                     OfpScope(spec,OfpExecPart([]),OfpFuncPart([]),<ofp-add-some>begin,None(),<ofp-add-some>end))
  ofp-to-ast:  Module(begin,spec,ModuleSubprogramPart(contains,l),end)
                  -> OfpModule(<ofp-extract-name>begin,
                     OfpScope(spec,OfpExecPart([]),OfpFuncPart(l),<ofp-add-some>begin,<ofp-add-some>contains,<ofp-add-some>end))

//R1207
//  ofp-to-ast:  GenericSpec(OfpName(name))     -> OfpGenericSpec(OfpName(name))
//  ofp-to-ast:  GenericSpec_AE()               -> OfpGenericSpec(ASSIGNMENT())
//  ofp-to-ast:  GenericSpec(spec)              -> OfpGenericSpec(spec)

//R1211
//ofp-to-ast: ProcedureDeclarationStmt(label,intr,specs,decls,eos)
//              -> OfpProcedureDeclarationStmt(<ofp-label>label,intr,specs,decls)            {Comment(eos)}

//R1227
  ofp-to-ast:  FunctionSubprogram(begin,spec,exec,funcs,end)
                   -> OfpFunction(<ofp-extract-name>begin,
                                  OfpScope(spec,exec,funcs,<ofp-add-some>begin,None(),<ofp-add-some>end))

//R1231
  ofp-to-ast:  Suffix(a,b)                      -> OfpSuffix([a,b])
  ofp-to-ast:  no-suffix()                      -> OfpSuffix([])

//R1233
  ofp-to-ast:  SubroutineSubprogram(begin,spec,exec,funcs,end)
                   -> OfpSubroutine(<ofp-extract-name>begin,
                                    <ofp-fixup-scope>OfpScope(spec,exec,funcs,begin,None(),end))

//R1237
  ofp-to-ast:  SeparateModuleSubprogram(begin,spec,exec,funcs,end)
                   -> OfpMpSubprogram(<ofp-extract-name>begin,
                                      <ofp-fixup-scope>OfpScope(spec,exec,funcs,begin,None(),end))
