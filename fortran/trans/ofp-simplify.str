module ofp-simplify

imports
   libstratego-lib
   Main
   AST

signature
  constructors

    Comment   : A -> B            /* comments are put in annotations */
    OfpName   : A -> B            /* node for a name string */                                  // R303
    OfpString : A -> B            /* node for a string literal */

    tmpImplicitPart : A -> B    /* to combine all to a list */


/***
   OfpScope    : OfpSpecPart * OfpExecPart * OfpFuncPart
                             * Option(OfpBeginStmt)
                             * Option(OfpContainsStmt)
                             * Option(OfpEndStmt)                -> OfpScope

   OfpStmt     : OfpStmt
   OfpDecl     : OfpDecl

   OfpProgram  : Option(OfpFile) * List(OfpProgramUnit) -> OfpProgram                           // R201

   OfpSpecPart : List(OfpDecl)     -> OfpSpecPart                                               // R204
   OfpExecPart : List(OfpStmt)     -> OfpExecPart                                               // R208
   OfpFuncPart : List(OfpDecl)     -> OfpFuncPart

   INTEGER          : INTEGER                                                                   // R404
   REAL             : REAL
   DOUBLEPRECISION  : DOUBLEPRECISION
   COMPLEX          : COMPLEX
   CHARACTER        : CHARACTER
   LOGICAL          : LOGICAL
   DOUBLECOMPLEX    : DOUBLECOMPLEX

   OfpType          : Type * Selector   -> OfpType

   OfpLiteral       : value * OfpType   -> OfpLiteral
***/  

   OfpTypeDeclarationStmt : Option(Label) * OfpType
                                          * List(OfpAttrSpec)
                                          * List(OfpEntiyDecl)     -> OfpTypeDeclarationStmt    // R501

   OfpEntityDecl        : OfpName * Option(ArraySpec)
                                  * Option(CoarraySpec)
                                  * Option(CharLength)
                                  * Option(Initialization)         -> OfpEntityDecl             // R503

   OfpLanguage          : LanguageBindingSpec                      -> OfpLanguage               // R508

   OfpExplicitShape     : List(OfpDimSpec)                         -> OfpExplicitShape          // R516

   OfpDimSpec           : Option(lower) * upper                    -> OfpDimSpec                // R517-R518

   OfpAssumedOrDeferredShape    : List(OfpDimSpec)                 -> OfpAssumedOrDeferredShape // R519-R520
   OfpAssumedSize               : List(OfpDimSpec)                 -> OfpAssumedSize            // R521
   OfpImpliedShape              : List(OfpDimSpec)                 -> OfpImpliedShape           // R522
   OfpAssumedRank               : List(OfpDimSpec)                 -> OfpAssumedRank            // R522a

/***
   OfpImplicitStmt      : Option(Label) * List(ImplicitSpec)       -> OfpImplicitStmt           // R560

   OfpVarDef            : OfpName                                  -> OfpVarDef                 // R602

   OfpVarRef            : OfpName                                  -> OfpVarRef                 // R612

   OfpAssignmentStmt    : Option(Label) * OfpVarDef * OfpVarRef    -> OfpAssignmentStmt         // R732

   OfpMainProgram       : Option(OfpName)  * OfpScope              -> OfpMainProgram            // R1101
   OfpProgramStmt       : Option(OfpLabel) * OfpName               -> OfpProgramStmt            // R1102
   OfpEndProgramStmt    : Option(OfpLabel) * Option(OfpName)       -> OfpEndProgramStmt         // R1103

   OfpModule            : Option(OfpName) * OfpScope               -> OfpModule                 // R1104
   OfpModuleStmt        : Option(Label)   * OfpName                -> OfpModuleStmt             // R1105
   OfpEndModuleStmt     : Option(Label)   * Option(OfpName)        -> OfpEndModuleStmt          // R1106
***/

   OfpInterfaceBlock    : OfpInterfaceStmt * OfpEndInterfaceStmt
                                    * List(InterfaceSpecification) -> OfpInterfaceBlock         // R1201

//TODO - GenericSpec
   OfpInterfaceStmt     : Option(Label) * Option(abstract)
                                        * Option(GenericSpec)      -> OfpInterfaceStmt         // R1203

//TODO - GenericSpec
   OfpEndInterfaceStmt  : Option(Label) * Option(GenericSpec)      -> OfpEndInterfaceStmt      // R1204

   OfpPrefix            : List(prefix_elements)                    -> OfpPrefix                // R1225

   OfpFunction          : OfpName * OfpScope                       -> OfpFunction              // R1227

   OfpFunctionStmt      : Option(Label) * OfpName 
                                        * OfpArgList
                                        * OfpPrefix
                                        * OfpSuffix                -> OfpFunctionStmt          // R1228

   OfpSuffix            : List(suffix_elements)                    -> OfpSuffix                // R1231


   OfpEndFunctionStmt   : Option(Label) * Option(OfpName)          -> OfpEndFunctionStmt       // R1232

   OfpSubroutine        : OfpName * OfpScope                       -> OfpSubroutine            // R1233

   OfpSubroutineStmt    : Option(Label) * OfpName 
                                        * OfpArgList
                                        * OfpPrefix
                                        * OfpSuffix                -> OfpSubroutineStmt        // R1234
   STAR                 : STAR                                                                 // R1235
   OfpEndSubroutineStmt : Option(Label) * Option(OfpName)          -> OfpEndSubroutineStmt     // R1236

   OfpArgList           : List(args)                               -> OfpArgList

/***
   OfpContainsStmt      : Option(Label)                            -> OfpContainsStmt          // R1242
***/

strategies
  io-ofp-simplify =
    io-wrap(ofp-simplify)

  ofp-simplify =
    innermost(ofp-to-ast)

rules

  ofp-extract-name:  OfpModuleStmt    (label,name)                    -> name
  ofp-extract-name:  OfpProgramStmt   (label,name)                    -> name
  ofp-extract-name:  OfpSubroutineStmt(label,name,args,prefix,suffix) -> name
  ofp-extract-name:  OfpFunctionStmt  (label,name,args,prefix,suffix) -> name

  ofp-extract-contains:  OfpModuleStmt(label,name)                    -> name

  ofp-to-ast:  LanguageBindingName(str)  -> OfpString(str)

  ofp-to-ast:  DummyArgName(str)         -> OfpName(str)
  ofp-to-ast:  FunctionName(str)         -> OfpName(str)
  ofp-to-ast:  GenericName(str)          -> OfpName(str)
  ofp-to-ast:  ModuleName(str)           -> OfpName(str)
  ofp-to-ast:  ObjectName(str)           -> OfpName(str)
  ofp-to-ast:  PartName(str)             -> OfpName(str)
  ofp-to-ast:  ProgramName(str)          -> OfpName(str)
  ofp-to-ast:  ResultName(str)           -> OfpName(str)
  ofp-to-ast:  SubroutineName(str)       -> OfpName(str)

//R201
  ofp-to-ast:  Program(Some(str),[ProgramUnit])  -> OfpProgram(None(),[ProgramUnit]) {Comment(str)}
  ofp-to-ast:  Program(None(),   [ProgramUnit])  -> OfpProgram(None(),[ProgramUnit])

//R202
  ofp-to-ast:  ProgramUnit(program_unit)         -> program_unit

//R203
  ofp-to-ast:  ExternalSubprogram(subprogram)    -> subprogram

//R204
  ofp-to-ast:
    SpecificationPart(l1, l2, None(), l4)                     -> OfpSpecPart(<conc> (l1, l2, l4))
  ofp-to-ast:
    SpecificationPart(l1, l2, Some(tmpImplicitPart(l3)), l4)  -> OfpSpecPart(<conc> (l1, l2, l3, l4))

//R207
  ofp-to-ast:  DeclarationConstruct(construct)   -> construct

//R205
  ofp-to-ast:  ImplicitPart(l, stmt)             -> tmpImplicitPart(<conc> (l, [stmt]))

//R208
  ofp-to-ast:  ExecutionPart(stmts)              -> OfpExecPart(stmts)

//R209
  ofp-to-ast:  ExecutionPartConstruct(construct) -> construct

//R211
  ofp-to-ast:  InternalSubprogram(subprogram)    -> subprogram

//R213
  ofp-to-ast:  ExecutableConstruct(construct)    -> construct

//R214
  ofp-to-ast:  ActionStmt(stmt)                  -> stmt

//R304
  ofp-to-ast:  Constant_AMB(LiteralConstant)     -> LiteralConstant

//R305
  ofp-to-ast:  LiteralConstant(constant)         -> constant

//R403
  ofp-to-ast:  DeclarationTypeSpec(DOUBLEPRECISION())   -> OfpType(DOUBLEPRECISION(), None())
  ofp-to-ast:  DeclarationTypeSpec(DOUBLECOMPLEX())     -> OfpType(DOUBLECOMPLEX(), None())
  ofp-to-ast:  DeclarationTypeSpec(type)                -> type

//R404
//TODO - move these to R403?
  ofp-to-ast:  INTEGER   (kind)  -> OfpType(INTEGER(),  kind)
  ofp-to-ast:  REAL      (kind)  -> OfpType(REAL(),     kind)
  ofp-to-ast:  COMPLEX   (kind)  -> OfpType(COMPLEX(),  kind)
  ofp-to-ast:  LOGICAL   (kind)  -> OfpType(LOGICAL(),  kind)
  ofp-to-ast:  CHARACTER (char)  -> OfpType(CHARACTER(),char)

//R407
  ofp-to-ast:  IntLiteralConstant(str)                 -> OfpLiteral(str, OfpType(INTEGER(), None()))
  ofp-to-ast:  IntLiteralConstant(str, kind)           -> OfpLiteral(str, OfpType(INTEGER(), Some(kind)))

//R410
  ofp-to-ast:  DigitString(str)                        -> str

//R413
  ofp-to-ast:  RealLiteralConstant(str)                -> OfpLiteral(str, OfpType(REAL(), None()))
  ofp-to-ast:  RealLiteralConstant(str, kind)          -> OfpLiteral(str, OfpType(REAL(), Some(kind)))

//R501
  ofp-to-ast:
    TypeDeclarationStmt(label,type,None(),entities,eos) -> OfpTypeDeclarationStmt(label,type,[],   entities) {Comment(eos)}
  ofp-to-ast:
    TypeDeclarationStmt(label,type,attrs, entities,eos) -> OfpTypeDeclarationStmt(label,type,attrs,entities) {Comment(eos)}

//R502
  ofp-to-ast:  AttrSpec(spec)                           -> spec
  ofp-to-ast:  Some(OptAttrSpecList(None()))            -> []
  ofp-to-ast:  Some(OptAttrSpecList(Some(tuplelist)))   -> <conc>tuplelist
  ofp-to-ast:  AttrSpecList(attributes)                 -> attributes

//R503
  ofp-to-ast:  EntityDecl(name, aspec, cospec, charlen, init) -> OfpEntityDecl(name, aspec, cospec, charlen, init)
  ofp-to-ast:  OptArraySpec(ArraySpec)                        -> ArraySpec
  ofp-to-ast:  EntityDeclList(EntityDecls)                    -> EntityDecls
    
//R508
  ofp-to-ast:  LanguageBindingSpec(opt_name)    -> OfpLanguage(opt_name)

//R515
  ofp-to-ast:  ArraySpec(spec)                  -> spec

//R516
  ofp-to-ast:  ExplicitShapeSpec(upper)         -> OfpDimSpec(None(),upper)
  ofp-to-ast:  ExplicitShapeSpec(lower,upper)   -> OfpDimSpec(Some(lower),upper)
  ofp-to-ast:  ExplicitShapeSpecList(list)      -> OfpExplicitShape(list)

//R517
  ofp-to-ast:  LowerBound(expr)                 -> expr

//R518
  ofp-to-ast:  UpperBound(expr)                 -> expr

//R519
  ofp-to-ast:  AssumedShapeSpec(AssumedOrDeferredShapeSpec()) -> OfpDimSpec(None(),":")
  ofp-to-ast:  AssumedShapeSpec(lower)                        -> OfpDimSpec(Some(lower),":")
  ofp-to-ast:  AssumedShapeSpecList(list)                     -> OfpAssumedOrDeferredShape(list)

//R521
  ofp-to-ast:  AssumedSizeSpec(OfpExplicitShape(list), lower)
                            -> OfpAssumedSize(<concat>[list, [OfpDimSpec(Some(lower),"*")]])
  ofp-to-ast:  AssumedSizeSpec(OfpExplicitShape(list))
                            -> OfpAssumedSize(<concat>[list, [OfpDimSpec(None(),"*")]])

//R522
  ofp-to-ast:  ImpliedShapeSpecList(spec,list)    -> OfpImpliedShape(<concat>[[spec],list])

//R522a
  ofp-to-ast:  AssumedRankSpec()                  -> OfpAssumedRank([OfpDimSpec(None(),Some(".."))])

// assumed-size-spec and implied-shape-spec are ambiguous with only rank 1 array declarations
//    - The following four rules remove the ambiguity by choosing assumed-size over
//      implied-shape arrays. If there is an initializer then likely it really is implied-shape.
//
  ofp-to-ast:  AssumedOrImpliedSpec()
                            -> OfpAssumedSize([OfpDimSpec(None(),"*")])
  ofp-to-ast:  AssumedOrImpliedSpec(lower)
                            -> OfpAssumedSize([OfpDimSpec(Some(lower),"*")])

  rm-assumed-size: OfpAssumedSize([l]) -> l

  ofp-to-ast:  OfpImpliedShape(l1) -> OfpImpliedShape( <map(rm-assumed-size)>l1 )

//R560
  ofp-to-ast:  ImplicitStmt(label,eos)   -> OfpImplicitStmt(label, []) {Comment(eos)}

//R601
  ofp-to-ast:  Designator_AMB(expr)      -> expr

//R602
  ofp-to-ast:  Variable(OfpVarRef(expr)) -> OfpVarDef(expr)

//R611
//TODO OfpArrayRef, make sure multiple partrefs works
  ofp-to-ast:  DataRef([OfpVarRef])                        -> OfpVarRef
  ofp-to-ast:  DataRef(list)                               -> list

//R612
//TODO
  ofp-to-ast:  PartRef(name,None(),None())                 -> OfpVarRef(name)

//  PartName OptSectionSubscriptList? ImageSelector?       -> PartRef   {cons("PartRef")}

//R701
  ofp-to-ast:  Primary_AMB(expr)            -> expr

// Operators...

  ofp-to-ast:  PlusExpr(left,right)         -> OfpPlusExpr(left,right)

//R722
  ofp-to-ast:  Expr(OfpVarRef)              -> OfpVarRef

//R726
  ofp-to-ast:  IntExpr(expr)                -> expr

//R728
  ofp-to-ast:  SpecificationExpr(IntExpr)   -> IntExpr

//R732
  ofp-to-ast:  AssignmentStmt(label,var,expr,eos)           -> OfpAssignmentStmt(label,var,expr)  {Comment(eos)}

//R1101
  ofp-to-ast:
    MainProgram(None(),spec,exec,None(),end)
                  -> OfpMainProgram(None(),OfpScope(spec,exec,OfpFuncPart([]),None(),None(),Some(end)))
  ofp-to-ast:
    MainProgram(Some(begin),spec,exec,None(),end)
                  -> OfpMainProgram(Some(<ofp-extract-name>begin),
                                    OfpScope(spec,exec,OfpFuncPart([]),Some(begin),None(),Some(end)))

  ofp-to-ast:
    MainProgram(None(),spec,exec,Some(InternalSubprogramPart(contains,funcs)),end)
                  -> OfpMainProgram(None(),OfpScope(spec,exec,OfpFuncPart(funcs),None(),Some(contains),Some(end)))
  ofp-to-ast:
    MainProgram(Some(begin),spec,exec,Some(InternalSubprogramPart(contains,funcs)),end)
                  -> OfpMainProgram(Some(<ofp-extract-name>begin),
                                    OfpScope(spec,exec,OfpFuncPart(funcs),Some(begin),Some(contains),Some(end)))

//R1102
  ofp-to-ast:
    ProgramStmt(label,name,eos)    -> OfpProgramStmt(label,name)          {Comment(eos)}

//R1103
  ofp-to-ast:
    EndProgramStmt(label,eos)      -> OfpEndProgramStmt(label,None())     {Comment(eos)}
  ofp-to-ast:
    EndProgramStmt(label,name,eos) -> OfpEndProgramStmt(label,Some(name)) {Comment(eos)}

//R1104
  ofp-to-ast:  Module(begin,spec,None(),end)
                 -> OfpModule(<ofp-extract-name>begin,
                    OfpScope(spec,OfpExecPart([]),OfpFuncPart([]),Some(begin),None(),Some(end)))
  ofp-to-ast:  Module(begin,spec,Some(ModuleSubprogramPart(contains,l)),end)
                 -> OfpModule(<ofp-extract-name>begin,
                    OfpScope(spec,OfpExecPart([]),OfpFuncPart(l),Some(begin),Some(contains),Some(end)))

//R1105
  ofp-to-ast:  ModuleStmt(label,name,eos)    -> OfpModuleStmt(label,name)        {Comment(eos)}

//R1106
  ofp-to-ast:  EndModuleStmt(label,eos)      -> OfpEndModuleStmt(label,None())   {Comment(eos)}
  ofp-to-ast:  EndModuleStmt(label,name,eos) -> OfpEndModuleStmt(label,name)     {Comment(eos)}

//R1201
  ofp-to-ast:  InterfaceBlock(stmt,l,end)    -> OfpInterfaceBlock(stmt,end,l)

//R1202
  ofp-to-ast:  InterfaceSpecification(spec)  -> spec

//R1203
  ofp-to-ast:
    InterfaceStmt(label,spec,eos) -> OfpInterfaceStmt(label,None(), spec)             {Comment(eos)}
  ofp-to-ast:
    InterfaceStmt(label,eos)      -> OfpInterfaceStmt(label,Some("ABSTRACT"),None())  {Comment(eos)}

//R1204
  ofp-to-ast:  EndInterfaceStmt(label,spec,eos) -> OfpEndInterfaceStmt(label,spec)    {Comment(eos)}

//R1205
  ofp-to-ast:  InterfaceBody(begin,spec,end) -> OfpScope(spec,OfpExecPart([]),OfpFuncPart([]),Some(begin),None(),Some(end))

//R1207
  ofp-to-ast:  GenericSpec(OfpName(name))    -> OfpName(name)
//TODO  'OPERATOR'   '(' DefinedOperator ')'          -> GenericSpec           {cons("GenericSpec")}
//TODO  'ASSIGNMENT' '(' '='             ')'          -> GenericSpec           {cons("GenericSpec")}
//TODO  DefinedIoGenericSpec                          -> GenericSpec           {cons("GenericSpec")}


//R1225
  ofp-to-ast:  Prefix(l) -> OfpPrefix(l)

//R1226
  ofp-to-ast:  PrefixSpec(DeclarationTypeSpec) -> DeclarationTypeSpec

//R1227
  ofp-to-ast:  FunctionSubprogram(begin,spec,exec,None(),end)
                   -> OfpFunction(<ofp-extract-name>begin,
                                  OfpScope(spec,exec,OfpFuncPart([]),Some(begin),None(),Some(end)))
  ofp-to-ast:  FunctionSubprogram(begin,spec,exec,func,end)
                   -> OfpFunction(<ofp-extract-name>begin,
                                  OfpScope(spec,exec,func,Some(begin),None(),Some(end)))

//R1228
  ofp-to-ast:  FunctionStmt(label,None(),name,args,None(),eos)
                       -> OfpFunctionStmt(label,name,args,OfpPrefix([]),OfpSuffix([]))             {Comment(eos)}
  ofp-to-ast:  FunctionStmt(label,Some(prefix),name,args,None(),eos)
                       -> OfpFunctionStmt(label,name,args,prefix,OfpSuffix([]))                    {Comment(eos)}
  ofp-to-ast:  FunctionStmt(label,None(),name,args,suffix,eos)
                       -> OfpFunctionStmt(label,name,args,OfpPrefix([]),suffix)                    {Comment(eos)}
  ofp-to-ast:  FunctionStmt(label,Some(prefix),name,args,suffix,eos)
                       -> OfpFunctionStmt(label,name,args,prefix,suffix)                           {Comment(eos)}

  ofp-to-ast:  OptDummyArgNameList(args)        -> OfpArgList(args)

//R1229
  ofp-to-ast:  ProcLanguageBindingSpec(binding) -> binding

//R1231
  ofp-to-ast:  Some(Suffix(a))                  -> OfpSuffix([a])
  ofp-to-ast:  Some(Suffix(a,b))                -> OfpSuffix([a,b])

//R1232
  ofp-to-ast:
    EndFunctionStmt(label,eos)                  -> OfpEndFunctionStmt(label,None())                 {Comment(eos)}
  ofp-to-ast:
    EndFunctionStmt(label,name,eos)             -> OfpEndFunctionStmt(label,name)                   {Comment(eos)}

//R1233
  ofp-to-ast:  SubroutineSubprogram(begin,spec,exec,None(),end)
                   -> OfpSubroutine(<ofp-extract-name>begin,
                                    OfpScope(spec,exec,OfpFuncPart([]),Some(begin),None(),Some(end)))
  ofp-to-ast:  SubroutineSubprogram(begin,spec,exec,func,end)
                   -> OfpSubroutine(<ofp-extract-name>begin,
                                    OfpScope(spec,exec,func,Some(begin),None(),Some(end)))

//R1234 
  ofp-to-ast:  SubroutineStmt(label,None(),name,args,None(),eos)
                       -> OfpSubroutineStmt(label,name,args,OfpPrefix([]),OfpSuffix([]))            {Comment(eos)}
  ofp-to-ast:  SubroutineStmt(label,Some(prefix),name,eos)
                       -> OfpSubroutineStmt(label,name,OfpArgList([]),prefix,OfpSuffix([]))         {Comment(eos)}
  ofp-to-ast:  SubroutineStmt(label,None(),name,eos)
                       -> OfpSubroutineStmt(label,name,OfpArgList([]),OfpPrefix([]),OfpSuffix([]))  {Comment(eos)}
  ofp-to-ast:  SubroutineStmt(label,Some(prefix),name,args,Some(binding),eos)
                       -> OfpSubroutineStmt(label,name,args,prefix,OfpSuffix([binding]))            {Comment(eos)}
  ofp-to-ast:  SubroutineStmt(label,None(),name,args,Some(binding),eos)
                       -> OfpSubroutineStmt(label,name,args,OfpPrefix([]),OfpSuffix([binding]))     {Comment(eos)}
  ofp-to-ast:  SubroutineStmt(label,Some(prefix),name,args,None(),eos)
                       -> OfpSubroutineStmt(label,name,args,prefix,OfpSuffix([]))                   {Comment(eos)}

//R1235
  ofp-to-ast:  DummyArg(arg)              -> arg
  ofp-to-ast:  DummyArg_STAR()            -> STAR()
  ofp-to-ast:  Some(DummyArgList(args))   -> OfpArgList(args)

//R1236
  ofp-to-ast:
    EndSubroutineStmt(label,eos)          -> OfpEndSubroutineStmt(label,None())        {Comment(eos)}
  ofp-to-ast:
    EndSubroutineStmt(label,name,eos)     -> OfpEndSubroutineStmt(label,name)          {Comment(eos)}

//R1242
  ofp-to-ast:
    ContainsStmt(label,eos) -> OfpContainsStmt(label) {Comment(eos)}

