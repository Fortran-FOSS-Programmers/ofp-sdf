      
%%%%%%%%%%
%% This Fortran grammar is structured according to document ISO/IEC 1539:1991. 
%% Rulenumbers are named R2xx - R12xx as in Annex D of 1539:1991
%% The grammar is adapted from an ELI project grammer, http://eli-project.cvs.sourceforge.net/eli-project
%%
%%%%%%%%%%
%% ISO/IEC 1539:1991 section R2xx Fortran terms and concepts
%%%%%%%%%%

module Main

imports FortranLex
imports FortranLexFree

exports

context-free start-symbols 
  Program

sorts

%%%%%%%%%%
%% ISO/IEC 1539:1991 section R2xx Fortran terms and concepts
%%%%%%%%%%

  Program                             %% R201
  ProgramUnit                         %% R202
  ExternalSubprogram                  %% R203
  SpecificationPart                   %% R204
  ImplicitPart                        %% R205
  ImplicitPartStmt                    %% R206
  DeclarationConstruct                %% R207
  ExecutionPart                       %% R208
  ExecutionPartConstruct              %% R209
  InternalSubprogramPart              %% R210
  InternalSubprogram                  %% R211
  OtherSpecificationStmt              %% R212
  ExecutableConstruct                 %% R213
  ActionStmt                          %% R214

  OptImplicitPart OptInternalSubprogramPart

%% 2.5 Fundamental concepts

  Keyword                             %% R215

  NoKeyword

%% 3.2 Low-level syntax

  Constant                            %% R304
  LiteralConstant                     %% R305
  NamedConstant                       %% R306
  IntConstant                         %% R307
  CharConstant                        %% R308
  LblRef                              %% R312

  OptLabel

%% 4.2 Type parameters

  TypeParamValue                      %% R401

%% 4.3 Relationship of types and values to objects

  TypeSpec                            %% R402
  DeclarationTypeSpec                 %% R403

  NoTypeSpec

%% 4.4 Intrinsic types

  IntrinsicTypeSpec                   %% R404
  KindSelector                        %% R405
  SignedIntLiteralConstant            %% R406
  IntLiteralConstant                  %% R407
  KindParam                           %% R408
  SignedDigitString                   %% R409
  DigitString                         %% R410
  Sign                                %% R411
  SignedRealLiteralConstant           %% R412
  RealLiteralConstant                 %% R413
                                      %% R414  Significand    - lex
                                      %% R415  ExponentLetter - lex
                                      %% R416  Exponent       - lex
  ComplexLiteralConstant              %% R417
  RealPart                            %% R418
  ImagPart                            %% R419
  CharSelector                        %% R420
  LengthSelector                      %% R421
  CharLength                          %% R422
  CharLiteralConstant                 %% R423
  LogicalLiteralConstant              %% R424

  NoKindParam OptKindParam OptKindSelector
  NoKindSelector OptCharSelector

%% 4.5 Derived types

  DerivedTypeDef                      %% R425
  DerivedTypeStmt                     %% R426
  TypeAttrSpec                        %% R427
  PrivateOrSequence                   %% R428
  EndTypeStmt                         %% R429
  SequenceStmt                        %% R430
  TypeParamDefStmt                    %% R431
  TypeParamDecl                       %% R432
  TypeParamAttrSpec                   %% R433
  ComponentPart                       %% R434
  ComponentDefStmt                    %% R435
  DataComponentDefStmt                %% R436
  ComponentAttrSpec                   %% R437
  ComponentDecl                       %% R438
  ComponentArraySpec                  %% R439
  ProcComponentDefStmt                %% R440
  ProcComponentAttrSpec               %% R441
  ComponentInitialization             %% R442
  InitialDataTarget                   %% R443
  PrivateComponentsStmt               %% R444
  TypeBoundProcedurePart              %% R445
  BindingPrivateStmt                  %% R446
  TypeBoundProcBinding                %% R447
  TypeBoundProcedureStmt              %% R448
  TypeBoundProcDecl                   %% R449
  TypeBoundGenericStmt                %% R450
  BindingAttr                         %% R451
  FinalProcedureStmt                  %% R452
  DerivedTypeSpec                     %% R453
  TypeParamSpec                       %% R454
  StructureConstructor                %% R455
  ComponentSpec                       %% R456
  ComponentDataSource                 %% R457

  BindingAttrList OptComponentAttrSpecList
  ProcComponentAttrSpecList TypeBoundProcDeclList OptTypeBoundProcedurePart
  TypeParamDeclList TypeParamSpecList

  OptTypeAttrSpecList OptTypeParamNameList

%% 4.6 Enumerations and enumerators

  EnumDef                             %% R458
  EnumDefStmt                         %% R459
  EnumeratorDefStmt                   %% R460
  Enumerator                          %% R461
  EndEnumStmt                         %% R462

  EnumeratorList

%% 4.7 Binary, octal, and hexadecimal literal constants

  BozLiteralConstant                  %% R463
                                      %% R464  BinaryConstant - lex
                                      %% R465  OctalConstant  - lex
                                      %% R466  HexConstant    - lex
                                      %% R467  HexDigit       - lex

%% 4.8 Construction of array values

  ArrayConstructor                    %% R468
  AcSpec                              %% R469
                                      %% R470  Lbracket - lex
                                      %% R471  Lbracket - lex
  AcValue                             %% R472
  AcImpliedDo                         %% R473
  AcImpliedDoControl                  %% R474
  AcDoVariable                        %% R475

  AcValueList BindingNameList FinalSubroutineNameList

%% Identifier aliases

  ArgName BindingName ComponentName
  FinalSubroutineName ImpliedDoVariable
  Name ParentTypeName ProcedureName
  ScalarIntConstantName TypeName OptTypeName TypeParamName

%% 5.2 Type declaration statements

  TypeDeclarationStmt                 %% R501
  AttrSpec                            %% R502
  EntityDecl                          %% R503
                                      %% R504  ObjectName - lex
  Initialization                      %% R505
  NullInit                            %% R506

  NoAttrSpecList OptAttrSpecList OptArraySpec OptCoarraySpec
  OptCharLength OptInitialization

%% 5.3 Attributes

  AccessSpec                          %% R507
  LanguageBindingSpec                 %% R508
  CoarraySpec                         %% R509
  DeferredCoshapeSpec                 %% R510
  ExplicitCoshapeSpec                 %% R511
  LowerCobound                        %% R512
  UpperCobound                        %% R513
  DimensionSpec                       %% R514
  ArraySpec                           %% R515  
  ExplicitShapeSpec                   %% R516
  LowerBound                          %% R517
  UpperBound                          %% R518
  AssumedShapeSpec                    %% R519
%%DeferredShapeSpec                   %% R520  AMBIGUOUS with R519
  AssumedOrDeferredShapeSpec
  AssumedSizeSpec                     %% R521
  AssumedRankSpec                     %% R522a TR 29113
%%ImpliedShapeSpec                    %% R522  AMBIGUOUS with R521
  IntentSpec                          %% R523

  CoboundsEntry
  LanguageBindingName OptLanguageBindingName

  AssumedShapeSpecList AssumedOrDeferredShapeSpecList AssumedOrImpliedSpec
  DeferredCoshapeSpecList ExplicitShapeSpecList ImpliedShapeSpecList

%% 5.4 Attribute specification statements

  AccessStmt                          %% R524
  AccessId                            %% R525
  AllocatableStmt                     %% R526
  AllocatableDecl                     %% R527
  AsynchronousStmt                    %% R528
  BindStmt                            %% R529
  BindEntity                          %% R530
  CodimensionStmt                     %% R531
  CodimensionDecl                     %% R532
  ContiguousStmt                      %% R533
  DataStmt                            %% R534
  DataStmtSet                         %% R535
  DataStmtObject                      %% R536
  DataImpliedDo                       %% R537
  DataIDoObject                       %% R538
  DataIDoVariable                     %% R539
  DataStmtValue                       %% R540
  DataStmtRepeat                      %% R541
  DataStmtConstant                    %% R542
  IntConstantSubobject                %% R543
  ConstantSubobject                   %% R544
  DimensionStmt                       %% R545
  IntentStmt                          %% R546
  OptionalStmt                        %% R547
  ParameterStmt                       %% R548
  NamedConstantDef                    %% R549
  PointerStmt                         %% R550
  PointerDecl                         %% R551
  ProtectedStmt                       %% R552
  SaveStmt                            %% R553
  SavedEntity                         %% R554
  ProcPointerName                     %% R555
  TargetStmt                          %% R556
  TargetDecl                          %% R557
  ValueStmt                           %% R558
  VolatileStmt                        %% R559

  ArrayNameSpec ArrayNameSpecList

  AccessIdList AllocatableDeclList BindEntityList CodimensionDeclList
  DataIDoObjectList DataStmtObjectList DataStmtSetList DataStmtValueList
  DummyArgNameList NamedConstantDefList PointerDeclList SavedEntityList TargetDeclList

%% 5.5 Implicit statement

  ImplicitStmt                        %% R560
  ImplicitSpec                        %% R561
  LetterSpec                          %% R562

  OptLetter2

%% 5.6 Namelist statement

  NamelistStmt                        %% R563
  NamelistGroupObject                 %% R564

  NamelistGroupObjectList NamelistEntry NamelistEntryList

%% 5.7 Storage association of data objects

  EquivalenceStmt                     %% R565
  EquivalenceSet                      %% R566
  EquivalenceObject                   %% R567
  CommonStmt                          %% R568
  CommonBlockObject                   %% R569

  CommonBlockObjectList EntityNameList
  EquivalenceObjectList EquivalenceSetList ObjectNameList

  CommonBlockEntry1 CommonBlockEntry

%% Identifier aliases

  ArrayName CoarrayName CommonBlockName
  EntityName NamelistGroupName ObjectName
  ProcEntityName


%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R6xx Use of Data Objects
%%%%%%%%%%

%% 6.1 Designator

  Designator                          %% R601

%% 6.2 Variable

  Variable                            %% R602
  VariableName                        %% R603
  LogicalVariable                     %% R604
  CharVariable                        %% R605
  DefaultCharVariable                 %% R606
  IntVariable                         %% R607
  
%% 6.4 Scalars

  Substring                           %% R608
  ParentString                        %% R609
  SubstringRange                      %% R610

  DataRef                             %% R611
  PartRef                             %% R612
  StructureComponent                  %% R613
  CoindexedNamedObject                %% R614
  ComplexPartDesignator               %% R615
  TypeParamInquiry                    %% R616

%% 6.5 Arrays

  ArrayElement                        %% R617
  ArraySection                        %% R618
  Subscript                           %% R619
  SectionSubscript                    %% R620
  SubscriptTriplet                    %% R621
  Stride                              %% R622
  VectorSubscript                     %% R623

  OptSectionSubscripts OptStride OptSubscript

%% 6.6 Image selectors

  ImageSelector                       %% R624
  Cosubscript                         %% R625

  OptImageSelector

%% 6.7 Dynamic association

  AllocateStmt                        %% R626
  AllocOpt                            %% R627
  StatVariable                        %% R628
  ErrmsgVariable                      %% R629
                                      %% R630  SourceExpr
  Allocation                          %% R631
  AllocateObject                      %% R632
  AllocateShapeSpec                   %% R633
  LowerBoundExpr                      %% R634
  UpperBoundExpr                      %% R635
  AllocateCoarraySpec                 %% R636
  AllocateCoshapeSpec                 %% R637
  NullifyStmt                         %% R638
  PointerObject                       %% R639
  DeallocateStmt                      %% R640
  DeallocOpt                          %% R641

  NoAllocateCoshapeSpecList NoAllocateCoarraySpec
  NoAllocateShapeSpecList
  OptAllocOptList DeallocOptList OptDeallocOptList
  NoLowerBoundExpr

%% Identifier aliases

  PartName ScalarVariableName

%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R7xx Expressions and Assignments
%%%%%%%%%%

  IntrinsicOperator                   %% R309
  DefinedOperator                     %% R310
  ExtendedIntrinsicOp                 %% R311

  Primary                             %% R701

  Level1Expr                          %% R702
  DefinedUnaryOp                      %% R703
  MultOperand                         %% R704
  AddOperand                          %% R705
  Level2Expr                          %% R706
  PowerOp                             %% R707
  MultOp                              %% R708
  AddOp                               %% R709
  Level3Expr                          %% R710
  ConcatOp                            %% R711
  Level4Expr                          %% R712
  RelOp                               %% R713
  AndOperand                          %% R714
  OrOperand                           %% R715
  EquivOperand                        %% R716
  Level5Expr                          %% R717
  NotOp                               %% R718
  AndOp                               %% R719
  OrOp                                %% R720
  EquivOp                             %% R721

  Expr                                %% R722
  DefinedBinaryOp                     %% R723
  LogicalExpr                         %% R724
  DefaultCharExpr                     %% R725
  IntExpr                             %% R726
  NumericExpr                         %% R727
  SpecificationExpr                   %% R728
  ConstantExpr                        %% R729
  DefaultCharConstantExpr             %% R730
  IntConstantExpr                     %% R731
  AssignmentStmt                      %% R732
  PointerAssignmentStmt               %% R733
  DataPointerObject                   %% R734
  BoundsSpec                          %% R735
  BoundsRemapping                     %% R736
  DataTarget                          %% R737
  ProcPointerObject                   %% R738
  ProcComponentRef                    %% R739
  ProcTarget                          %% R740
  WhereStmt                           %% R741
  WhereConstruct                      %% R742
  WhereConstructStmt                  %% R743
  WhereBodyConstruct                  %% R744
  WhereAssignmentStmt                 %% R745
  MaskExpr                            %% R746
  MaskedElsewhereStmt                 %% R747
  ElsewhereStmt                       %% R748
  EndWhereStmt                        %% R749
  ForallConstruct                     %% R750
  ForallConstructStmt                 %% R751
  ForallHeader                        %% R752
  ForallTripletSpec                   %% R753
  ForallLimit                         %% R754
  ForallStep                          %% R755
  ForallBodyConstruct                 %% R756
  ForallAssignmentStmt                %% R757
  EndForallStmt                       %% R758
  ForallStmt                          %% R759

  ElsewhereClause MaskedElsewhereClause OptExpr

  BoundsRemappingList BoundsSpecList ForallTripletSpecList

%% Identifier aliases

  DataPointerComponentName ForallConstructName IndexName
  ProcedureComponentName

      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R8xx Execution Control
%%%%%%%%%%

%% 8.1 Executable constructs containing blocks

  Block                               %% R801
  AssociateConstruct                  %% R802
  AssociateStmt                       %% R803
  Association                         %% R804
  Selector                            %% R805
  EndAssociateStmt                    %% R806
  BlockConstruct                      %% R807
  BlockStmt                           %% R808
  EndBlockStmt                        %% R809
  CriticalConstruct                   %% R810
  CriticalStmt                        %% R811
  EndCriticalStmt                     %% R812
                                      %% R813  DoConstruct      - ambiguous removed
                                      %% R814  BlockDoConstruct - ambiguous removed
                                      %% R815  DoStmt           - ambiguous removed
  LabelDoStmt                         %% R816
  NonlabelDoStmt                      %% R817
  LoopControl                         %% R818
  DoVariable                          %% R819
                                      %% R820  DoBlock             - ambiguous removed
                                      %% R821  EndDo               - ambiguous removed
  EndDoStmt                           %% R822
                                      %% R823  NonblockDoConstruct - ambiguous removed
                                      %% R824  ActionTermDoConstruct - ambiguous removed
                                      %% R825  DoBody                - ambiguous removed
                                      %% R826  DoTermActionStmt      - ambiguous removed
                                      %% R827  OuterSharedDoConstruct - ambiguous removed
                                      %% R828  SharedTermDoConstruct  - ambiguous removed
                                      %% R829  InnerSharedDoConstruct - ambiguous removed
                                      %% R830  DoTermSharedStmt       - ambiguous removed
  CycleStmt                           %% R831
  IfConstruct                         %% R832
  IfThenStmt                          %% R833
  ElseIfStmt                          %% R834
  ElseStmt                            %% R835
  EndIfStmt                           %% R836
  IfStmt                              %% R837
  CaseConstruct                       %% R838
  SelectCaseStmt                      %% R839
  CaseStmt                            %% R840
  EndSelectStmt                       %% R841
  CaseExpr                            %% R842
  CaseSelector                        %% R843
  CaseValueRange                      %% R844
  CaseValue                           %% R845
  SelectTypeConstruct                 %% R846
  SelectTypeStmt                      %% R847
  TypeGuardStmt                       %% R848
  EndSelectTypeStmt                   %% R849
  ExitStmt                            %% R850

  CaseStmtAndBlock ElseIfStmtAndBlock ElseStmtAndBlock TypeGuardStmtAndBlock

  AssociationList CaseValueRangeList

%% 8.2 Branching

  GotoStmt                            %% R851
  ComputedGotoStmt                    %% R852
  ArithmeticIfStmt                    %% R853

%% 8.3 Continue statement

  ContinueStmt                        %% R854

%% 8.4 Stop and Error Stop statements

  StopStmt                            %% R855
  ErrorStopStmt                       %% R856
  StopCode                            %% R857

  OptStopCode

%% 8.5 Image execution control

  SyncAllStmt                         %% R858
  SyncStat                            %% R859
  SyncImagesStmt                      %% R860
  ImageSet                            %% R861
  SyncMemoryStmt                      %% R862
  LockStmt                            %% R863
  LockStat                            %% R864
  UnlockStmt                          %% R865
  LockVariable                        %% R866

  OptLockStatList NoSyncStatList OptSyncStatList

%% Deleted features

  PauseStmt

%% Identifier aliases

  AssociateConstructName AssociateName BlockConstructName
  CaseConstructName ConstructName CriticalConstructName
  DoConstructName IfConstructName ScalarIntVariableName
  SelectConstructName

      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R9xx Input/Output Statements
%%%%%%%%%%

%% 9.5 File connection

  IoUnit                              %% R901
  FileUnitNumber                      %% R902
  InternalFileVariable                %% R903    NOTE: unused
  OpenStmt                            %% R904
  ConnectSpec                         %% R905
  FileNameExpr                        %% R906
  IomsgVariable                       %% R907
  CloseStmt                           %% R908
  CloseSpec                           %% R909

  CloseSpecList

%% 9.6 Data transfer statements

  ReadStmt                            %% R910
  WriteStmt                           %% R911
  PrintStmt                           %% R912
  IoControlSpec                       %% R913
  IdVariable                          %% R914
  Format                              %% R915
  InputItem                           %% R916
  OutputItem                          %% R917
  IoImpliedDo                         %% R918
  IoImpliedDoObject                   %% R919
  IoImpliedDoControl                  %% R920

  InputItemList IoControlSpecList
  IoImpliedDoObjectList OutputItemList

%% 9.7 Waiting on pending data transfer

  WaitStmt                            %% R922
  WaitSpec                            %% R923

%% 9.8 File positioning statements

  BackspaceStmt                        %% R924
  EndfileStmt                          %% R925
  RewindStmt                           %% R926
  PositionSpec                         %% R927

%% 9.9 FLUSH statement

  FlushStmt                           %% R928
  FlushSpec                           %% R929
  FlushSpecList

%% 9.10 File inquiry statement

  InquireStmt                         %% R930
  InquireSpec                         %% R931
  InquireSpecList

      
%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R10xx Input/Output Editing
%%%%%%%%%

%% 10.2 Explicit format specification methods

  FormatStmt                          %% R1001
  FormatSpecification                 %% R1002

%% 10.3 Form of a format item list

  FormatItems                         %% R1003
  FormatItem                          %% R1004
  UnlimitedFormatItem                 %% R1005
  REditDesc                           %% R1006
  DataEditDesc                        %% R1007
  WEditDesc                           %% R1008
  MEditDesc                           %% R1009
  DEditDesc                           %% R1010
  EEditDesc                           %% R1011
  VEditDesc                           %% R1012
  ControlEditDesc                     %% R1013
  KEditDesc                           %% R1014
  PositionEditDesc                    %% R1015
  NEditDesc                           %% R1016
  SignEditDesc                        %% R1017
  BlankInterpEditDesc                 %% R1018
  RoundEditDesc                       %% R1019
  DecimalEditDesc                     %% R1020
  CharStringEditDesc                  %% R1021

  VEditDescList

  MainProgram                         %% R1101
  ProgramStmt                         %% R1102
  EndProgramStmt                      %% R1103

  Module                              %% R1104
  ModuleStmt                          %% R1105
  EndModuleStmt                       %% R1106
  ModuleSubprogramPart                %% R1107
  ModuleSubprogram                    %% R1108
  UseStmt                             %% R1109
  ModuleNature                        %% R1110
  Rename                              %% R1111
  Only                                %% R1112
  OnlyUseName                         %% R1113
  LocalDefinedOperator                %% R1114
  UseDefinedOperator                  %% R1115
  Submodule                           %% R1116
  SubmoduleStmt                       %% R1117
  ParentIdentifier                    %% R1118
  EndSubmoduleStmt                    %% R1119
  BlockData                           %% R1120
  BlockDataStmt                       %% R1121
  EndBlockDataStmt                    %% R1122

  OptModuleSubprogramPart ProgramName NoProgramName OptProgramName
  OptProgramStmt OptOnlyList OptModuleNature NoModuleNature
  NoRenameList OptRenameList

%% Identifier aliases

  AncestorModuleName BlockDataName NoBlockDataName OptBlockDataName
  LocalName ModuleName NoModuleName OptModuleName
  ParentSubmoduleName SubmoduleName UseName

%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section 12xx Procedures section
%%%%%%%%%%

  InterfaceBlock                      %% R1201
  InterfaceSpecification              %% R1202
  InterfaceStmt                       %% R1203
  EndInterfaceStmt                    %% R1204
  InterfaceBody                       %% R1205
  ProcedureStmt                       %% R1206
  GenericSpec                         %% R1207
  DefinedIoGenericSpec                %% R1208
  ImportStmt                          %% R1209
  ExternalStmt                        %% R1210
  ProcedureDeclarationStmt            %% R1211
  ProcInterface                       %% R1212
  ProcAttrSpec                        %% R1213
  ProcDecl                            %% R1214
  InterfaceName                       %% R1215
  ProcPointerInit                     %% R1216
  InitialProcTarget                   %% R1217
  IntrinsicStmt                       %% R1218
  FunctionReference                   %% R1219
  CallStmt                            %% R1220
  ProcedureDesignator                 %% R1221
  ActualArgSpec                       %% R1222
  ActualArg                           %% R1223
  AltReturnSpec                       %% R1224
  Prefix                              %% R1225
  PrefixSpec                          %% R1226
  FunctionSubprogram                  %% R1227
  FunctionStmt                        %% R1228
  ProcLanguageBindingSpec             %% R1229
  DummyArgName                        %% R1230
  Suffix                              %% R1231
  EndFunctionStmt                     %% R1232
  SubroutineSubprogram                %% R1233
  SubroutineStmt                      %% R1234
  DummyArg                            %% R1235
  EndSubroutineStmt                   %% R1236
  SeparateModuleSubprogram            %% R1237
  MpSubprogramStmt                    %% R1238
  EndMpSubprogramStmt                 %% R1239
  EntryStmt                           %% R1240
  ReturnStmt                          %% R1241
  ContainsStmt                        %% R1242
  StmtFunctionStmt                    %% R1243

  NoActualArgSpecList DummyArgList NoDummyArgList OptDummyArgList
  OptGenericSpec  OptPrefix
  NoProcLanguageBindingSpec OptProcLanguageBindingSpec
  NoProcAttrSpecList OptProcAttrSpecList OptProcInterface NoProcPointerInit
  NoProcedureName NoSuffix OptSuffix
  OptStartCommentBlock

%% Identifier aliases

  EntryName ExternalName FunctionName NoFunctionName OptFunctionName
  GenericName ImportName IntrinsicProcedureName
  ProcedureEntityName ResultName NoResultName
  SubroutineName NoSubroutineName OptSubroutineName

context-free syntax

%% Identifier aliases
%%

  Ident   -> ArgName                   {cons("ArgName")}
  Ident   -> BindingName               {cons("BindingName")}
  Ident   -> FinalSubroutineName       {cons("FinalSubroutineName")}
  Ident   -> ImpliedDoVariable         {cons("ImpliedDoVariable")}
  Ident   -> Name
  Ident   -> ParentTypeName            {cons("ParentTypeName")}
  Ident   -> ScalarIntConstantName     {cons("ScalarIntConstantName")}
  Ident   -> TypeParamName             {cons("TypeParamName")}

%%R305
%%TODO-DELETE   NamedConstantUse                      -> Constant
%%TODO-DELETE   UnsignedArithmeticConstant            -> Constant
%%TODO-DELETE   '+' UnsignedArithmeticConstant        -> Constant
%%TODO-DELETE   '-' UnsignedArithmeticConstant        -> Constant
%%TODO-DELETE   Scon                                  -> Constant
%%TODO-DELETE   Hcon                                  -> Constant
%%TODO-DELETE   LogicalConstant                       -> Constant
%%TODO-DELETE   Icon '_' Scon                         -> Constant
%%TODO-DELETE   NamedConstantUse '_' Scon             -> Constant


%% 3.2 Low-level syntax
%%

%%R304
  LiteralConstant                       -> Constant
  NamedConstant                         -> Constant  {reject}  %% AMBIGUOUS - can't tell name is constant

%%R305
  IntLiteralConstant                    -> LiteralConstant
  RealLiteralConstant                   -> LiteralConstant
  ComplexLiteralConstant                -> LiteralConstant
  LogicalLiteralConstant                -> LiteralConstant
  CharLiteralConstant                   -> LiteralConstant
  BozLiteralConstant                    -> LiteralConstant

%%R306
  Name                                  -> NamedConstant

%%TODO-AMBIGUOUS
%%TODO-F08 the following rules look way ambiguous

%%R307
  Constant                              -> IntConstant      {cons("IntConstant")}

%%R308
  Constant                              -> CharConstant     {cons("CharConstant")}

%%R312
  LblDef                                -> Label            %%TODO-DELETE
  LblDef                                -> OptLabel
  % empty %                             -> OptLabel         {cons("no-label")}

%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 4xx DataTypes
%%%%%%%%%%

%% 4.2 Type parameters
%%

%%R401
%%       expr substituted for scalar-int-expr
%%
  Expr                                  -> TypeParamValue       {cons("TypeParamValue_E")}
  '*'                                   -> TypeParamValue       {cons("TypeParamValue_STAR")}
  ':'                                   -> TypeParamValue       {cons("TypeParamValue_COLON")}


%% 4.3 Relationship of types and values to objects
%%

%%R402
  IntrinsicTypeSpec                       -> TypeSpec
  DerivedTypeSpec                         -> TypeSpec

%%R403
  IntrinsicTypeSpec                       -> DeclarationTypeSpec  {cons("intrinsic-type-spec")}
  'TYPE'  '(' IntrinsicTypeSpec ')'       -> DeclarationTypeSpec  {cons("intrinsic-type-spec")}
  'TYPE'  '(' DerivedTypeSpec   ')'       -> DeclarationTypeSpec  {cons("DerivedType")}
  'CLASS' '(' DerivedTypeSpec   ')'       -> DeclarationTypeSpec  {cons("Class")}
  'CLASS' '(' '*'               ')'       -> DeclarationTypeSpec  {cons("AssumedClass")}
%%TR29113
  'TYPE'  '(' '*'               ')'       -> DeclarationTypeSpec  {cons("AssumedType")}


%% 4.4 Intrinsic types
%%

%%R404
  'INTEGER'            OptKindSelector  -> IntrinsicTypeSpec    {cons("INTEGER")}
  'REAL'               OptKindSelector  -> IntrinsicTypeSpec    {cons("REAL")}
  'DOUBLE' 'PRECISION'  NoKindSelector  -> IntrinsicTypeSpec    {cons("DOUBLEPRECISION")}
  'COMPLEX'            OptKindSelector  -> IntrinsicTypeSpec    {cons("COMPLEX")}
  'CHARACTER'          OptCharSelector  -> IntrinsicTypeSpec    {cons("CHARACTER")}
  'LOGICAL'            OptKindSelector  -> IntrinsicTypeSpec    {cons("LOGICAL")}
  'DOUBLE' 'COMPLEX'    NoKindSelector  -> IntrinsicTypeSpec    {cons("DOUBLECOMPLEX")}

%%R405
%%       expr substituted for scalar-int-constant-expr
%%       NONSTANDARD: e.g., integer*8 complex*8 complex*16
%%
  '(' 'KIND' '=' Expr ')'               -> KindSelector  {cons("KindSelector")}
  '('            Expr ')'               -> KindSelector  {cons("KindSelector")}
  '*' Icon                              -> KindSelector  {cons("KindSelector_STAR")}

  KindSelector                          -> OptKindSelector
  % empty %                             -> OptKindSelector  {cons("no-kind")}
  % empty %                             -> NoKindSelector   {cons("no-kind")}

%%406
  Sign? IntLiteralConstant              -> SignedIntLiteralConstant  {cons("SignedIntLiteralConstant")}

%%R407
  DigitString   NoKindParam             -> IntLiteralConstant  {cons("IntLiteralConstant")}
  DigitString '_' KindParam             -> IntLiteralConstant  {cons("IntLiteralConstant")}

  % empty %                             -> NoKindParam         {cons("no-kind-param")}

%%R408
  DigitString                           -> KindParam          {cons("KindParam_DS")}
  ScalarIntConstantName                 -> KindParam          {cons("KindParam_SICN")}

%%R409
  Sign? DigitString                     -> SignedDigitString  {cons("SignedDigitString")}

%%R410
  Icon                                  -> DigitString

%%R411
  '+'                                   -> Sign               {cons("Sign_PLUS")}
  '-'                                   -> Sign               {cons("Sign_MINUS")}

%%R412
  Sign? RealLiteralConstant             -> SignedRealLiteralConstant  {cons("SignedRealLiteralConstant")}

%%R413
  Rcon   NoKindParam                    -> RealLiteralConstant        {cons("RealLiteralConstant")}
  Rcon '_' KindParam                    -> RealLiteralConstant        {cons("RealLiteralConstant")}

%%R414 significand     - lex

%%R415 exponent-letter - lex

%%R416 exponent        - lex

%%R417
  '(' RealPart ',' ImagPart ')'         -> ComplexLiteralConstant  {cons("ComplexLiteralConstant")}

%%418
  SignedIntLiteralConstant              -> RealPart                {cons("RealPart_SILC")}
  SignedRealLiteralConstant             -> RealPart                {cons("RealPart_SRLC")}
  NamedConstant                         -> RealPart                {cons("RealPart_NC")}

%%419
  SignedIntLiteralConstant              -> ImagPart                {cons("ImagPart_SILC")}
  SignedRealLiteralConstant             -> ImagPart                {cons("ImagPart_SRLC")}
  NamedConstant                         -> ImagPart                {cons("ImagPart_NC")}

%%R420
%%       expr substituted for scalar-int-constant-expr
%%
  LengthSelector                                               -> CharSelector    {cons("CharSelector_LS")}
  '(' 'LEN'  '=' TypeParamValue ',' 'KIND'  '=' Expr ')'       -> CharSelector    {cons("CharSelector_LEN_KIND")}
  '('            TypeParamValue ',' 'KIND'  '=' Expr ')'       -> CharSelector    {cons("CharSelector_LEN_KIND")}
  '('            TypeParamValue ','             Expr ')'       -> CharSelector    {cons("CharSelector_LEN_KIND")}
  '(' 'KIND' '=' Expr ',' 'LEN' '=' TypeParamValue   ')'       -> CharSelector    {cons("CharSelector_KIND_LEN")}
  '(' 'KIND' '=' Expr                                ')'       -> CharSelector    {cons("CharSelector_KIND")}

  CharSelector                                                 -> OptCharSelector
  % empty %                                                    -> OptCharSelector {cons("no-char-selector")}

%%R421
  '(' 'LEN' '=' TypeParamValue ')'                             -> LengthSelector  {cons("LengthSelector_LEN")}
  '('           TypeParamValue ')'                             -> LengthSelector  {cons("LengthSelector_LEN")}
  '*' CharLength ','                                           -> LengthSelector  {cons("LengthSelector_STAR")}
  '*' CharLength                                               -> LengthSelector  {cons("LengthSelector_STAR")}

%%R422
  '(' TypeParamValue ')'                                       -> CharLength      {cons("CharLength_TPV")}
  Icon                                                         -> CharLength      {cons("CharLength_I")}

%%R423
  KindParam '_' Scon                    -> CharLiteralConstant     {cons("CharLiteralConstant")}
  NoKindParam   Scon                    -> CharLiteralConstant     {cons("CharLiteralConstant")}

%%R424
  '.TRUE.'  OptKindParam                -> LogicalLiteralConstant  {cons("LogicalLiteralConstant_TRUE")}
  '.FALSE.' OptKindParam                -> LogicalLiteralConstant  {cons("LogicalLiteralConstant_FALSE")}

  '_' KindParam                         -> OptKindParam            {cons("opt-kind-param")}
  % empty %                             -> OptKindParam            {cons("no-kind-param")}

%% 4.5 Derived types
%%

%%R425
  DerivedTypeStmt
    TypeParamDefStmt*
    PrivateOrSequence*
    ComponentPart                                                  %% a list so no need for optional
    OptTypeBoundProcedurePart
  EndTypeStmt                           -> DerivedTypeDef          {cons("DerivedTypeDef")}

%%R426
  OptLabel 'TYPE'  OptTypeAttrSpecList
         TypeName  OptTypeParamNameList          EOS -> DerivedTypeStmt      {cons("DerivedTypeStmt")}

  ',' {TypeAttrSpec ','}+ '::'                       -> OptTypeAttrSpecList  {cons("opt-list")}
  % empty %                                          -> OptTypeAttrSpecList  {cons("no-list")}

  '(' {TypeParamName ','}+ ')'                       -> OptTypeParamNameList {cons("opt-list")}
  % empty %                                          -> OptTypeParamNameList {cons("no-list")}

  'INTEGER'                                                    -> TypeName  {reject}
  'REAL'                                                       -> TypeName  {reject}
  'DOUBLEPRECISION'                                            -> TypeName  {reject}
  'COMPLEX'                                                    -> TypeName  {reject}
  'CHARACTER'                                                  -> TypeName  {reject}
  'LOGICAL'                                                    -> TypeName  {reject}
  'DOUBLECOMPLEX'                                              -> TypeName  {reject}

  Ident                                                        -> TypeName
  TypeName                                                     -> OptTypeName
  % empty %                                                    -> OptTypeName      {cons("no-type-name")}

%%R427
  'ABSTRACT'                                                   -> TypeAttrSpec     {cons("TypeAttrSpec_ABSTRACT")}
   AccessSpec                                                  -> TypeAttrSpec     {cons("TypeAttrSpec_AS")}
  'BIND'     '(' 'C'            ')'                            -> TypeAttrSpec     {cons("TypeAttrSpec_BIND")}
  'EXTENDS'  '(' ParentTypeName ')'                            -> TypeAttrSpec     {cons("TypeAttrSpec_EXTENDS")}

%%R428
  PrivateComponentsStmt                                        -> PrivateOrSequence
  SequenceStmt                                                 -> PrivateOrSequence

%%R429
  OptLabel 'END' 'TYPE' OptTypeName                        EOS -> EndTypeStmt      {cons("EndTypeStmt")}

%%R430
  OptLabel 'SEQUENCE'                                      EOS -> SequenceStmt     {cons("SequenceStmt")}

%%R431
  Label? 'INTEGER' OptKindSelector ','   TypeParamAttrSpec
                                   '::'  TypeParamDeclList EOS -> TypeParamDefStmt {cons("TypeParamDefStmt")}

%%R432
%%        expr substituted for scalar-int-constant-expr
%%
  TypeParamName ( '=' Expr )?                                  -> TypeParamDecl    {cons("TypeParamDecl")}
  {TypeParamDecl ','}+                                         -> TypeParamDeclList{cons("TypeParamDeclList")}

%%R433
  'KIND'                                    -> TypeParamAttrSpec  {cons("TypeParamAttrSpec_KIND")}
  'LEN'                                     -> TypeParamAttrSpec  {cons("TypeParamAttrSpec_LEN")}

%%R434
  ComponentDefStmt*                         -> ComponentPart

%%R435
  DataComponentDefStmt                      -> ComponentDefStmt
  ProcComponentDefStmt                      -> ComponentDefStmt

%%R436
  OptLabel DeclarationTypeSpec
           OptComponentAttrSpecList
             {ComponentDecl ','}+      EOS  -> DataComponentDefStmt     {cons("DataComponentDefStmt")}

  ',' {ComponentAttrSpec ','}+ '::'         -> OptComponentAttrSpecList {cons("opt-list")}
                               '::'         -> OptComponentAttrSpecList {cons("no-list")}
  % empty %                                 -> OptComponentAttrSpecList {cons("no-list")}


%%R437
  AccessSpec                                -> ComponentAttrSpec     {cons("ComponentAttrSpec_AS")}
  'ALLOCATABLE'                             -> ComponentAttrSpec     {cons("ComponentAttrSpec_ALLOCATABLE")}
  'CODIMENSION' '[' CoarraySpec ']'         -> ComponentAttrSpec     {cons("ComponentAttrSpec_CODIMENSION")}
  'CONTIGUOUS'                              -> ComponentAttrSpec     {cons("ComponentAttrSpec_CONTIGUOUS")}
  'DIMENSION' '(' ComponentArraySpec ')'    -> ComponentAttrSpec     {cons("ComponentAttrSpec_DIMENSION")}
  'POINTER'                                 -> ComponentAttrSpec     {cons("ComponentAttrSpec_POINTER")}

%%R438
  ComponentName ( '(' ComponentArraySpec ')' )?
                ( '[' CoarraySpec        ']' )?
                ( '*' CharLength )? ComponentInitialization?  -> ComponentDecl     {cons("ComponentDecl")}

  Ident                                       -> ComponentName

%%R439
  ExplicitShapeSpecList                       -> ComponentArraySpec        {cons("ComponentArraySpec")}
  AssumedOrDeferredShapeSpecList              -> ComponentArraySpec        {cons("ComponentArraySpec")}

%%R440
  Label? 'PROCEDURE'
           '('  ProcInterface? ')' ','
                ProcComponentAttrSpecList
          '::' {ProcDecl ','}+           EOS  -> ProcComponentDefStmt      {cons("ProcComponentDefStmt")}

%%R441
  'POINTER'                                   -> ProcComponentAttrSpec     {cons("ProcComponentAttrSpec_POINTER")}
  'PASS'                                      -> ProcComponentAttrSpec     {cons("ProcComponentAttrSpec_PASS")}
  'NOPASS'                                    -> ProcComponentAttrSpec     {cons("ProcComponentAttrSpec_NOPASS")}
  AccessSpec                                  -> ProcComponentAttrSpec     {cons("ProcComponentAttrSpec_AS")}
  {ProcComponentAttrSpec ','}+                -> ProcComponentAttrSpecList {cons("ProcComponentAttrSpecList")}

%%R442
  '=' Expr                                    -> ComponentInitialization   {cons("ComponentInitialization_E")}
  '=>' NullInit                               -> ComponentInitialization   {cons("ComponentInitialization_NI")}
  '=>' InitialDataTarget                      -> ComponentInitialization   {cons("ComponentInitialization_IDT")}

%%R443
%%ABIGUITY Replace designator by variable?
  Designator                                  -> InitialDataTarget      {cons("InitialDataTarget")}

%%R444
  OptLabel 'PRIVATE'                      EOS -> PrivateComponentsStmt  {cons("PrivateComponentsStmt")}

%%R445
  ContainsStmt
    BindingPrivateStmt?
    TypeBoundProcBinding*                     -> TypeBoundProcedurePart      {cons("TypeBoundProcedurePart")}

  TypeBoundProcedurePart                      -> OptTypeBoundProcedurePart
  % empty %                                   -> OptTypeBoundProcedurePart   {cons("no-type-bound-procedure-part")}

%%R446
  OptLabel 'PRIVATE'                      EOS -> BindingPrivateStmt          {cons("BindingPrivateStmt")}

%%R447
  TypeBoundProcedureStmt                      -> TypeBoundProcBinding
  TypeBoundGenericStmt                        -> TypeBoundProcBinding
  FinalProcedureStmt                          -> TypeBoundProcBinding

%%R448
  Label? 'PROCEDURE' TypeBoundProcDeclList     EOS -> TypeBoundProcedureStmt  {cons("TypeBoundProcedureStmt_1")}
  Label? 'PROCEDURE'
               ( ',' BindingAttrList )? '::'
                     TypeBoundProcDeclList     EOS -> TypeBoundProcedureStmt  {cons("TypeBoundProcedureStmt_2")}
  Label? 'PROCEDURE'
              '(' InterfaceName ')'
                 ',' BindingAttrList    '::'
                     BindingNameList           EOS -> TypeBoundProcedureStmt  {cons("TypeBoundProcedureStmt_3")}

  {BindingAttr ','}+                               -> BindingAttrList         {cons("BindingAttrList")}
  {BindingName ','}+                               -> BindingNameList         {cons("BindingNameList")}

%%R449
  BindingName ( '=>' ProcedureName )?              -> TypeBoundProcDecl       {cons("TypeBoundProcDecl")}
  {TypeBoundProcDecl ','}+                         -> TypeBoundProcDeclList   {cons("TypeBoundProcDeclList")}

%%R450
  Label? 'GENERIC' ( ',' AccessSpec )?
     '::' GenericSpec '=>' BindingNameList     EOS -> TypeBoundGenericStmt    {cons("TypeBoundGenericStmt")}

%%451
  'PASS' ('(' ArgName ')')?                        -> BindingAttr             {cons("BindingAttr_PASS")}
  'NOPASS'                                         -> BindingAttr             {cons("BindingAttr_NOPASS")}
  'NON_OVERRIDABLE'                                -> BindingAttr             {cons("BindingAttr_NON_OVERRIDABLE")}
  'DEFERRED'                                       -> BindingAttr             {cons("BindingAttr_DEFERRED")}
  AccessSpec                                       -> BindingAttr             {cons("BindingAttr_AS")}

%%452
  Label? 'FINAL' '::' FinalSubroutineNameList  EOS -> FinalProcedureStmt      {cons("FinalProcedureStmt")}
  Label? 'FINAL'      FinalSubroutineNameList  EOS -> FinalProcedureStmt      {cons("FinalProcedureStmt")}
  {FinalSubroutineName ','}+                       -> FinalSubroutineNameList {cons("FinalSubroutineNameList")}

%%R453
  TypeName ( '(' TypeParamSpecList ')' )?          -> DerivedTypeSpec         {cons("DerivedTypeSpec")}

%%R454
  ( Keyword '=' )? TypeParamValue                  -> TypeParamSpec           {cons("TypeParamSpec")}
 {TypeParamSpec ','}+                              -> TypeParamSpecList       {cons("TypeParamSpecList")}

%%R455
  DerivedTypeSpec '(' {ComponentSpec ','}* ')'     -> StructureConstructor    {cons("StructureConstructor")}

%%R456
  ( Keyword '=' )? ComponentDataSource             -> ComponentSpec           {cons("ComponentSpec")}

%%R457
  Expr                                             -> ComponentDataSource
  DataTarget                                       -> ComponentDataSource     {reject}
  ProcTarget                                       -> ComponentDataSource     {reject}


%% 4.6 Enumerations and enumerators
%%

%%R458
  EnumDefStmt
    EnumeratorDefStmt+
  EndEnumStmt                                      -> EnumDef                 {cons("EnumDef")}

%%R459
  Label? 'ENUM' ',' 'BIND' '(' 'C' ')'         EOS -> EnumDefStmt             {cons("EnumDefStmt")}

%%R460
  Label? 'ENUMERATOR' '::' EnumeratorList      EOS -> EnumeratorDefStmt       {cons("EnumeratorDefStmt")}
  Label? 'ENUMERATOR'      EnumeratorList      EOS -> EnumeratorDefStmt       {cons("EnumeratorDefStmt")}

%%R461
%%       IntConstantExpr substituted for ScalarIntConstantExpr
%%
  NamedConstant ('=' IntConstantExpr)?             -> Enumerator              {cons("Enumerator")}
  {Enumerator ','}+                                -> EnumeratorList          {cons("EnumeratorList")}

%%R462
  Label? 'END' 'ENUM'                          EOS -> EndEnumStmt             {cons("EndEnumStmt")}


%% 4.7 Binary, octal, and hexadecimal literal constants
%%

%%R463
  BinaryConstant                                   -> BozLiteralConstant      {cons("BozLiteralConstant_BC")}
  OctalConstant                                    -> BozLiteralConstant      {cons("BozLiteralConstant_OC")}
  HexConstant                                      -> BozLiteralConstant      {cons("BozLiteralConstant_HC")}

%%R464
%% BinaryConstant - lex

%%R465
%% OctalConstant - lex

%%R466
%% HexConstant - lex

%%R467
%% HexDigit - ex


%% 4.8 Construction of array values
%%

%%R468
  '(/' AcSpec '/)'                                 -> ArrayConstructor     {cons("ArrayConstructor")}
  '['  AcSpec  ']'                                 -> ArrayConstructor     {cons("ArrayConstructor")}

%%R469
   TypeSpec '::'                                   -> AcSpec               {cons("AcSpec_TS")}
  (TypeSpec '::')? AcValueList                     -> AcSpec               {cons("AcSpec_AVL")}
  {AcValue ','}+                                   -> AcValueList          {cons("AcValueList")}

%%R470
%% Lbracket - lex

%%R471
%% Rbracket - lex

%%R472
  Expr                                             -> AcValue              {cons("AcValue_E")}
  AcImpliedDo                                      -> AcValue              {cons("AcValue_AID")}
   
%%R473
  '(' AcValueList ',' AcImpliedDoControl ')'       -> AcImpliedDo          {cons("AcImpliedDo")}

%%R474
%%      expr substituted for scalar-int-expr
%%
  AcDoVariable '=' Expr ',' Expr (',' Expr)?       -> AcImpliedDoControl   {cons("AcImpliedDoControl")}

%%R475
  DoVariable                                       -> AcDoVariable         {cons("AcDoVariable")}

%%R432
%%TODO-REMOVE
%%  Expr                                        -> AcValueList
%%  AcValueList1                                -> AcValueList
%%  Expr ',' Expr                               -> AcValueList1
%%  Expr ',' AcImpliedDo                        -> AcValueList1
%%  AcImpliedDo                                 -> AcValueList1
%%  AcValueList1 ',' Expr                       -> AcValueList1
%%  AcValueList1 ',' AcImpliedDo                -> AcValueList1

%%R433
%%TODO-REMOVE
%%TODO   '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ')'                  -> AcImpliedDo
%%TODO   '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')'         -> AcImpliedDo
%%TODO   '(' AcImpliedDo ',' ImpliedDoVariable '=' Expr ',' Expr ')'           -> AcImpliedDo
%%TODO   '(' AcImpliedDo ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')'  -> AcImpliedDo
%%TODO   '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ')'                  -> AcImpliedDo

%%%%%%%%%%
%%Fortran ISO/IEC 1539:1991 section R5xx Data Object declarations and Specifications
%%%%%%%%%%

%% Identifier aliases
%%

  Ident   -> ArrayName                 {cons("ArrayName")}
  Ident   -> CommonBlockName           {cons("CommonBlockName")}
  Ident   -> CoarrayName               {cons("CoarrayName")}
  Ident   -> EntityName                {cons("EntityName")}
  Ident   -> NamelistGroupName         {cons("NamelistGroupName")}
  Ident   -> ProcEntityName            {cons("ProcEntityName")}

%% 5.2 Type declaration statements
%%

%%R501
  OptLabel DeclarationTypeSpec
      NoAttrSpecList       {EntityDecl ','}+          EOS -> TypeDeclarationStmt   {cons("TypeDeclarationStmt")}
  OptLabel DeclarationTypeSpec
      OptAttrSpecList '::' {EntityDecl ','}+          EOS -> TypeDeclarationStmt   {cons("TypeDeclarationStmt")}

  % empty %                                               -> NoAttrSpecList        {cons("no-list")}
  % empty %                                               -> OptAttrSpecList       {cons("no-list")}
  ',' {AttrSpec ','}+                                     -> OptAttrSpecList       {cons("opt-list")}

%%R502
   AccessSpec                                             -> AttrSpec
  'ALLOCATABLE'                                           -> AttrSpec     {cons("ALLOCATABLE")}
  'ASYNCHRONOUS'                                          -> AttrSpec     {cons("ASYNCHRONOUS")}
  'CODIMENSION' '[' CoarraySpec ']'                       -> AttrSpec     {cons("AttrSpec")}
  'CONTIGUOUS'                                            -> AttrSpec     {cons("CONTIGUOUS")}
  'DIMENSION' '(' ArraySpec ')'                           -> AttrSpec     {cons("AttrSpec")}
  'EXTERNAL'                                              -> AttrSpec     {cons("EXTERNAL")}
  'INTENT' '(' IntentSpec ')'                             -> AttrSpec     {cons("AttrSpec")}
  'INTRINSIC'                                             -> AttrSpec     {cons("INTRINSIC")}
   LanguageBindingSpec                                    -> AttrSpec
  'OPTIONAL'                                              -> AttrSpec     {cons("OPTIONAL")}
  'PARAMETER'                                             -> AttrSpec     {cons("PARAMETER")}
  'POINTER'                                               -> AttrSpec     {cons("POINTER")}
  'PROTECTED'                                             -> AttrSpec     {cons("PROTECTED")}
  'SAVE'                                                  -> AttrSpec     {cons("SAVE")}
  'TARGET'                                                -> AttrSpec     {cons("TARGET")}
  'VALUE'                                                 -> AttrSpec     {cons("VALUE")}
  'VOLATILE'                                              -> AttrSpec     {cons("VOLATILE")}

%%R503
  ObjectName OptArraySpec
             OptCoarraySpec
             OptCharLength
             OptInitialization                          -> EntityDecl     {cons("EntityDecl")}
%%| FunctionName( '*' CharLength      )?  %%Ambiguous with object-name
%%

  Ident                                                 -> ObjectName

  '(' ArraySpec   ')'                                   -> OptArraySpec      {cons("opt-array-spec")}
  '[' CoarraySpec ']'                                   -> OptCoarraySpec    {cons("opt-coarray-spec")}
  '*' CharLength                                        -> OptCharLength     {cons("opt-char-length")}
  Initialization                                        -> OptInitialization

  % empty %                                             -> OptArraySpec      {cons("no-array-spec")}
  % empty %                                             -> OptCoarraySpec    {cons("no-coarray-spec")}
  % empty %                                             -> OptCharLength     {cons("no-char-length")}
  % empty %                                             -> OptInitialization {cons("no-init")}

%%R504
%%Name - lex

%%R505
  '='   ConstantExpr                                    -> Initialization  {cons("Initialization")}
  '=>'  NullInit                                        -> Initialization  {cons("Initialization")}
  '=>'  InitialDataTarget                               -> Initialization  {cons("Initialization")}

%%R506
  FunctionReference                                     -> NullInit        {cons("NullInit")}


%% 5.3 Attributes
%%

%%R507
  'PUBLIC'                                              -> AccessSpec      {cons("PUBLIC")}
  'PRIVATE'                                             -> AccessSpec      {cons("PRIVATE")}

%%R508
%%       Ident with quotes substituted for scalar-default-char-constant-expr
%%
  'BIND' '(' 'C' OptLanguageBindingName ')'             -> LanguageBindingSpec  {cons("LanguageBindingSpec")}
  ',' 'NAME' '=' '"' Ident '"'                          -> LanguageBindingName  {cons("language-binding-name")}
  ',' 'NAME' '=' "'" Ident "'"                          -> LanguageBindingName  {cons("language-binding-name")}

  LanguageBindingName                                   -> OptLanguageBindingName
  % empty %                                             -> OptLanguageBindingName {cons("no-binding-name")}

%%R509
  DeferredCoshapeSpecList              -> CoarraySpec
  ExplicitCoshapeSpec                  -> CoarraySpec

%%R510
  ':'                                  -> DeferredCoshapeSpec     {cons("DeferredCoshapeSpec")}
  {DeferredCoshapeSpec ','}+           -> DeferredCoshapeSpecList {cons("DeferredCoshapeSpecList")}

%%511
  CoboundsEntry*                  '*'  -> ExplicitCoshapeSpec  {cons("ExplicitCoshapeSpec")}
  CoboundsEntry* LowerCobound ':' '*'  -> ExplicitCoshapeSpec  {cons("ExplicitCoshapeSpec")}

                   UpperCobound ','    -> CoboundsEntry        {cons("CoboundsEntry")}
  LowerCobound ':' UpperCobound ','    -> CoboundsEntry        {cons("CoboundsEntry")}

%%R512
  SpecificationExpr                    -> LowerCobound         {cons("LowerCobound")}

%%R513
  SpecificationExpr                    -> UpperCobound         {cons("UpperCobound")}

%%R514
  'DIMENSION' '(' ArraySpec ')'        -> DimensionSpec        {cons("DimensionSpec")}

%%R515
  ExplicitShapeSpecList                -> ArraySpec
  AssumedShapeSpecList                 -> ArraySpec
%%DeferredShapeSpecList                -> ArraySpec
  AssumedSizeSpec                      -> ArraySpec
  AssumedOrImpliedSpec                 -> ArraySpec
  ImpliedShapeSpecList                 -> ArraySpec
  AssumedRankSpec                      -> ArraySpec

%%R516
                 UpperBound                     -> ExplicitShapeSpec     {cons("ExplicitShapeSpec")}
  LowerBound ':' UpperBound                     -> ExplicitShapeSpec     {cons("ExplicitShapeSpec")}
  {ExplicitShapeSpec ','}+                      -> ExplicitShapeSpecList {cons("ExplicitShapeSpecList")}

%%R517
  SpecificationExpr                             -> LowerBound

%%R518
  SpecificationExpr                             -> UpperBound

%%R519
%%AMB deferred-shape-spec is ambiguous with assumed-shape-spec 
%%AMB        ':'                                -> AssumedShapeSpec      {cons("AssumedShapeSpec")}
  AssumedOrDeferredShapeSpec                    -> AssumedShapeSpec      {cons("AssumedShapeSpec")}
  LowerBound ':'                                -> AssumedShapeSpec      {cons("AssumedShapeSpec")}
  {AssumedShapeSpec ','}+                       -> AssumedShapeSpecList  {cons("AssumedShapeSpecList")}

%%R520
%%AMB deferred-shape-spec is ambiguous with assumed-shape-spec 
  ':'                                           -> AssumedOrDeferredShapeSpec     {cons("AssumedOrDeferredShapeSpec")}
  {AssumedOrDeferredShapeSpec ','}+             -> AssumedOrDeferredShapeSpecList {cons("AssumedOrDeferredShapeSpecList")}

%%R521
%%AMB: explicit-shape-spec list made non-empty to remove ambiguity with implied-shape-spec-list
%%
  ExplicitShapeSpecList ',' '*'                 -> AssumedSizeSpec    {cons("AssumedSizeSpec")}
  ExplicitShapeSpecList ',' LowerBound ':' '*'  -> AssumedSizeSpec    {cons("AssumedSizeSpec")}

%%R522a
  '..'                                          -> AssumedRankSpec      {cons("AssumedRankSpec")}

%%R522
  AssumedOrImpliedSpec
    ',' {AssumedOrImpliedSpec ','}+             -> ImpliedShapeSpecList {cons("ImpliedShapeSpecList")}

                 '*'                            -> AssumedOrImpliedSpec  {cons("AssumedOrImpliedSpec")}
  LowerBound ':' '*'                            -> AssumedOrImpliedSpec  {cons("AssumedOrImpliedSpec")}

%%R523
  'IN'                                          -> IntentSpec  {cons("IntentSpec_IN")}
  'OUT'                                         -> IntentSpec  {cons("IntentSpec_OUT")}
  'IN' 'OUT'                                    -> IntentSpec  {cons("IntentSpec_INOUT")}


%% 5.4 Attribute specification statements
%%

%%R524
  Label? AccessSpec                                     EOS -> AccessStmt   {cons("AccessStmt_0")}
  Label? AccessSpec      AccessIdList                   EOS -> AccessStmt   {cons("AccessStmt_AIL")}
  Label? AccessSpec '::' AccessIdList                   EOS -> AccessStmt   {cons("AccessStmt_AIL")}

%%R525
%%UseName           %% ambiguous with generic-spec
  GenericSpec                                               -> AccessId     {cons("AccessId")}
  {AccessId ','}+                                           -> AccessIdList {cons("AccessIdList")}

%%R526
  Label? 'ALLOCATABLE' '::' AllocatableDeclList         EOS -> AllocatableStmt  {cons("AllocatableStmt")}
  Label? 'ALLOCATABLE'      AllocatableDeclList         EOS -> AllocatableStmt  {cons("AllocatableStmt")}

%%R527
  ObjectName ( '(' ArraySpec   ')' )?
             ( '[' CoarraySpec ']' )?                       -> AllocatableDecl     {cons("AllocatableDecl")}
  {AllocatableDecl ','}+                                    -> AllocatableDeclList {cons("AllocatableDeclList")}

%%R528
  Label? 'ASYNCHRONOUS' '::' ObjectNameList             EOS -> AsynchronousStmt {cons("AsynchronousStmt")}
  Label? 'ASYNCHRONOUS'      ObjectNameList             EOS -> AsynchronousStmt {cons("AsynchronousStmt")}

%%R529
  Label? LanguageBindingSpec '::' BindEntityList        EOS -> BindStmt         {cons("BindStmt")}
  Label? LanguageBindingSpec      BindEntityList        EOS -> BindStmt         {cons("BindStmt")}

%%R530
  EntityName                                                -> BindEntity       {cons("BindEntity_EN")}
  '/' CommonBlockName '/'                                   -> BindEntity       {cons("BindEntity_CBN")}
  {BindEntity ','}+                                         -> BindEntityList   {cons("BindEntityList")}

%%R531
  Label? 'CODIMENSION' '::' CodimensionDeclList         EOS -> CodimensionStmt  {cons("CodimensionStmt")}
  Label? 'CODIMENSION'      CodimensionDeclList         EOS -> CodimensionStmt  {cons("CodimensionStmt")}

%%R532
  CoarrayName '[' CoarraySpec ']'                           -> CodimensionDecl     {cons("CodimensionDecl")}
  {CodimensionDecl ','}+                                    -> CodimensionDeclList {cons("CodimensionDeclList")}

%%R533
  Label? 'CONTIGUOUS' '::' ObjectNameList               EOS -> ContiguousStmt   {cons("ContiguousStmt")}
  Label? 'CONTIGUOUS'      ObjectNameList               EOS -> ContiguousStmt   {cons("ContiguousStmt")}

  {ObjectName ','}+                                         -> ObjectNameList   {cons("ObjectNameList")}

%%R534
  Label? 'DATA' DataStmtSetList                         EOS -> DataStmt         {cons("DataStmt")}

%%R535
  DataStmtObjectList '/' DataStmtValueList '/'              -> DataStmtSet      {cons("DataStmtSet")}
  DataStmtSet                                               -> DataStmtSetList  {cons("DataStmtSetList_1")}
  DataStmtSetList ',' DataStmtSet                           -> DataStmtSetList  {cons("DataStmtSetList_2")}
  DataStmtSetList     DataStmtSet                           -> DataStmtSetList  {cons("DataStmtSetList_2")}

%%R536
  Variable                                                  -> DataStmtObject     {cons("DataStmtObject_V")}
  DataImpliedDo                                             -> DataStmtObject     {cons("DataStmtObject_DID")}
  {DataStmtObject ','}+                                     -> DataStmtObjectList {cons("DataStmtObjectList")}

%%R537
%%         expr substituted for scalar-int-constant-expr
%%
  '('
       DataIDoObjectList ',' DataIDoVariable
          '=' Expr ',' Expr (',' Expr)?
  ')'                                                       -> DataImpliedDo    {cons("DataImpliedDo")}

%%R538
  ArrayElement                                              -> DataIDoObject    {cons("DataIDoObject_AE")}
  StructureComponent                                        -> DataIDoObject    {cons("DataIDoObject_SC")}
  DataImpliedDo                                             -> DataIDoObject    {cons("DataIDoObject_DID")}
  {DataIDoObject ','}+                                      -> DataIDoObjectList{cons("DataIDoObjectList")}

%%R539
  DoVariable                                                -> DataIDoVariable  {cons("DataIDoVariable")}

%%R540
  (DataStmtRepeat '*')? DataStmtConstant                    -> DataStmtValue    {cons("DataStmtValue")}
  {DataStmtValue ','}+                                      -> DataStmtValueList{cons("DataStmtValueList")}
  
%%541
%%         Icon substituted for scalar-int-constant
%%         int-constant-subobject substituted for scalar-int-constant-subobject
%%
  Icon                                                      -> DataStmtRepeat   {cons("DataStmtRepeat_IC")}
  IntConstantSubobject                                      -> DataStmtRepeat   {cons("DataStmtRepeat_ICS")}

%%R542
%%       constant substituted for scalar-constant
%%       constant-subobject substituted for scalar-constant-subobject
%%
  Constant                                                  -> DataStmtConstant  {cons("DataStmtConstant_C")}
  ConstantSubobject                                         -> DataStmtConstant  {cons("DataStmtConstant_CS")}
  SignedIntLiteralConstant                                  -> DataStmtConstant  {cons("DataStmtConstant_SILC")}
  SignedRealLiteralConstant                                 -> DataStmtConstant  {cons("DataStmtConstant_SRLC")}
  NullInit                                                  -> DataStmtConstant  {cons("DataStmtConstant_NI")}
  InitialDataTarget                                         -> DataStmtConstant  {cons("DataStmtConstant_IDT")}
  StructureConstructor                                      -> DataStmtConstant  {cons("DataStmtConstant_SC")}

%%R543
  ConstantSubobject                                         -> IntConstantSubobject  {cons("IntConstantSubobject")}

%%R544
  Designator                                                -> ConstantSubobject {cons("ConstantSubobject")}

%%R545
  OptLabel 'DIMENSION' '::' ArrayNameSpecList           EOS -> DimensionStmt     {cons("DimensionStmt")}
  OptLabel 'DIMENSION'      ArrayNameSpecList           EOS -> DimensionStmt     {cons("DimensionStmt")}

  ArrayName '(' ArraySpec ')'                               -> ArrayNameSpec     {cons("ArrayNameSpec")}
  {ArrayNameSpec ','}+                                      -> ArrayNameSpecList {cons("ArrayNameSpecList")}

%%R546
  OptLabel 'INTENT' '(' IntentSpec ')' '::' DummyArgNameList EOS -> IntentStmt   {cons("IntentStmt")}
  OptLabel 'INTENT' '(' IntentSpec ')'      DummyArgNameList EOS -> IntentStmt   {cons("IntentStmt")}

  {DummyArgName ','}+                                            -> DummyArgNameList {cons("DummyArgs")}

%%R547
  OptLabel 'OPTIONAL' '::' DummyArgNameList                EOS -> OptionalStmt {cons("OptionalStmt")}
  OptLabel 'OPTIONAL'      DummyArgNameList                EOS -> OptionalStmt {cons("OptionalStmt")}

%%R548
  OptLabel 'PARAMETER' '(' NamedConstantDefList ')'        EOS -> ParameterStmt   {cons("ParameterStmt")}

%%R549
  NamedConstant '=' ConstantExpr                               -> NamedConstantDef     {cons("NamedConstantDef")}
  {NamedConstantDef ','}+                                      -> NamedConstantDefList {cons("NamedConstantDefList")}

%%R550
  OptLabel 'POINTER' '::' PointerDeclList                  EOS -> PointerStmt     {cons("PointerStmt")}
  OptLabel 'POINTER'      PointerDeclList                  EOS -> PointerStmt     {cons("PointerStmt")}

%%R551
  ObjectName ( '(' AssumedOrDeferredShapeSpecList ')' )?       -> PointerDecl     {cons("PointerDecl_ON")}
  ProcEntityName                                               -> PointerDecl     {cons("PointerDecl_PEN")}
  {PointerDecl ','}+                                           -> PointerDeclList {cons("PointerDeclList")}

%%R552
  Label? 'PROTECTED' '::' EntityNameList                   EOS -> ProtectedStmt   {cons("ProtectedStmt")}
  Label? 'PROTECTED'      EntityNameList                   EOS -> ProtectedStmt   {cons("ProtectedStmt")}

  {EntityName ','}+                                            -> EntityNameList  {cons("EntityNameList")}

%%R553
  Label? 'SAVE' '::' SavedEntityList                       EOS -> SaveStmt        {cons("SaveStmt_SEL")}
  Label? 'SAVE'      SavedEntityList                       EOS -> SaveStmt        {cons("SaveStmt_SEL")}
  Label? 'SAVE'                                            EOS -> SaveStmt        {cons("SaveStmt_0")}

%%R554
  ObjectName                                                   -> SavedEntity     {cons("SavedEntity_AMB")}
%%ProcPointerName           %% Ambiguous with object-name
  '/' CommonBlockName '/'                                      -> SavedEntity     {cons("SavedEntity_CBN")}
  {SavedEntity ','}+                                           -> SavedEntityList {cons("SavedEntityList")}

%%R555
  Ident                                                        -> ProcPointerName {cons("ProcPointerName")}

%%R556
  Label? 'TARGET' '::' TargetDeclList                      EOS -> TargetStmt   {cons("TargetStmt")}
  Label? 'TARGET'      TargetDeclList                      EOS -> TargetStmt   {cons("TargetStmt")}

%%R557
  ObjectName ( '(' ArraySpec   ')' )?
             ( '[' CoarraySpec ']' )?                          -> TargetDecl     {cons("TargetDecl")}
  {TargetDecl ','}+                                            -> TargetDeclList {cons("TargetDeclList")}

%%R558
  OptLabel 'VALUE' '::' DummyArgNameList                   EOS -> ValueStmt    {cons("ValueStmt")}
  OptLabel 'VALUE'      DummyArgNameList                   EOS -> ValueStmt    {cons("ValueStmt")}

%%R559
  OptLabel 'VOLATILE' '::' ObjectNameList                  EOS -> VolatileStmt {cons("VolatileStmt")}
  OptLabel 'VOLATILE'      ObjectNameList                  EOS -> VolatileStmt {cons("VolatileStmt")}


%% 5.5 Implicit statement
%%

%%R560
  OptLabel 'IMPLICIT' {ImplicitSpec ','}+          EOS -> ImplicitStmt    {cons("ImplicitStmt")}
  OptLabel 'IMPLICIT' 'NONE'                       EOS -> ImplicitStmt    {cons("ImplicitNoneStmt")}

%%R561
  DeclarationTypeSpec '(' {LetterSpec ','}+ ')'        -> ImplicitSpec    {cons("ImplicitSpec")}

%%R562
  Letter OptLetter2                                    -> LetterSpec      {cons("LetterSpec")}

  '-' Letter                                           -> OptLetter2      {cons("letter")}
  % empty %                                            -> OptLetter2      {cons("no-letter")}

%% 5.6 Namelist statement
%%

%%R563
  Label? 'NAMELIST' NamelistEntryList              EOS -> NamelistStmt      {cons("NamelistStmt")}

  '/' NamelistGroupName '/' NamelistGroupObjectList    -> NamelistEntry     {cons("NamelistEntry")}

  NamelistEntry                                        -> NamelistEntryList {cons("NamelistEntryList_0")}
  NamelistEntryList ',' NamelistEntry                  -> NamelistEntryList {cons("NamelistEntryList_NEL")}
  NamelistEntryList     NamelistEntry                  -> NamelistEntryList {cons("NamelistEntryList_NEL")}

%%R564
  VariableName                                               -> NamelistGroupObject {cons("NamelistGroupObject")}
  {NamelistGroupObject ','}+                                 -> NamelistGroupObjectList {cons("NamelistGroupObjectList")}


%% 5.7 Storage association of data objects
%%

%%R565
  Label? 'EQUIVALENCE' EquivalenceSetList                EOS -> EquivalenceStmt   {cons("EquivalenceStmt")}

%%R566
  '(' EquivalenceObject ',' EquivalenceObjectList ')'        -> EquivalenceSet    {cons("EquivalenceSet")}
  {EquivalenceSet ','}+                                      -> EquivalenceSetList{cons("EquivalenceSetList")}

%%R567
  Variable                                                   -> EquivalenceObject {cons("EquivalenceObject")}
%%ArrayElement     %% Ambiguous - included in variable
%%Substring        %% Ambiguous - included in variable
  {EquivalenceObject ','}+                                   -> EquivalenceObjectList {cons("EquivalenceObjectList")}

%%R568
  Label? 'COMMON' CommonBlockEntry1 CommonBlockEntry*    EOS -> CommonStmt  {cons("CommonStmt")}

   '/' CommonBlockName? '/' CommonBlockObjectList            -> CommonBlockEntry1    {cons("CBE1_CBN")}
                            CommonBlockObjectList            -> CommonBlockEntry1    {cons("CBE1")}

   ',' '/' CommonBlockName? '/' CommonBlockObjectList        -> CommonBlockEntry     {cons("CBE")}
       '/' CommonBlockName? '/' CommonBlockObjectList        -> CommonBlockEntry     {cons("CBE")}

%%R569
  VariableName ( '(' ArraySpec ')' )?                        -> CommonBlockObject     {cons("CommonBlockObject")}
  {CommonBlockObject ','}+                                   -> CommonBlockObjectList {cons("CommonBlockObjectList")}


%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R6xx Use of Data Objects
%%%%%%%%%%

%% Identifier aliases
%%

  Ident   -> ScalarVariableName        {cons("ScalarVariableName")}

%% 6.1 Designator
%%

%%R601
%%          AMB  ObjectName                    %% R613 part-name -> part-ref -> data-ref
%%          AMB  ArrayElement                  %% R617 is data-ref
%%          AMB  ArraySection                  %% R618 is data-ref [ (substring-range) ] 
%%          AMB  CoindexedNamedObject          %% R614 is data-ref
%%          AMB  ComplexPartDesignator         %% R615 is designator % ('RE' | 'IM') -> data-ref
%%          AMB  StructureComponent            %% R614 is data-ref
%%          AMB  Substring                     %% R609 is data-ref '(' substring-range ')'
%%
%%      the above reduces to
%%

%%  ObjectName
%%  CoindexedNamedObject
  DataRef                              -> Designator
  Substring                            -> Designator

%%TODO-F08 ambiguous is it needed.  I think '(' SubstringRange ')' is needed at end of 
%%Designator '(' SubstringRange ')'    -> Designator   {cons("designator")}

%%TODO-F08 CharLiteralConstant '(' substring_range ')'  -> Designator  %% from OFP ANTLR grammar


%% 6.2 Variable
%%

%%R602
  Designator                           -> Variable
%%Expr                                 -> Variable  {reject}  %% expr shall be a func ref with pointer result

%%R602
%%TODO-AMB   VariableName | ArrayElement                                   -> ScalarVariable
%%TODO-AMB   VariableName                                                  -> Variable
%%TODO-AMB   VariableName '(' {Subscript ","}+ ')'                         -> Variable
%%TODO-AMB   VariableName SubstringRange                                   -> Variable
%%TODO-AMB   VariableName '(' {Subscript ","}+ ')' SubstringRange          -> Variable
%%TODO-AMB   Expr                                                          -> Subscript

%%R603
  Ident              -> VariableName

%%R604
  Variable           -> LogicalVariable

%%605
  Variable           -> CharVariable

%%R606
  Variable           -> DefaultCharVariable

%%607
  Variable           -> IntVariable


%% 6.4 Scalars
%%

%%608
  ParentString '(' SubstringRange ')'  -> Substring        {cons("Substring")}

%%609
%% AMBIGUOUS
%%      constant substituted for scalar-constant
%%      structure-component substituted for scalar-structure-component
%%
  ScalarVariableName                   -> ParentString     {reject}  %% AMBIGUOUS with StructureComponent
  ArrayElement                         -> ParentString     {reject}  %% AMBIGUOUS with StructureComponent
  CoindexedNamedObject                 -> ParentString     {reject}  %% AMBIGUOUS with StructureComponent
  StructureComponent                   -> ParentString
  Constant                             -> ParentString

%%R610
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr? ':' IntExpr?                -> SubstringRange   {cons("SubstringRange")}

%%R611
  {PartRef '%'}+                                         -> DataRef   {cons("DataRef")}

%%R612
  PartName OptSectionSubscripts OptImageSelector         -> PartRef   {cons("PartRef")}

  % empty %                                              -> OptSectionSubscripts  {cons("no-section-subscripts")}
  '(' {SectionSubscript ','}+ ')'                        -> OptSectionSubscripts  {cons("opt-list")}

  Ident                                                  -> PartName

%%R613
  DataRef                                                -> StructureComponent

%%R614
  DataRef                                                -> CoindexedNamedObject {cons("CoindexedNamedObject")}

%%R615
  Designator '%' 'RE'                                    -> ComplexPartDesignator {cons("ComplexPartDesignator_RE")}
  Designator '%' 'IM'                                    -> ComplexPartDesignator {cons("ComplexPartDesignator_IM")}

%%R616
  Designator '%' TypeParamName                           -> TypeParamInquiry     {cons("TypeParamInquiry")}


%% 6.5 Arrays
%%

%%R617
  DataRef                                                -> ArrayElement         {cons("ArrayElement")}

%%R618
  DataRef ('(' SubstringRange ')')?                      -> ArraySection         {cons("ArraySection_DR")}
  ComplexPartDesignator                                  -> ArraySection         {cons("ArraySection_CPD")}

%%R619
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> Subscript

  Subscript                                              -> OptSubscript
  % empty %                                              -> OptSubscript         {cons("no-subscript")}

%%R620
  Subscript                                              -> SectionSubscript
  SubscriptTriplet                                       -> SectionSubscript
%%VectorSubscript                                        -> SectionSubscript     %%AMBIGUOUS with Subscript

%%R621
  OptSubscript ':' OptSubscript OptStride                -> SubscriptTriplet     {cons("SubscriptTriplet")}

%%R622
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> Stride

  ':' Stride                                             -> OptStride            {cons("opt-stride")}
  % empty %                                              -> OptStride            {cons("no-stride")}

%%R623
  IntExpr                                                -> VectorSubscript


%% 6.6 Image selectors
%%

%%R624
  '[' {Cosubscript ','}+ ']'                             -> ImageSelector        {cons("ImageSelector")}
  ImageSelector                                          -> OptImageSelector
  % empty %                                              -> OptImageSelector     {cons("no-image-selector")}

%%625
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> Cosubscript


%% 6.7 Dynamic association
%%

%%R626
  OptLabel 'ALLOCATE'
     '(' NoTypeSpec    {Allocation ','}+ OptAllocOptList ')' EOS -> AllocateStmt {cons("AllocateStmt")}
  OptLabel 'ALLOCATE'
     '(' TypeSpec '::' {Allocation ','}+ OptAllocOptList ')' EOS -> AllocateStmt {cons("AllocateStmt")}

  % empty %                                              -> NoTypeSpec           {cons("no-type-spec")}

%%R627
%%      expr substituted for source-expr
%%
  'ERRMSG' '=' ErrmsgVariable                            -> AllocOpt             {cons("ERRMSG")}
  'MOLD'   '=' Expr                                      -> AllocOpt             {cons("MOLD")}
  'SOURCE' '=' Expr                                      -> AllocOpt             {cons("SOURCE")}
  'STAT'   '=' StatVariable                              -> AllocOpt             {cons("STAT")}

  ',' {AllocOpt ','}+                                    -> OptAllocOptList      {cons("opt-list")}
  % empty %                                              -> OptAllocOptList      {cons("no-list")}

%%R628
%%     int-variable substituted for scalar-int-variable
%%
  IntVariable                                            -> StatVariable

%%R629
%%     default-char-variable substituted for scalar-default-char-variable
%%
  DefaultCharVariable                                    -> ErrmsgVariable

%%R630
%% SourceExpr

%%R631
   AllocateObject     NoAllocateShapeSpecList
                      NoAllocateCoarraySpec              -> Allocation           {cons("Allocation"),avoid}
   AllocateObject '(' {AllocateShapeSpec ','}+ ')'
                      NoAllocateCoarraySpec              -> Allocation           {cons("Allocation")}
   AllocateObject     NoAllocateShapeSpecList
                  '[' AllocateCoarraySpec      ']'       -> Allocation           {cons("Allocation")}
   AllocateObject '(' {AllocateShapeSpec ','}+ ')'
                  '[' AllocateCoarraySpec      ']'       -> Allocation           {cons("Allocation")}

%%R632
%%VariableName                                           -> AllocateObject %% AMBIGUOUS with StructureComponent
  StructureComponent                                     -> AllocateObject

%%R633
  NoLowerBoundExpr   UpperBoundExpr                      -> AllocateShapeSpec    {cons("AllocateShapeSpec")}
  LowerBoundExpr ':' UpperBoundExpr                      -> AllocateShapeSpec    {cons("AllocateShapeSpec")}

  % empty %                                           -> NoAllocateShapeSpecList {cons("no-shape-specs")}
  % empty %                                           -> NoAllocateCoarraySpec   {cons("no-coshape-specs")}
  % empty %                                           -> NoLowerBoundExpr        {cons("no-lower-bound")}

%%R634
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> LowerBoundExpr

%%R635
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> UpperBoundExpr

%%R636
  NoAllocateCoshapeSpecList      NoLowerBoundExpr   '*'  -> AllocateCoarraySpec  {cons("AllocateCoarraySpec")}
  NoAllocateCoshapeSpecList      LowerBoundExpr ':' '*'  -> AllocateCoarraySpec  {cons("AllocateCoarraySpec")}
  {AllocateCoshapeSpec ','}+ ',' NoLowerBoundExpr   '*'  -> AllocateCoarraySpec  {cons("AllocateCoarraySpec")}
  {AllocateCoshapeSpec ','}+ ',' LowerBoundExpr ':' '*'  -> AllocateCoarraySpec  {cons("AllocateCoarraySpec")}

%%R637
  NoLowerBoundExpr   UpperBoundExpr              -> AllocateCoshapeSpec       {cons("AllocateCoshapeSpec")}
  LowerBoundExpr ':' UpperBoundExpr              -> AllocateCoshapeSpec       {cons("AllocateCoshapeSpec")}
  % empty %                                      -> NoAllocateCoshapeSpecList {cons("no-list")}

%%R638
  OptLabel 'NULLIFY' '(' {PointerObject ','}+ ')'    EOS -> NullifyStmt          {cons("NullifyStmt")}

%%R639
  VariableName                                           -> PointerObject
  StructureComponent                                     -> PointerObject        {avoid}
  ProcPointerName                                        -> PointerObject        {reject}

%%R640
  OptLabel 'DEALLOCATE'
     '(' {AllocateObject ','}+ OptDeallocOptList ')' EOS -> DeallocateStmt       {cons("DeallocateStmt")}

  ',' DeallocOptList                                     -> OptDeallocOptList    {cons("opt-dealloc-opt-list")}
  % empty %                                              -> OptDeallocOptList    {cons("no-dealloc-opt-list")}

%%641
  'STAT'   '=' StatVariable                              -> DeallocOpt           {cons("STAT")}
  'ERRMSG' '=' ErrmsgVariable                            -> DeallocOpt           {cons("ERRMSG")}
  {DeallocOpt ','}+                                      -> DeallocOptList       {cons("dealloc-opt-list")}


%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R7xx Expressions and Assignments
%%%%%%%%%%

%% Identifier aliases
%%

  Ident   -> DataPointerComponentName  {cons("DataPointerComponentName")}
  Ident   -> ForallConstructName       {cons("ForallConstructName")}
  Ident   -> IndexName                 {cons("IndexName")}
  Ident   -> ProcedureComponentName    {cons("ProcedureComponentName")}

%%R309
  PowerOp                       -> IntrinsicOperator     {cons("PowerOp")}
  MultOp                        -> IntrinsicOperator     {cons("MultOp")}
  AddOp                         -> IntrinsicOperator     {cons("AddOp")}
  ConcatOp                      -> IntrinsicOperator     {cons("ConcatOp")}
  RelOp                         -> IntrinsicOperator     {cons("RelOp")}
  NotOp                         -> IntrinsicOperator     {cons("NotOp")}
  AndOp                         -> IntrinsicOperator     {cons("AndOp")}
  OrOp                          -> IntrinsicOperator     {cons("OrOp")}
  EquivOp                       -> IntrinsicOperator     {cons("EquivOp")}

%%R310
%% Keep for now for disambiguation
%%
  DefinedUnaryOp                -> DefinedOperator       {cons("DefinedOperator")}
  DefinedBinaryOp               -> DefinedOperator       {cons("DefinedOperator")}
  ExtendedIntrinsicOp           -> DefinedOperator       {cons("DefinedOperator")}

%%R311
  IntrinsicOperator             -> ExtendedIntrinsicOp

%%R701
  Constant                      -> Primary
  Designator                    -> Primary
  ArrayConstructor              -> Primary
  StructureConstructor          -> Primary
  FunctionReference             -> Primary
%%TypeParamInquiry              -> Primary  {reject}        %% AMBIGUOUS > Designator
%%TypeParamName                 -> Primary  {reject}        %% AMBIGUOUS > Designator
  '(' Expr ')'                  -> Primary  {cons("Primary")}

%%TODO-DELETE   Scon                          -> Primary          {cons("PrimaryScon")}
%%TODO-DELETE   UnsignedArithmeticConstant    -> Primary          {cons("ConstExpr")}
%%TODO- needed to resolve ambiguity? DataRef
%%TODO ???????  ArrayConstructor              -> SFPrimary

%%R702
  DefinedUnaryOp? Primary                  -> Level1Expr      {cons("Level1Expr")}

%%R703
  Dop                                      -> DefinedUnaryOp  {cons("DefinedUnaryOp")}

%%R704
  Level1Expr (PowerOp MultOperand)?        -> MultOperand     {cons("MultOperand")}

%%R705
  (AddOperand MultOp)? MultOperand         -> AddOperand      {cons("AddOperand")}

%%R706 % ELI: "We need to distinguish unary operators" SDF: ambig on "-2" on next 2 lines 
%%TODO-F08: is this still true?
%%R706
  (Level2Expr? AddOp)? AddOperand          -> Level2Expr      {cons("Level2Expr")}

%%R707
  '**'                                     -> PowerOp         {cons("PowerOp")}

%%R708
  '*'                                      -> MultOp          {cons("TIMES")}
  '/'                                      -> MultOp          {cons("DIV")}

%%R709
  '+'                                      -> AddOp           {cons("PLUS")}
  '-'                                      -> AddOp           {cons("MINUS")}

%%R710
  (Level3Expr ConcatOp)? Level2Expr        -> Level3Expr      {cons("Level3Expr")}

%%R711
  '//'                                     -> ConcatOp        {cons("ConcatOp")}

%%R712
  (Level3Expr RelOp)? Level3Expr           -> Level4Expr      {cons("Level4Expr")}

%%R713
  '.EQ.'                                   -> RelOp           {cons("RelOp_EQ")}
  '.NE.'                                   -> RelOp           {cons("RelOp_NE")}
  '.LT.'                                   -> RelOp           {cons("RelOp_LT")}
  '.LE.'                                   -> RelOp           {cons("RelOp_LE")}
  '.GT.'                                   -> RelOp           {cons("RelOp_GT")}
  '.GE.'                                   -> RelOp           {cons("RelOp_GE")}
  '=='                                     -> RelOp           {cons("RelOp_EQ")}
  '/='                                     -> RelOp           {cons("RelOp_NE")}
  '<'                                      -> RelOp           {cons("RelOp_LT")}
  '<='                                     -> RelOp           {cons("RelOp_LE")}
  '>'                                      -> RelOp           {cons("RelOp_GT")}
  '>='                                     -> RelOp           {cons("RelOp_GE")}

%%R714
  NotOp? Level4Expr                        -> AndOperand      {cons("AndOperand")}

%%R715
  (OrOperand AndOp)? AndOperand            -> OrOperand       {cons("OrOperand")}

%%R716
  (EquivOperand OrOp)? OrOperand           -> EquivOperand    {cons("EquivOperand")}

%%R717
  (Level5Expr EquivOp)? EquivOperand       -> Level5Expr      {cons("Level5Expr")}

%%R718
  '.NOT.'                                  -> NotOp           {cons("NotOp")}

%%R719
  '.AND.'                                  -> AndOp           {cons("AndOp")}

%%R720
  '.OR.'                                   -> OrOp            {cons("OrOp")}

%%R721
  '.EQV.'                                  -> EquivOp         {cons("EquivOp_EQV")}
  '.NEQV.'                                 -> EquivOp         {cons("EquivOp_NEQV")}

%%R722
%%TODO-short circuit the expr nonsense and make it more sensible
%%( Expr DefinedBinaryOp )? Level5Expr     -> Expr            {cons("Expr")}
Primary                                    -> Expr

%%R723
  Dop                                      -> DefinedBinaryOp {cons("DefinedBinaryOp")}

%%TODO - what to do about this
%%R725-R734 chain rule deleted

%%R724
  Expr                                     -> LogicalExpr

%%R725
  Expr                                     -> DefaultCharExpr

%%R726
  Expr                                     -> IntExpr

%%R727
  Expr                                     -> NumericExpr

%%R728
%%       scalar-int-expr replaced by int-expr
%%
  IntExpr                                  -> SpecificationExpr

%%R729
  Expr                                     -> ConstantExpr

%%R730
  DefaultCharExpr                          -> DefaultCharConstantExpr

%%R731
  IntExpr                                  -> IntConstantExpr

%%R732
  OptLabel Variable '=' Expr           EOS -> AssignmentStmt  {cons("AssignmentStmt")}

%% todo: check. Original ISO: assignmentStatement is variable '=' expression
%%TODO-DELETE   LblDef Name '%' Name '=' Expr EOS                                      -> AssignmentStmt
%%TODO-DELETE   LblDef Name '%' DataRef '=' Expr EOS                                   -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '%' Name '=' Expr EOS                   -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '%' DataRef '=' Expr EOS                -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFDummyArgNameList ')' '%' Name '=' Expr EOS           -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFDummyArgNameList ')' '%' DataRef '=' Expr EOS        -> AssignmentStmt
%%TODO-DELETE   LblDef Name '=' Expr EOS                                               -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '=' Expr EOS                            -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' SubstringRange '=' Expr EOS             -> AssignmentStmt

%%R733
  Label? DataPointerObject ( '(' BoundsSpecList ')' )?
                           '=>' DataTarget       EOS -> PointerAssignmentStmt  {cons("PointerAssignmentStmt_DPO1")}
  Label? DataPointerObject   '(' BoundsRemappingList ')'
                           '=>' DataTarget       EOS -> PointerAssignmentStmt  {cons("PointerAssignmentStmt_DPO2")}
  Label? ProcPointerObject '=>' ProcTarget       EOS -> PointerAssignmentStmt  {cons("PointerAssignmentStmt_PPO")}

%%TODO-DELETE these
%%TODO   LblDef Name '%' Name '=>' DataTarget EOS                               -> PointerAssignmentStmt
%%TODO   LblDef Name '%' DataRef '=>' DataTarget EOS                            -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFExprList ')' '%' Name '=>' DataTarget EOS            -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFExprList ')' '%' DataRef '=>' DataTarget EOS         -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFDummyArgNameList ')' '%' Name '=>' DataTarget EOS    -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFDummyArgNameList ')' '%' DataRef '=>' DataTarget EOS -> PointerAssignmentStmt

%%R734
%%          variable substituted for scalar-variable
%%
  VariableName                                           -> DataPointerObject  {cons("DataPointerObject_VN")}
  Variable '%' DataPointerComponentName                  -> DataPointerObject  {cons("DataPointerObject_V")}

%%R735
  LowerBoundExpr ':'                                     -> BoundsSpec         {cons("BoundsSpec")}
  {BoundsSpec ','}+                                      -> BoundsSpecList     {cons("BoundsSpecList")}

%%R736
  LowerBoundExpr ':' UpperBoundExpr                      -> BoundsRemapping    {cons("BoundsRemapping")}
  {BoundsRemapping ','}+                                 -> BoundsRemappingList{cons("BoundsRemappingList")}

%%R737
%%       Variable producing DataTarget is Ambiguous
%%
  Expr                                                 -> DataTarget        {cons("DataTarget")}

%%R738
  ProcPointerName                                      -> ProcPointerObject {cons("ProcPointerObject_PPN")}
  ProcComponentRef                                     -> ProcPointerObject {cons("ProcPointerObject_PCR")}

%%R739
%%          variable substituted for scalar-variable
%%
  Variable '%' ProcedureComponentName                  -> ProcComponentRef  {cons("ProcComponentRef")}

%%R740
  Expr                                                 -> ProcTarget
  ProcedureName                                        -> ProcTarget
  ProcComponentRef                                     -> ProcTarget

%%R741
  Label? 'WHERE' '(' MaskExpr ')' WhereAssignmentStmt  -> WhereStmt         {cons("WhereStmt")}

%%R742
%%TODO-F08-FIXME
%% todo: sdf-fy
%%  Where     EndWhereStmt      -> WhereConstruct
%%  ElseWhere EndWhereStmt      -> WhereConstruct
%%  WhereConstructStmt          -> Where
%%  Where AssignmentStmt        -> Where
%%  Where ElsewhereStmt         -> ElseWhere
%%  ElseWhere AssignmentStmt    -> ElseWhere
%%TODO-DELETE  WhereConstructStmt AssignmentStmt* 
%%TODO-DELETE                (ElsewhereStmt AssignmentStmt*)? 
%%TODO-DELETE  EndWhereStmt                                  -> WhereConstruct  {cons("WhereConstruct")}

%%R742
  WhereConstructStmt  WhereBodyConstruct*
    MaskedElsewhereClause*
    ElsewhereClause?
  EndWhereStmt                                  -> WhereConstruct         {cons("WhereConstruct")}

  MaskedElsewhereStmt WhereBodyConstruct*       -> MaskedElsewhereClause  {cons("MaskedElsewhereClause")}
  ElsewhereStmt       WhereBodyConstruct*       -> ElsewhereClause        {cons("ElsewhereClause")}


%%R743
%%       Ident substituted for where-construct-name
%%
  Label? (Ident ':')? 'WHERE' '(' MaskExpr ')' EOS -> WhereConstructStmt  {cons("WhereConstructStmt")}

%%R744
  WhereAssignmentStmt                              -> WhereBodyConstruct  {cons("WhereBodyConstruct_WAS")}
  WhereStmt                                        -> WhereBodyConstruct  {cons("WhereBodyConstruct_WS")}
  WhereConstruct                                   -> WhereBodyConstruct  {cons("WhereBodyConstruct_WC")}

%%R745
%%TODO-F08 - make it so label can't be part of assignment-stmt
%%
  AssignmentStmt                                   -> WhereAssignmentStmt {cons("WhereAssignmentStmt")}

%%R746
  LogicalExpr                                      -> MaskExpr            {cons("MaskExpr")}

%%R747
%%       Ident substituted for where-construct-name
%%
  Label? 'ELSEWHERE' '(' MaskExpr ')' Ident?   EOS -> MaskedElsewhereStmt {cons("MaskedElsewhereStmt")}

%%R748
%%       Ident substituted for where-construct-name
%%
  Label? 'ELSEWHERE' Ident?                    EOS -> ElsewhereStmt       {cons("ElsewhereStmt")}

%%R749
%%       Ident substituted for where-construct-name
%%
  Label? 'END' 'WHERE' Ident?                  EOS -> EndWhereStmt        {cons("EndWhereStmt")}

%%R750
  ForallConstructStmt
    ForallBodyConstruct*
  EndForallStmt                                    -> ForallConstruct     {cons("ForallConstruct")}

%%R751
  Label? (ForallConstructName ':')?
         'FORALL' ForallHeader                 EOS -> ForallConstructStmt  {cons("ForallConstructStmt")}

%%752
%%       mask-expr substituted for scalar-mask-expr
%%
  '('
     (TypeSpec '::')? ForallTripletSpecList
                      (',' MaskExpr)?
  ')'                                              -> ForallHeader         {cons("ForallHeader")}

%%753
  IndexName '=' ForallLimit
            ':' ForallLimit (':' ForallStep)?      -> ForallTripletSpec    {cons("ForallTripletSpec")}
  {ForallTripletSpec ','}+                         -> ForallTripletSpecList{cons("ForallTripletSpecList")}

%%754
%%        int-expr substituted for scalar-int-expr
%%
  IntExpr                                          -> ForallLimit          {cons("ForallLimit")}

%%755
%%        int-expr substituted for scalar-int-expr
%%
  IntExpr                                          -> ForallStep           {cons("ForallStep")}

%%756
  ForallAssignmentStmt                             -> ForallBodyConstruct  {cons("ForallBodyConstruct_FAS")}
  WhereStmt                                        -> ForallBodyConstruct  {cons("ForallBodyConstruct_WS")}
  WhereConstruct                                   -> ForallBodyConstruct  {cons("ForallBodyConstruct_WC")}
  ForallConstruct                                  -> ForallBodyConstruct  {cons("ForallBodyConstruct_FC")}
  ForallStmt                                       -> ForallBodyConstruct  {cons("ForallBodyConstruct_FS")}

%%757
  AssignmentStmt                                   -> ForallAssignmentStmt {cons("ForallAssignmentStmt_AS")}
  PointerAssignmentStmt                            -> ForallAssignmentStmt {cons("ForallAssignmentStmt_PAS")}

%%758
  Label? 'END' 'FORALL' ForallConstructName?   EOS -> EndForallStmt        {cons("EndForallStmt")}

%%759
  Label? 'FORALL' ForallHeader ForallAssignmentStmt-> ForallStmt           {cons("ForallStmt")}

%%TODO - what with the following
%%
%%  SFExpr ':' Expr ':' Expr                      -> SFExprList
%%  SFExpr ':' ':' Expr                           -> SFExprList
%%  ':' Expr ':' Expr                             -> SFExprList
%%  ':' ':' Expr                                  -> SFExprList
%%  ':'                                           -> SFExprList
%%  ':' Expr                                      -> SFExprList
%%  SFExpr                                        -> SFExprList
%%  SFExpr ':'                                    -> SFExprList
%%  SFExpr ':' Expr                               -> SFExprList
%%  SFExprList ',' SectionSubscript               -> SFExprList
%%TODO   SFDummyArgNameList ',' ':'                    -> SFExprList
%%TODO   SFDummyArgNameList ',' ':' Expr               -> SFExprList
%% problem with code like P(A,2). A can be both SFExprList and SFDummyargnameList. 
%% Conflict with 3 lines above: SFExprList ',' SectionSubscript  
%%  SFDummyArgNameList ',' SFExpr                 -> SFExprList
%%TODO   SFDummyArgNameList ',' SFExpr ':'             -> SFExprList
%%TODO   SFDummyArgNameList ',' SFExpr ':' Expr        -> SFExprList

%%  SFTerm                                        -> SFExpr
%%  Sign AddOperand                               -> SFExpr
%%  SFExpr AddOp AddOperand                       -> SFExpr
%%  SFFactor                                      -> SFTerm
%%  SFTerm MultOp MultOperand                     -> SFTerm
%%  SFPrimary                                     -> SFFactor
%%  SFPrimary PowerOp MultOperand                 -> SFFactor
%%  Icon                                          -> SFPrimary
%%  Name                                          -> SFPrimary
%%  DataRef                                       -> SFPrimary
%%  FunctionReference                             -> SFPrimary
%%  '(' Expr ')'                                  -> SFPrimary


context-free priorities

%% See Clause 7.1.3 for precedence of operators

%% defined-unary-op has highest priority followed by **
%%
    DefinedUnaryOp Expr   -> Expr {cons("DefUnaryExpr")}
  >
    Expr '**' Expr        -> Expr {cons("Power"), right}
  >
  { left:
    Expr '*' Expr       -> Expr {cons("Mult"), left}
    Expr '/' Expr       -> Expr {cons("Div"),  left}
  }
  >
  {
    '+' Expr            -> Expr {cons("Plus")}
    '-' Expr            -> Expr {cons("Minus")}
  }
  >
  { left:
    Expr '+'  Expr      -> Expr {cons("Plus"),  left}
    Expr '-'  Expr      -> Expr {cons("Minus"), left}
  }
  > Expr '//' Expr      -> Expr {cons("Concat"), left}
  >
  { left:
    Expr '.EQ.' Expr    -> Expr {cons("EQ"), left}
    Expr '.NE.' Expr    -> Expr {cons("NE"), left}
    Expr '.LT.' Expr    -> Expr {cons("LT"), left}
    Expr '.LE.' Expr    -> Expr {cons("LE"), left}
    Expr '.GT.' Expr    -> Expr {cons("GT"), left}
    Expr '.GE.' Expr    -> Expr {cons("GE"), left}
    Expr '=='   Expr    -> Expr {cons("EQ"), left}
    Expr '/='   Expr    -> Expr {cons("NE"), left}
    Expr '<'    Expr    -> Expr {cons("LT"), left}
    Expr '<='   Expr    -> Expr {cons("LE"), left}
    Expr '>'    Expr    -> Expr {cons("GT"), left}
    Expr '>='   Expr    -> Expr {cons("GE"), left}
  }
  >      '.NOT.' Expr   -> Expr {cons("NOT")}
  > Expr '.AND.' Expr   -> Expr {cons("AND"), left}
  > Expr '.OR.'  Expr   -> Expr {cons("OR"),  left}
  >
  { left:
    Expr '.EQV.'  Expr  -> Expr {cons("EQV"),    left}
    Expr '.NEQV.' Expr  -> Expr {cons("NEQV"), left}
  }
%%
%% defined-binary-op has lowest priority
  > Expr DefinedBinaryOp Expr -> Expr {cons("DefBinExpr")}


context-free syntax
      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R8xx Execution Control
%%%%%%%%%%

%% Identifier aliases
%%

  Ident   -> AssociateConstructName    {cons("AssociateConstructName")}
  Ident   -> AssociateName             {cons("AssociateName")}
  Ident   -> BlockConstructName        {cons("BlockConstructName")}
  Ident   -> CaseConstructName         {cons("CaseConstructName")}
  Ident   -> ConstructName             {cons("ConstructName")}
  Ident   -> CriticalConstructName     {cons("CriticalConstructName")}
  Ident   -> DoConstructName           {cons("DoConstructName")}
  Ident   -> IfConstructName           {cons("IfConstructName")}
  Ident   -> ScalarIntVariableName     {cons("ScalarIntVariableName")}
  Ident   -> SelectConstructName       {cons("SelectConstructName")}

%% 8.1 Executable constructs containing blocks
%%

%%R801
  ExecutionPartConstruct*                               -> Block              {cons("Block")}

%%R802
  AssociateStmt
    Block
  EndAssociateStmt                                      -> AssociateConstruct {cons("AssociateConstruct")}

%%R803
  Label? (AssociateConstructName ':')?
     'ASSOCIATE' '(' AssociationList ')'            EOS -> AssociateStmt      {cons("AssociateStmt")}

%%R804
  AssociateName '=>' Selector                           -> Association        {cons("Association")}
  {Association ','}+                                    -> AssociationList    {cons("AssociationList")}

%%R805
%%TODO-F08 is this ambiguous?
  Expr                                                  -> Selector           {cons("Selector_E")}
  Variable                                              -> Selector           {cons("Selector_V")}

%%R806
  Label? 'END' 'ASSOCIATE' AssociateConstructName?  EOS -> EndAssociateStmt   {cons("EndAssociateStmt")}

%%R807
%%       The optional specification-part is ambiguous.  The lack of a specification-part
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  BlockStmt
    SpecificationPart
    Block
  EndBlockStmt                                          -> BlockConstruct     {cons("BlockConstruct")}

%%R808
  Label? ( BlockConstructName ':' )? 'BLOCK'        EOS -> BlockStmt          {cons("BlockStmt")}

%%R809
  Label? 'END' 'BLOCK' BlockConstructName?          EOS -> EndBlockStmt       {cons("EndBlockStmt")}

%%R810
  CriticalStmt
    Block
  EndCriticalStmt                                       -> CriticalConstruct  {cons("CriticalConstruct")}

%%R811
  Label? ( CriticalConstructName ':' )? 'CRITICAL'  EOS -> CriticalStmt       {cons("CriticalStmt")}

%%R812
  Label? 'END' 'CRITICAL' CriticalConstructName?    EOS -> EndCriticalStmt    {cons("EndCriticalStmt")}


%% Block DO constructs cannot be recognized syntactically because there is
%% no requirement that there is an end do statement.  Specifically, a
%% nonblock-do-construct may terminate on an action-stmt.  Therefore
%% a do-construct will have to be recognized by a rewrite phase that
%% searches for the terminating statement.  So the parser grammar needs to
%% place any new statements that are part of a do-construct into the
%% the action-stmt set.
%%

%%R813
%%AMB BlockDoConstruct                                  -> DoConstruct
%%AMB NonblockDoConstruct                               -> DoConstruct

%%R814
%%AMB DoStmt
%%AMB   DoBlock
%%AMB EndDo                                             -> BlockDoConstruct

%%R815
%%AMB LabelDoStmt                                       -> DoStmt
%%AMB NonlableDoStmt                                    -> DoStmt

%%R816
  Label? (DoConstructName ':')?
         'DO' LblRef LoopControl?                   EOS -> LabelDoStmt    {cons("LabelDoStmt")}

%%R817
  Label? (DoConstructName ':')?
         'DO'        LoopControl?                   EOS -> NonlabelDoStmt {cons("NonlabelDoStmt")}

%%R818
%%        expr substituted for scalar-int-expr
%%        expr substituted for scalar-logical-expr
%%
      DoVariable '=' Expr ',' Expr (',' Expr)?          -> LoopControl    {cons("LoopControl_DV")}
  ',' DoVariable '=' Expr ',' Expr (',' Expr)?          -> LoopControl    {cons("LoopControl_DV")}
      'WHILE' '(' Expr ')'                              -> LoopControl    {cons("LoopControl_WHILE")}
  ',' 'WHILE' '(' Expr ')'                              -> LoopControl    {cons("LoopControl_WHILE")}
      'CONCURRENT' ForallHeader                         -> LoopControl    {cons("LoopControl_CONCURRENT")}
  ',' 'CONCURRENT' ForallHeader                         -> LoopControl    {cons("LoopControl_CONCURRENT")}

%%R819
  ScalarIntVariableName                                 -> DoVariable     {cons("DoVariable")}

%%820
%%AMB  Block                                            -> DoBlock

%%821
%%AMB EndDoStmt                                         -> EndDo
%%AMB ContinueStmt                                      -> EndDo

%%R822
  Label? 'END' 'DO' DoConstructName?                EOS -> EndDoStmt      {cons("EndDoStmt")}

%%R823
%%AMB ActionTermDoConstruct                             -> NonblockDoConstruct
%%AMB OuterSharedDoConstruct                            -> NonblockDoConstruct

%%R824
%%AMB LabelDoStmt
%%AMB   DoBody
%%AMB DoTermActionStmt                                  -> ActionTermDoConstruct

%%R825
%%AMB ExecutionPartConstruct*                           -> DoBody

%%R826
%%AMB ActionStmt                                        -> DoTermActionStmt

%%R827
%%AMB LabelDoStmt
%%AMB   DoBody
%%AMB SharedTermDoConstruct                             -> OuterSharedDoConstruct

%%R828
%%AMB OuterSharedDoConstruct                            -> SharedTermDoConstruct
%%AMB InnerSharedDoConstruct                            -> SharedTermDoConstruct

%%R829
%%AMB LabelDoStmt
%%AMB   DoBody
%%AMB SharedTermDoConstruct                             -> InnerSharedDoConstruct

%%R830
%%AMB ActionStmt                                        -> DoTermSharedStmt

%%R831
  Label? 'CYCLE' DoConstructName?                   EOS -> CycleStmt      {cons("CycleStmt")}

%%R832
  IfThenStmt Block
  ElseIfStmtAndBlock* 
  ElseStmtAndBlock?
  EndIfStmt                                             -> IfConstruct         {cons("IfConstruct")}

  ElseIfStmt Block                                      -> ElseIfStmtAndBlock  {cons("ElseIfStmt_Block")}
  ElseStmt   Block                                      -> ElseStmtAndBlock    {cons("ElseStmt_Block")}

%%R833
%%       logical-expr substituted for scalar-logical-expr
%%
  Label? (IfConstructName ':')?
         'IF' '(' LogicalExpr ')' 'THEN'            EOS -> IfThenStmt     {cons("IfThenStmt")}

%%R834
%%       logical-expr substituted for scalar-logical-expr
%%
  Label? 'ELSE' 'IF' '(' LogicalExpr ')'
         'THEN' IfConstructName?                    EOS -> ElseIfStmt     {cons("ElseIfStmt")}

%%R835
  Label? 'ELSE' IfConstructName?                    EOS -> ElseStmt       {cons("ElseStmt")}

%%R836
  Label? 'END' 'IF' IfConstructName?                EOS -> EndIfStmt      {cons("EndIfStmt")}

%%R837
%%       logical-expr substituted for scalar-logical-expr
%%
  Label? 'IF' '(' LogicalExpr ')' ActionStmt            -> IfStmt         {cons("IfStmt")}

%%R838
  SelectCaseStmt
    CaseStmtAndBlock*
  EndSelectStmt                                         -> CaseConstruct     {cons("CaseConstruct")}

  CaseStmt Block                                        -> CaseStmtAndBlock  {cons("CaseStmt_Block")}

%%R839
  Label? ( CaseConstructName ':' )?
     'SELECT' 'CASE' '(' CaseExpr ')'               EOS -> SelectCaseStmt {cons("SelectCaseStmt")}

%%R840
  Label? 'CASE' CaseSelector CaseConstructName?     EOS -> CaseStmt       {cons("CaseStmt")}

%%R841
  Label? 'END' 'SELECT' CaseConstructName?          EOS -> EndSelectStmt  {cons("EndSelectStmt")}

%%R842
%%       expr substituted for scalar-expr
%%
  Expr                                                  -> CaseExpr       {cons("CaseExpr")}

%%R843
  '(' CaseValueRangeList ')'                            -> CaseSelector   {cons("CaseSelector_CVRL")}
  'DEFAULT'                                             -> CaseSelector   {cons("CaseSelector_DEFAULT")}

%%R844
      CaseValue                                         -> CaseValueRange     {cons("CaseValueRange_CV")}
      CaseValue ':'                                     -> CaseValueRange     {cons("CaseValueRange_CV")}
  ':' CaseValue                                         -> CaseValueRange     {cons("CaseValueRange_CV")}
      CaseValue ':' CaseValue                           -> CaseValueRange     {cons("CaseValueRange_CVCV")}
  {CaseValueRange ','}+                                 -> CaseValueRangeList {cons("CaseValueRangeList")}

%%R845
%%       constant-expr substituted for scalar-constant-expr
%%
  ConstantExpr                                          -> CaseValue      {cons("CaseValue")}

%%R846
  SelectTypeStmt
    TypeGuardStmtAndBlock*
  EndSelectTypeStmt                                     -> SelectTypeConstruct    {cons("SelectTypeConstruct")}

  TypeGuardStmt Block                                   -> TypeGuardStmtAndBlock  {cons("TypeGuardStmt_Block")}


%%R847
  ( SelectConstructName ':')?
  'SELECT' 'TYPE'
           '(' (AssociateName '=>')? Selector ')'   EOS -> SelectTypeStmt       {cons("SelectTypeStmt")}

%%848
  'TYPE'  'IS' '(' TypeSpec        ')' SelectConstructName? EOS -> TypeGuardStmt {cons("TypeGuardStmt_TYPE")}
  'CLASS' 'IS' '(' DerivedTypeSpec ')' SelectConstructName? EOS -> TypeGuardStmt {cons("TypeGuardStmt_CLASS")}
  'CLASS' 'DEFAULT'                    SelectConstructName? EOS -> TypeGuardStmt {cons("TypeGuardStmt_CLASS_DEF")}

%%R849
  'END' 'SELECT' SelectConstructName?               EOS -> EndSelectTypeStmt    {cons("EndSelectTypeStmt")}

%%R850
  Label? 'EXIT' ConstructName?                      EOS -> ExitStmt             {cons("ExitStmt")}


%% 8.2 Branching
%%

%%R851
  OptLabel 'GO' 'TO' LblRef                         EOS -> GotoStmt         {cons("GotoStmt")}

%%R852
%%       expr substituted for scalar-int-expr
%%
  OptLabel 'GO' 'TO' '(' {LblRef ','}+ ')'     Expr  EOS -> ComputedGotoStmt {cons("ComputedGotoStmt")}
  OptLabel 'GO' 'TO' '(' {LblRef ','}+ ')' ',' Expr  EOS -> ComputedGotoStmt {cons("ComputedGotoStmt")}

%%R853
%%       expr substituted for scalar-numeric-expr
%%
  OptLabel 'IF' '(' Expr ')' LblRef ',' LblRef ',' LblRef EOS -> ArithmeticIfStmt {cons("ArithmeticIfStmt")}


%% 8.3 Continue statement
%%

%%R854
  OptLabel 'CONTINUE'                               EOS -> ContinueStmt         {cons("ContinueStmt")}


%% 8.4 Stop and Error Stop statements
%%

%%R855
  OptLabel         'STOP' OptStopCode               EOS -> StopStmt             {cons("StopStmt")}

%%R856
  OptLabel 'ERROR' 'STOP' OptStopCode               EOS -> ErrorStopStmt        {cons("ErrorStopStmt")}

%%R857
%%        Expr substituted for scalar-default-char-constant-expr
%%        Expr substituted for scalar-int-constant-expr
%%
  Expr                                                  -> StopCode

  StopCode                                              -> OptStopCode
  % empty %                                             -> OptStopCode          {cons("no-stop-code")}

%% 8.5 Image execution control
%%

%%R858
  OptLabel 'SYNC' 'ALL' '(' {SyncStat ','}* ')'     EOS -> SyncAllStmt          {cons("SyncAllStmt")}
  OptLabel 'SYNC' 'ALL'    NoSyncStatList           EOS -> SyncAllStmt          {cons("SyncAllStmt")}

%%R859
  'STAT'   '=' StatVariable                             -> SyncStat             {cons("STAT")}
  'ERRMSG' '=' ErrmsgVariable                           -> SyncStat             {cons("ERRMSG")}

  ',' {SyncStat ','}+                                   -> OptSyncStatList      {cons("opt-list")}
  % empty %                                             -> OptSyncStatList      {cons("no-list")}
  % empty %                                             ->  NoSyncStatList      {cons("no-list")}

%%R860
  OptLabel 'SYNC' 'IMAGES'
         '(' ImageSet OptSyncStatList ')'           EOS -> SyncImagesStmt       {cons("SyncImagesStmt")}

%%R861
  IntExpr                                               -> ImageSet
  '*'                                                   -> ImageSet             {cons("STAR")}

%%R862
  OptLabel 'SYNC' 'MEMORY' '(' {SyncStat ','}* ')'  EOS -> SyncMemoryStmt       {cons("SyncMemoryStmt")}
  OptLabel 'SYNC' 'MEMORY'    NoSyncStatList        EOS -> SyncMemoryStmt       {cons("SyncMemoryStmt")}

%%R863
  OptLabel 'LOCK' '(' LockVariable
                      OptLockStatList ')'           EOS -> LockStmt             {cons("LockStmt")}

%%R864
  'ACQUIRED_LOCK' '=' LogicalVariable                   -> LockStat             {cons("ACQUIRED_LOCK")}
  SyncStat                                              -> LockStat

  ',' {LockStat ','}+                                   -> OptLockStatList      {cons("opt-list")}
  % empty %                                             -> OptLockStatList      {cons("no-list")}

%%R865
  OptLabel 'UNLOCK' '(' LockVariable
                        OptSyncStatList ')'         EOS -> UnlockStmt           {cons("UnlockStmt")}

%%R866
%%          variable substituted for scalar-variable
%%
  Variable                                              -> LockVariable

%% Deleted Statements
%%
  OptLabel 'PAUSE' OptStopCode                      EOS -> PauseStmt            {cons("PauseStmt")}


%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R9xx Input/Output Statements
%%%%%%%%%%

%%TODO-FiXME
%% already defined in R800 section:
%%  Icon  ->  LblRef


%% 9.5 File connection
%%

%%R901
%%         int-expr substituted for file-unit-number
%%         char-variable substituted for internal-file-variable
%%
  IntExpr                                        -> IoUnit
  '*'                                            -> IoUnit        {cons("STAR")}
  CharVariable                                   -> IoUnit

%%R902
%%         int-expr substituted for scalar-int-expr
%%
  IntExpr                                        -> FileUnitNumber

%%R903
  CharVariable                                   -> InternalFileVariable

%%R904
  OptLabel 'OPEN' '(' {ConnectSpec ','}+ ')' EOS -> OpenStmt      {cons("OpenStmt")}

%%R905
%%         default-char-expr substituted for scalar-default-char-expr
%%         int-variable substituted for scalar-int-variable
%%
                      FileUnitNumber             -> ConnectSpec   {cons("UNIT")}
  'UNIT'         '='  FileUnitNumber             -> ConnectSpec   {cons("UNIT")}
  'ACCESS'       '='  DefaultCharExpr            -> ConnectSpec   {cons("ACCESS")}
  'ACTION'       '='  DefaultCharExpr            -> ConnectSpec   {cons("ACTION")}
  'ASYNCHRONOUS' '='  DefaultCharExpr            -> ConnectSpec   {cons("ASYNC")}
  'BLANK'        '='  DefaultCharExpr            -> ConnectSpec   {cons("BLANK")}
  'DECIMAL'      '='  DefaultCharExpr            -> ConnectSpec   {cons("DECIMAL")}
  'DELIM'        '='  DefaultCharExpr            -> ConnectSpec   {cons("DELIM")}
  'ENCODING'     '='  DefaultCharExpr            -> ConnectSpec   {cons("ENCODING")}
  'ERR'          '='  LblRef                     -> ConnectSpec   {cons("ERR")}
  'FILE'         '='  FileNameExpr               -> ConnectSpec   {cons("FILE")}
  'FORM'         '='  DefaultCharExpr            -> ConnectSpec   {cons("FORM")}
  'IOMSG'        '='  IomsgVariable              -> ConnectSpec   {cons("IOMSG")}
  'IOSTAT'       '='  IntVariable                -> ConnectSpec   {cons("IOSTAT")}
  'NEWUNIT'      '='  IntVariable                -> ConnectSpec   {cons("NEWUNIT")}
  'PAD'          '='  DefaultCharExpr            -> ConnectSpec   {cons("PAD")}
  'POSITION'     '='  DefaultCharExpr            -> ConnectSpec   {cons("POSITION")}
  'RECL'         '='  IntExpr                    -> ConnectSpec   {cons("RECL")}
  'ROUND'        '='  DefaultCharExpr            -> ConnectSpec   {cons("ROUND")}
  'SIGN'         '='  DefaultCharExpr            -> ConnectSpec   {cons("SIGN")}
  'STATUS'       '='  DefaultCharExpr            -> ConnectSpec   {cons("STATUS")}
%%'TEAM'         '='  ImageTeam          %%TODO - is this in standard for F08?

%%R906
%%           default-char-expr substituted for scalar-default-char-expr
  DefaultCharExpr                               -> FileNameExpr

%%R907
%%           default-char-expr substituted for scalar-default-char-expr
  DefaultCharExpr                               -> IomsgVariable

%%R908
  Label? 'CLOSE' '(' CloseSpecList ')'     EOS -> CloseStmt      {cons("CloseStmt")}

%%R909
%%           default-char-expr substituted for scalar-default-char-expr
%%           int-variable substituted for scalar-int-variable
%%
                      FileUnitNumber            -> CloseSpec      {cons("CloseSpec_UNIT")}
  'UNIT'         '='  FileUnitNumber            -> CloseSpec      {cons("CloseSpec_UNIT")}
  'IOSTAT'       '='  IntVariable               -> CloseSpec      {cons("CloseSpec_IOSTAT")}
  'IOMSG'        '='  IomsgVariable             -> CloseSpec      {cons("CloseSpec_IOMSG")}
  'ERR'          '='  LblRef                    -> CloseSpec      {cons("CloseSpec_ERR")}
  'STATUS'       '='  DefaultCharExpr           -> CloseSpec      {cons("CloseSpec_STATUS")}
  {CloseSpec ','}+                              -> CloseSpecList  {cons("CloseSpecList")}


%% 9.6 Data transfer statements
%%

%%910
  Label? 'READ' '(' IoControlSpecList ')' InputItemList?    EOS -> ReadStmt  {cons("ReadStmt_ICSL")}
  Label? 'READ' Format              ( ',' InputItemList )?  EOS -> ReadStmt  {cons("ReadStmt_F")}

%%R911
  Label? 'WRITE' '(' IoControlSpecList ')' OutputItemList?  EOS -> WriteStmt {cons("WriteStmt")}

%%R912
  Label? 'PRINT' Format (',' OutputItemList )?              EOS -> PrintStmt {cons("PrintStmt")}

%%R913
%% TODO-F08  io-unit and format must be first and second (without {UNIT,FMT}=)
%%           default-char-expr substituted for scalar-default-char-expr
%%
                      IoUnit                      -> IoControlSpec  {cons("IoControlSpec_UNIT")}
  'UNIT'         '='  IoUnit                      -> IoControlSpec  {cons("IoControlSpec_UNIT")}
                      Format                      -> IoControlSpec  {cons("IoControlSpec_FMT")}
  'FMT'          '='  Format                      -> IoControlSpec  {cons("IoControlSpec_FMT")}
                      NamelistGroupName           -> IoControlSpec  {cons("IoControlSpec_NML")}
  'NML'          '='  NamelistGroupName           -> IoControlSpec  {cons("IoControlSpec_NML")}
  'ADVANCE'      '='  DefaultCharExpr             -> IoControlSpec  {cons("IoControlSpec_ADVANCE")}
  'ASYNCHRONOUS' '='  DefaultCharExpr             -> IoControlSpec  {cons("IoControlSpec_ASYNC")}
  'BLANK'        '='  DefaultCharExpr             -> IoControlSpec  {cons("IoControlSpec_BLANK")}
  'DECIMAL'      '='  DefaultCharExpr             -> IoControlSpec  {cons("IoControlSpec_DECIMAL")}
  'DELIM'        '='  DefaultCharExpr             -> IoControlSpec  {cons("IoControlSpec_DELIM")}
  'END'          '='  LblRef                      -> IoControlSpec  {cons("IoControlSpec_END")}
  'EOR'          '='  LblRef                      -> IoControlSpec  {cons("IoControlSpec_EOR")}
  'ERR'          '='  LblRef                      -> IoControlSpec  {cons("IoControlSpec_ERR")}
  'ID'           '='  IdVariable                  -> IoControlSpec  {cons("IoControlSpec_ID")}
  'IOMSG'        '='  IomsgVariable               -> IoControlSpec  {cons("IoControlSpec_IOMSG")}
  'IOSTAT'       '='  IntVariable                 -> IoControlSpec  {cons("IoControlSpec_IOSTAT")}
  'PAD'          '='  DefaultCharExpr             -> IoControlSpec  {cons("IoControlSpec_PAD")}
  'POS'          '='  Expr                        -> IoControlSpec  {cons("IoControlSpec_POS")}
  'REC'          '='  Expr                        -> IoControlSpec  {cons("IoControlSpec_REC")}
  'ROUND'        '='  DefaultCharExpr             -> IoControlSpec  {cons("IoControlSpec_ROUND")}
  'SIGN'         '='  DefaultCharExpr             -> IoControlSpec  {cons("IoControlSpec_SIGN")}
  'SIZE'         '='  IntVariable                 -> IoControlSpec  {cons("IoControlSpec_SIZE")}

  {IoControlSpec ','}+                            -> IoControlSpecList {cons("IoControlSpecList")}

%%R914
  IntVariable                                     -> IdVariable     {cons("IdVariable")}

%%R915
  DefaultCharExpr                                 -> Format         {cons("Format_DCE")}
  Label                                           -> Format         {cons("Format_L")}
  '*'                                             -> Format         {cons("Format_STAR")}

%%R916
  Variable                                        -> InputItem      {cons("InputItem_V")}
  IoImpliedDo                                     -> InputItem      {cons("InputItem_IID")}
  {InputItem ','}+                                -> InputItemList  {cons("InputItemList")}

%%R917
  Expr                                            -> OutputItem     {cons("OutputItem_E")}
  IoImpliedDo                                     -> OutputItem     {cons("OutputItem_IID")}
  {OutputItem ','}+                               -> OutputItemList {cons("OutputItemList")}

%%R918
  '('
      IoImpliedDoObjectList ',' IoImpliedDoControl
  ')'                                             -> IoImpliedDo    {cons("IoImpliedDo")}

%%R919
  InputItem                                       -> IoImpliedDoObject     {cons("IoImpliedDoObject_II")}
  OutputItem                                      -> IoImpliedDoObject     {cons("IoImpliedDoObject_OI")}
  {IoImpliedDoObject ','}+                        -> IoImpliedDoObjectList {cons("IoImpliedDoObjectList")}

%%R920
  DoVariable '=' IntExpr  ','
                 IntExpr (',' IntExpr)?           -> IoImpliedDoControl {cons("IoImpliedDoControl")}

%% 9.7 Waiting on pending data transfer
%%

%%R922
  OptLabel 'WAIT' '(' {WaitSpec ','}+ ')'           EOS -> WaitStmt       {cons("WaitStmt")}

%%R923
%%           int-expr substituted for scalar-int-expr
%%           int-variable substituted for scalar-int-variable
%%

                FileUnitNumber                          -> WaitSpec       {cons("UNIT")}
  'UNIT'   '='  FileUnitNumber                          -> WaitSpec       {cons("UNIT")}
  'END'    '='  LblRef                                  -> WaitSpec       {cons("END")}
  'EOR'    '='  LblRef                                  -> WaitSpec       {cons("EOR")}
  'ERR'    '='  LblRef                                  -> WaitSpec       {cons("ERR")}
  'ID'     '='  IntExpr                                 -> WaitSpec       {cons("ID")}
  'IOMSG'  '='  IomsgVariable                           -> WaitSpec       {cons("IOMSG")}
  'IOSTAT' '='  IntExpr                                 -> WaitSpec       {cons("IOSTAT")}


%% 9.8 File positioning statements
%%

%%R924
  Label? 'BACKSPACE' FileUnitNumber                EOS -> BackspaceStmt   {cons("BackspaceStmt_FUN")}
  Label? 'BACKSPACE' '(' {PositionSpec ','}+ ')'   EOS -> BackspaceStmt   {cons("BackspaceStmt_PSL")}

%%R925
  Label? 'END' 'FILE' FileUnitNumber               EOS -> EndfileStmt     {cons("EndfileStmt_FUN")}
  Label? 'END' 'FILE' '(' {PositionSpec ','}+ ')'  EOS -> EndfileStmt     {cons("EndfileStmt_PSL")}

%%R926
  OptLabel 'REWIND' FileUnitNumber                 EOS -> RewindStmt      {cons("rewind-unit-stmt")}
  OptLabel 'REWIND' '(' {PositionSpec ','}+ ')'    EOS -> RewindStmt      {cons("RewindStmt")}

%%R927
                 FileUnitNumber                        -> PositionSpec    {cons("UNIT")}
  'UNIT'    '='  FileUnitNumber                        -> PositionSpec    {cons("UNIT")}
  'IOSTAT'  '='  IntVariable                           -> PositionSpec    {cons("IOSTAT")}
  'IOMSG'   '='  IomsgVariable                         -> PositionSpec    {cons("IOMSG")}
  'ERR'     '='  LblRef                                -> PositionSpec    {cons("ERR")}


%% 9.9 FLUSH statement
%%

%%R928
  Label? 'FLUSH' FileUnitNumber                     EOS -> FlushStmt      {cons("FlushStmt_FUN")}
  Label? 'FLUSH' '(' FlushSpecList ')'              EOS -> FlushStmt      {cons("FlushStmt_FSL")}

%%R929
%%           int-variable substituted for scalar-int-variable
%%
                 FileUnitNumber                         -> FlushSpec      {cons("FlushSpec_UNIT")}
  'UNIT'    '='  FileUnitNumber                         -> FlushSpec      {cons("FlushSpec_UNIT")}
  'IOSTAT'  '='  IntVariable                            -> FlushSpec      {cons("FlushSpec_IOSTAT")}
  'IOMSG'   '='  IomsgVariable                          -> FlushSpec      {cons("FlushSpec_IOMSG")}
  'ERR'     '='  LblRef                                 -> FlushSpec      {cons("FlushSpec_ERR")}
  {FlushSpec ','}+                                      -> FlushSpecList  {cons("FlushSpecList")}


%% 9.10 File inquiry statement
%%

%%R930
%%           int-variable substituted for scalar-int-variable
%%
  Label? 'INQUIRE' '(' InquireSpecList ')'          EOS -> InquireStmt {cons("InquireStmt_ISL")}
  Label? 'INQUIRE' '(' 'IOLENGTH' '=' IntVariable ')' OutputItemList
                                                    EOS -> InquireStmt {cons("InquireStmt_IV")}

%%R931
%%           default-char-expr substituted for scalar-default-char-expr
%%           logical-variable substituted for scalar-logical-variable
%%           int-variable substituted for scalar-int-variable
%%
                      FileUnitNumber                   -> InquireSpec  {cons("InquireSpec_UNIT")} 
  'UNIT'         '='  FileUnitNumber                   -> InquireSpec  {cons("InquireSpec_UNIT")} 
  'FILE'         '='  FileNameExpr                     -> InquireSpec  {cons("InquireSpec_FILE")}  
  'ACCESS'       '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_ACCESS")}  
  'ACTION'       '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_ACTION")}  
  'ASYNCHRONOUS' '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_ASYNC")}  
  'BLANK'        '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_BLANK")}  
  'DECIMAL'      '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_DECIMAL")}  
  'DELIM'        '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_DELIM")}  
  'DIRECT'       '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_DIRECT")}  
  'ENCODING'     '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_ENCODING")}  
  'ERR'          '='  LblRef                           -> InquireSpec  {cons("InquireSpec_ERR")}  
  'EXIST '       '='  LogicalVariable                  -> InquireSpec  {cons("InquireSpec_EXIST")}  
  'FORM'         '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_FORM")}  
  'FORMATTED'    '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_FORMATTED")}
  'ID'           '='  IntExpr                          -> InquireSpec  {cons("InquireSpec_ID")}  
  'IOMSG'        '='  IomsgVariable                    -> InquireSpec  {cons("InquireSpec_IOMSG")}  
  'IOSTAT'       '='  IntVariable                      -> InquireSpec  {cons("InquireSpec_IOSTAT")}  
  'NAME'         '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_NAME")}  
  'NAMED'        '='  LogicalVariable                  -> InquireSpec  {cons("InquireSpec_NAMED")}  
  'NEXTREC'      '='  IntVariable                      -> InquireSpec  {cons("InquireSpec_NEXTREC")}  
  'NUMBER'       '='  IntVariable                      -> InquireSpec  {cons("InquireSpec_NUMBER")}  
  'OPENED'       '='  LogicalVariable                  -> InquireSpec  {cons("InquireSpec_OPENED")}  
  'PAD'          '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_PAD")}  
  'PENDING'      '='  LogicalVariable                  -> InquireSpec  {cons("InquireSpec_PENDING")}  
  'POS'          '='  IntVariable                      -> InquireSpec  {cons("InquireSpec_POS")}  
  'POSITION'     '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_POSITION")}  
  'READ'         '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_READ")}  
  'READWRITE'    '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_READWRITE")}  
  'RECL'         '='  IntVariable                      -> InquireSpec  {cons("InquireSpec_RECL")}  
  'ROUND'        '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_ROUND")}  
  'SEQUENTIAL '  '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_SEQUENTIAL")}  
  'SIGN'         '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_SIGN")}  
  'SIZE'         '='  IntVariable                      -> InquireSpec  {cons("InquireSpec_SIZE")}  
  'STREAM'       '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_STREAM")}  
%%'TEAM'         '='  ImageTeam          %%TODO-F08
  'UNFORMATTED'  '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_UNFORMATTED")}  
  'WRITE'        '='  DefaultCharExpr                  -> InquireSpec  {cons("InquireSpec_WRITE")}

  {InquireSpec ','}+                                   -> InquireSpecList {cons("InquireSpecList")}

      
%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R10xx Input/Output Editing
%%%%%%%%%


%% 10.2 Explicit format specification methods
%%

%%R1001
  Label 'FORMAT' FormatSpecification            EOS -> FormatStmt           {cons("FormatStmt")}

%%R1002
  '(' ( FormatItems    )?                     ')'   -> FormatSpecification  {cons("FormatSpecification_0")}
  '(' ( FormatItems ',')? UnlimitedFormatItem ')'   -> FormatSpecification  {cons("FormatSpecification_UFI")}


%% 10.3 Form of a format item list
%%

%%R1003
  FormatItem                                        -> FormatItems          {cons("FormatItems_0")}
  FormatItems ',' FormatItem                        -> FormatItems          {cons("FormatItems_FIs")}
  FormatItems     FormatItem                        -> FormatItems          {cons("FormatItems_FIs")}

%%R1004
%% Icon substituted for int-literal-constant
%% Scon substituted for char-literal-constant
  Icon? DataEditDesc                                -> FormatItem           {cons("FormatItem_RED")}
  ControlEditDesc                                   -> FormatItem           {cons("FormatItem_CED")}
  Scon                                              -> FormatItem           {cons("FormatItem_CSED")}
  Icon? '(' FormatItems ')'                         -> FormatItem           {cons("FormatItem_FIs")}

%%R1005
  '*' '(' FormatItems ')'                           -> UnlimitedFormatItem  {cons("UnlimitedFormatItem")}

%%R1006
%% Icon substituted for int-literal-constant
  Icon                                              -> REditDesc            {cons("R")}

%%R1007
%% Icon substituted for int-literal-constant
%% Scon substituted for char-literal-constant
%%
  'I'  Icon ('.' Icon)?                 -> DataEditDesc         {cons("DataEditDesc_I")}
  'B'  Icon ('.' Icon)?                 -> DataEditDesc         {cons("DataEditDesc_B")}
  'O'  Icon ('.' Icon)?                 -> DataEditDesc         {cons("DataEditDesc_O")}
  'Z'  Icon ('.' Icon)?                 -> DataEditDesc         {cons("DataEditDesc_Z")}
  'F'  Icon  '.' Icon                   -> DataEditDesc         {cons("DataEditDesc_F")}
  'E'  Icon  '.' Icon ('E' Icon)?       -> DataEditDesc         {cons("DataEditDesc_E")}
  'EN' Icon  '.' Icon ('E' Icon)?       -> DataEditDesc         {cons("DataEditDesc_EN")}
  'ES' Icon  '.' Icon ('E' Icon)?       -> DataEditDesc         {cons("DataEditDesc_ES")}
  'G'  Icon  '.' Icon ('E' Icon)?       -> DataEditDesc         {cons("DataEditDesc_GE")}
  'G'  Icon                             -> DataEditDesc         {cons("DataEditDesc_G")}
  'L'  Icon                             -> DataEditDesc         {cons("DataEditDesc_L")}
  'A'  Icon?                            -> DataEditDesc         {cons("DataEditDesc_A")}
  'D'  Icon  '.' Icon                   -> DataEditDesc         {cons("DataEditDesc_D")}
  'DT' Scon? ( '(' VEditDescList ')' )? -> DataEditDesc         {cons("DataEditDesc_DT")}

%%R1008
  Icon                                  -> WEditDesc            {cons("W")}

%%R1009
  Icon                                  -> MEditDesc            {cons("M")}

%%R1010
  Icon                                  -> DEditDesc            {cons("D")}

%%R1011
  Icon                                  -> EEditDesc            {cons("E")}

%%R1012
  Icon                                  -> VEditDesc            {cons("V")}
  {Icon ','}+                           -> VEditDescList        {cons("VEditDescList")}

%%R1013
%% Icon substituted for int-literal-constant
  PositionEditDesc                      -> ControlEditDesc      {cons("ControlEditDesc_PED")}
  Icon? '/'                             -> ControlEditDesc      {cons("ControlEditDesc_SLASH")}
  ':'                                   -> ControlEditDesc      {cons("ControlEditDesc_COLON")}
  SignEditDesc                          -> ControlEditDesc      {cons("ControlEditDesc_SED")}
  SignedIntLiteralConstant 'P'          -> ControlEditDesc      {cons("ControlEditDesc_P")}
  BlankInterpEditDesc                   -> ControlEditDesc      {cons("ControlEditDesc_BIED")}
  RoundEditDesc                         -> ControlEditDesc      {cons("ControlEditDesc_RED")}
  DecimalEditDesc                       -> ControlEditDesc      {cons("ControlEditDesc_DED")}

%%R1014
  SignedIntLiteralConstant              -> KEditDesc            {cons("K")}

%%R1015
%% Icon substituted for int-literal-constant
  'T'  Icon                        -> PositionEditDesc     {cons("PositionEditDesc_T")}
  'TL' Icon                        -> PositionEditDesc     {cons("PositionEditDesc_TL")}
  'TR' Icon                        -> PositionEditDesc     {cons("PositionEditDesc_TR")}
       Icon 'X'                    -> PositionEditDesc     {cons("PositionEditDesc_X")}

%%R1016
  Icon                                  -> NEditDesc            {cons("N")}

%%R1017
  'SS'                                  -> SignEditDesc         {cons("SignEditDesc_SS")}
  'SP'                                  -> SignEditDesc         {cons("SignEditDesc_SP")}
  'S'                                   -> SignEditDesc         {cons("SignEditDesc_S")}

%%R1018
  'BN'                                  -> BlankInterpEditDesc  {cons("BlonkInterpEditDesc_BN")}
  'BZ'                                  -> BlankInterpEditDesc  {cons("BlonkInterpEditDesc_BZ")}

%%R1019
  'RU'                                  -> RoundEditDesc        {cons("RoundEditDesc_RU")}
  'RD'                                  -> RoundEditDesc        {cons("RoundEditDesc_RD")}
  'RZ'                                  -> RoundEditDesc        {cons("RoundEditDesc_RZ")}
  'RN'                                  -> RoundEditDesc        {cons("RoundEditDesc_RN")}
  'RC'                                  -> RoundEditDesc        {cons("RoundEditDesc_RC")}
  'RP'                                  -> RoundEditDesc        {cons("RoundEditDesc_RP")}

%%R1020
  'DC'                                  -> DecimalEditDesc      {cons("DecimalEditDesc_DC")}
  'DP'                                  -> DecimalEditDesc      {cons("DecimalEditDesc_DP")}

%%R1021
  Scon                                  -> CharStringEditDesc   {cons("CharStringEditDesc")}


%%%%%%%%%%
%% ISO/IEC 1539:1991 section R2xx Fortran terms and concepts
%%%%%%%%%%

%% Identifier aliases
%%

  Ident   -> AncestorModuleName        {cons("AncestorModuleName")}
  Ident   -> ParentSubmoduleName       {cons("ParentSubmoduleName")}
  Ident   -> SubmoduleName             {cons("SubmoduleName")}

%%R201 JD: the optional StartCommentBlock is needed to parse comment lines in 1st lines of a file.
%% original: ExecutableProgram ProgramUnit -> ExecutableProgram

%%R201
  OptStartCommentBlock  ProgramUnit+     -> Program               {cons("Program")}

  StartCommentBlock                      -> OptStartCommentBlock
  % empty %                              -> OptStartCommentBlock  {cons("no-comments")}

%%R202
  MainProgram                            -> ProgramUnit
  ExternalSubprogram                     -> ProgramUnit
  Module                                 -> ProgramUnit
  Submodule                              -> ProgramUnit
  BlockData                              -> ProgramUnit

%%R203
  FunctionSubprogram                     -> ExternalSubprogram
  SubroutineSubprogram                   -> ExternalSubprogram
  
%%R204
  UseStmt*
  ImportStmt*
  OptImplicitPart
  DeclarationConstruct*                  -> SpecificationPart   {cons("SpecificationPart")}

%%R205
  ImplicitPartStmt* ImplicitStmt         -> ImplicitPart        {cons("ImplicitPart")}

  ImplicitPart                           -> OptImplicitPart
  % empty %                              -> OptImplicitPart     {cons("no-implicit-part")}

%%R206
  ImplicitStmt                           -> ImplicitPartStmt
  ParameterStmt                          -> ImplicitPartStmt
  FormatStmt                             -> ImplicitPartStmt
  EntryStmt                              -> ImplicitPartStmt

%%R207
  DerivedTypeDef                         -> DeclarationConstruct
  EntryStmt                              -> DeclarationConstruct
  EnumDef                                -> DeclarationConstruct
  FormatStmt                             -> DeclarationConstruct
  InterfaceBlock                         -> DeclarationConstruct
  ParameterStmt                          -> DeclarationConstruct
  ProcedureDeclarationStmt               -> DeclarationConstruct
  OtherSpecificationStmt                 -> DeclarationConstruct
  TypeDeclarationStmt                    -> DeclarationConstruct
  StmtFunctionStmt                       -> DeclarationConstruct

%%R208
%%     WARNING-MODIFICATION:
%%       Removed the leading ExecutableConstruct to allow an empty list to
%%       be an ExecutionPart.  Check order of statements in a separate stage.
%%
  ExecutionPartConstruct*                -> ExecutionPart             {cons("ExecutionPart")}

%%R209
  ExecutableConstruct                    -> ExecutionPartConstruct
  FormatStmt                             -> ExecutionPartConstruct
  EntryStmt                              -> ExecutionPartConstruct
  DataStmt                               -> ExecutionPartConstruct

%%R210
  ContainsStmt InternalSubprogram*       -> InternalSubprogramPart    {cons("SubprogramPart")}

  InternalSubprogramPart                 -> OptInternalSubprogramPart
  % empty %                              -> OptInternalSubprogramPart {cons("no-subprogram-part")}

%%R211
  FunctionSubprogram                     -> InternalSubprogram
  SubroutineSubprogram                   -> InternalSubprogram

%%R212
  AccessStmt                             -> OtherSpecificationStmt
  AllocatableStmt                        -> OtherSpecificationStmt
  AsynchronousStmt                       -> OtherSpecificationStmt
  BindStmt                               -> OtherSpecificationStmt
  CodimensionStmt                        -> OtherSpecificationStmt
  ContiguousStmt                         -> OtherSpecificationStmt
  CommonStmt                             -> OtherSpecificationStmt
  DataStmt                               -> OtherSpecificationStmt
  DimensionStmt                          -> OtherSpecificationStmt
  EquivalenceStmt                        -> OtherSpecificationStmt
  ExternalStmt                           -> OtherSpecificationStmt
  IntentStmt                             -> OtherSpecificationStmt
  IntrinsicStmt                          -> OtherSpecificationStmt
  NamelistStmt                           -> OtherSpecificationStmt
  OptionalStmt                           -> OtherSpecificationStmt
  PointerStmt                            -> OtherSpecificationStmt
  ProtectedStmt                          -> OtherSpecificationStmt
  SaveStmt                               -> OtherSpecificationStmt
  TargetStmt                             -> OtherSpecificationStmt
  VolatileStmt                           -> OtherSpecificationStmt
  ValueStmt                              -> OtherSpecificationStmt

%%R213
%%     WARNING-MODIFICATION:
%%       do-construct is problematic because a labeled statement may terminate it
%%          not necessarily an end-do-stmt.  Replace by do-stmt and end-do-stmt and
%%          resolve the construct end at a latter stage.
%%
  ActionStmt                             -> ExecutableConstruct
  AssociateConstruct                     -> ExecutableConstruct
  BlockConstruct                         -> ExecutableConstruct
  CaseConstruct                          -> ExecutableConstruct
  CriticalConstruct                      -> ExecutableConstruct
%%DoConstruct          %% Ambiguous - placed related statements in action-stmt
  ForallConstruct                        -> ExecutableConstruct
  IfConstruct                            -> ExecutableConstruct
  SelectTypeConstruct                    -> ExecutableConstruct
  WhereConstruct                         -> ExecutableConstruct

%%R214
%%TODO-REMOVE  AssignStmt
%%TODO-REMOVE  AssignedGotoStmt
%%TODO-REMOVE  StmtFunctionStmt  %% see R1226 comment
%%TODO-REMOVE  AllstopStmt
  AllocateStmt                           -> ActionStmt
  AssignmentStmt                         -> ActionStmt
  BackspaceStmt                          -> ActionStmt
  CallStmt                               -> ActionStmt
  CloseStmt                              -> ActionStmt
  ContinueStmt                           -> ActionStmt
  CycleStmt                              -> ActionStmt
  DeallocateStmt                         -> ActionStmt
  EndFunctionStmt                        -> ActionStmt
  EndMpSubprogramStmt                    -> ActionStmt
  EndProgramStmt                         -> ActionStmt
  EndSubroutineStmt                      -> ActionStmt
  EndfileStmt                            -> ActionStmt
  ErrorStopStmt                          -> ActionStmt
  ExitStmt                               -> ActionStmt
  FlushStmt                              -> ActionStmt
  ForallStmt                             -> ActionStmt
  GotoStmt                               -> ActionStmt
  IfStmt                                 -> ActionStmt
  InquireStmt                            -> ActionStmt
  LockStmt                               -> ActionStmt
  NullifyStmt                            -> ActionStmt
  OpenStmt                               -> ActionStmt
  PointerAssignmentStmt                  -> ActionStmt
  PrintStmt                              -> ActionStmt
  ReadStmt                               -> ActionStmt
  ReturnStmt                             -> ActionStmt
  RewindStmt                             -> ActionStmt
  StopStmt                               -> ActionStmt
  SyncAllStmt                            -> ActionStmt
  SyncImagesStmt                         -> ActionStmt
  SyncMemoryStmt                         -> ActionStmt
  UnlockStmt                             -> ActionStmt
  WaitStmt                               -> ActionStmt
  WhereStmt                              -> ActionStmt
  WriteStmt                              -> ActionStmt
  ArithmeticIfStmt                       -> ActionStmt
  ComputedGotoStmt                       -> ActionStmt
%% Following added as replacement for DoConstruct (because ambiguous)
  LabelDoStmt                            -> ActionStmt
  NonlabelDoStmt                         -> ActionStmt
  EndDoStmt                              -> ActionStmt
%% Deleted features
  PauseStmt                              -> ActionStmt

%%215
  Name                                   -> Keyword
  % empty %                              -> NoKeyword   {cons("no-keyword")}

%%R1101
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%       ExecutionPart modified so it can be an empty list, thus it is not optional.
%%
  OptProgramStmt
    SpecificationPart
    ExecutionPart
    OptInternalSubprogramPart
  EndProgramStmt                               -> MainProgram      {cons("MainProgram")}

  ProgramStmt                                  -> OptProgramStmt
  % empty %                                    -> OptProgramStmt   {cons("no-program-stmt")}

%%R1102
  OptLabel 'PROGRAM' ProgramName           EOS -> ProgramStmt      {cons("ProgramStmt")}

%%R1103
  OptLabel 'END'            NoProgramName  EOS -> EndProgramStmt   {cons("EndProgramStmt")}
  OptLabel 'END' 'PROGRAM' OptProgramName  EOS -> EndProgramStmt   {cons("EndProgramStmt")}

  Ident                                        -> ProgramName
  % empty %                                    -> NoProgramName    {cons("no-program-name")}
  % empty %                                    -> OptProgramName   {cons("no-program-name")}
  ProgramName                                  -> OptProgramName

%%R1104
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  ModuleStmt
    SpecificationPart
    OptModuleSubprogramPart
  EndModuleStmt                                -> Module           {cons("Module")}

%%R1105
  OptLabel 'MODULE' ModuleName             EOS -> ModuleStmt       {cons("ModuleStmt")}

%%R1106
  OptLabel 'END'           NoModuleName    EOS -> EndModuleStmt    {cons("EndModuleStmt")}
  OptLabel 'END' 'MODULE' OptModuleName    EOS -> EndModuleStmt    {cons("EndModuleStmt")}

  Ident                                        -> ModuleName
  % empty %                                    -> NoModuleName     {cons("no-module-name")}
  % empty %                                    -> OptModuleName    {cons("no-module-name")}
  ModuleName                                   -> OptModuleName

%%R1107
  ContainsStmt ModuleSubprogram*               -> ModuleSubprogramPart     {cons("ModuleSubprogramPart")}

  ModuleSubprogramPart                         -> OptModuleSubprogramPart
  % empty %                                    -> OptModuleSubprogramPart  {cons("no-module-subprogram-part")}

%%R1108
  FunctionSubprogram                           -> ModuleSubprogram
  SubroutineSubprogram                         -> ModuleSubprogram
  SeparateModuleSubprogram                     -> ModuleSubprogram

%%R1109
%% Note: ofp-simplify strategy used to combine the rename and only list combinations
%%
  OptLabel 'USE'  NoModuleNature      ModuleName NoRenameList  EOS -> UseStmt {cons("UseStmt")}
  OptLabel 'USE'  NoModuleNature      ModuleName OptRenameList EOS -> UseStmt {cons("UseStmt")}
  OptLabel 'USE' OptModuleNature '::' ModuleName NoRenameList  EOS -> UseStmt {cons("UseStmt")}
  OptLabel 'USE' OptModuleNature '::' ModuleName OptRenameList EOS -> UseStmt {cons("UseStmt")}

  OptLabel 'USE'  NoModuleNature      ModuleName OptOnlyList   EOS -> UseStmt {cons("UseOnlyStmt")}
  OptLabel 'USE' OptModuleNature '::' ModuleName OptOnlyList   EOS -> UseStmt {cons("UseOnlyStmt")}

  ',' ModuleNature                             -> OptModuleNature {cons("opt-module-nature")}
  NoModuleNature                               -> OptModuleNature
  % empty %                                    -> NoModuleNature  {cons("no-module-nature")}

  % empty %                                    -> NoRenameList    {cons("no-list")}
  ',' {Rename ','}+                            -> OptRenameList   {cons("opt-list")}
  ',' 'ONLY' ':' {Only ','}*                   -> OptOnlyList     {cons("opt-list")}

%%R1110
  'INTRINSIC'                                  -> ModuleNature    {cons("INTRINSIC")}
  'NON_INTRINSIC'                              -> ModuleNature    {cons("NON_INTRINSIC")}

%%R1111
  LocalName
     '=>' UseName                              -> Rename      {cons("Rename")}
  'OPERATOR' '(' LocalDefinedOperator ')'
     '=>'
  'OPERATOR' '(' UseDefinedOperator   ')'      -> Rename      {cons("RenameOp")}

  Ident                                        -> UseName
  Ident                                        -> LocalName

%%R1112
  GenericSpec                                  -> Only
%%OnlyUseName                                  -> Only %AMBIGUOUS with GenericName in GenericSpec
  Rename                                       -> Only

%%R1113
  Ident                                        -> OnlyUseName {cons("OnlyUseName")}

%%R1114
  DefinedUnaryOp                               -> LocalDefinedOperator  {cons("LocalDefinedOperator_DUO")}
  DefinedBinaryOp                              -> LocalDefinedOperator  {cons("LocalDefinedOperator_DBO")}

%%R1115
  DefinedUnaryOp                               -> UseDefinedOperator    {cons("UseDefinedOperator_DUO")}
  DefinedBinaryOp                              -> UseDefinedOperator    {cons("UseDefinedOperator_DBO")}

%%R1116
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  SubmoduleStmt
    SpecificationPart
    ModuleSubprogramPart?
  EndSubmoduleStmt                             -> Submodule         {cons("Submodule")}

%%R1117
  Label? 'SUBMODULE' '(' ParentIdentifier ')'
         SubmoduleName                       EOS -> SubmoduleStmt     {cons("SubmoduleStmt")}

%%R1118
  AncestorModuleName (':' ParentSubmoduleName)?  -> ParentIdentifier  {cons("ParentIdentifier")}

%%R1119
  Label? 'END' ('SUBMODULE' SubmoduleName?)? EOS -> EndSubmoduleStmt  {cons("EndSubmoduleStmt")}

%%R1120
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  BlockDataStmt
    SpecificationPart
  EndBlockDataStmt                                   -> BlockData         {cons("BlockData")}

%%R1121
  OptLabel 'BLOCK' 'DATA' OptBlockDataName       EOS -> BlockDataStmt     {cons("BlockDataStmt")}

%%R1122
  OptLabel 'END' 'BLOCK' 'DATA' OptBlockDataName EOS -> EndBlockDataStmt  {cons("EndBlockDataStmt")}
  OptLabel 'END'                 NoBlockDataName EOS -> EndBlockDataStmt  {cons("EndBlockDataStmt")}

  BlockDataName                                      -> OptBlockDataName
  % empty %                                          -> OptBlockDataName  {cons("no-block-data-name")}
  % empty %                                          ->  NoBlockDataName  {cons("no-block-data-name")}
  Ident                                              ->    BlockDataName

%%context-free priorities
%%
%%   OnlyUseName -> Only  {cons("Only_OUN")}
%% > GenericSpec -> Only  {cons("Only_GS")}

      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section 12xx Procedures section
%%%%%%%%%%

%%R1201
  InterfaceStmt
    InterfaceSpecification*
  EndInterfaceStmt                -> InterfaceBlock          {cons("InterfaceBlock")}

%%R1202
  InterfaceBody                   -> InterfaceSpecification
  ProcedureStmt                   -> InterfaceSpecification

%%R1203
  OptLabel 'INTERFACE' OptGenericSpec              EOS -> InterfaceStmt     {cons("InterfaceStmt")}
  OptLabel 'ABSTRACT' 'INTERFACE'                  EOS -> InterfaceStmt     {cons("AbstractInterfaceStmt")}
      
%%R1204
  OptLabel 'END' 'INTERFACE' OptGenericSpec        EOS -> EndInterfaceStmt  {cons("EndInterfaceStmt")}

  GenericSpec                                          -> OptGenericSpec
  % empty %                                            -> OptGenericSpec    {cons("no-generic-spec")}

%%R1205
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  FunctionStmt   SpecificationPart EndFunctionStmt     -> InterfaceBody  {cons("InterfaceBody")}
  SubroutineStmt SpecificationPart EndSubroutineStmt   -> InterfaceBody  {cons("InterfaceBody")}

%%R1206
  OptLabel 'MODULE' 'PROCEDURE' '::' {ProcedureName ','}+ EOS -> ProcedureStmt  {cons("ModuleProcedureStmt")}
  OptLabel 'MODULE' 'PROCEDURE'      {ProcedureName ','}+ EOS -> ProcedureStmt  {cons("ModuleProcedureStmt")}
  OptLabel          'PROCEDURE' '::' {ProcedureName ','}+ EOS -> ProcedureStmt  {cons("ProcedureStmt")}
  OptLabel          'PROCEDURE'      {ProcedureName ','}+ EOS -> ProcedureStmt  {cons("ProcedureStmt")}

  Ident                            -> ProcedureName
  % empty %                        -> NoProcedureName  {cons("no-procedure-name")}

%%R1207
  GenericName                                   -> GenericSpec
  'OPERATOR'   '(' DefinedOperator ')'          -> GenericSpec           {cons("OPERATOR")}
  'ASSIGNMENT' '(' '='             ')'          -> GenericSpec           {cons("ASSIGNMENT")}
  DefinedIoGenericSpec                          -> GenericSpec

  Ident                                         -> GenericName

%%R1208
  'READ'  '(' 'FORMATTED'   ')'                 -> DefinedIoGenericSpec   {cons("READ_FORMATTED")}
  'READ'  '(' 'UNFORMATTED' ')'                 -> DefinedIoGenericSpec   {cons("READ_UNFORMATTED")}
  'WRITE' '(' 'FORMATTED'   ')'                 -> DefinedIoGenericSpec   {cons("WRITE_FORMATTED")}
  'WRITE' '(' 'UNFORMATTED' ')'                 -> DefinedIoGenericSpec   {cons("WRITE_UNFORMATTED")}

%%R1209
  OptLabel 'IMPORT' '::' {ImportName ','}+  EOS -> ImportStmt        {cons("ImportStmt")}
  OptLabel 'IMPORT'      {ImportName ','}*  EOS -> ImportStmt        {cons("ImportStmt")}

  Ident                                         -> ImportName

%%R1210
  OptLabel 'EXTERNAL' '::' {ExternalName ','}+  EOS -> ExternalStmt  {cons("ExternalStmt")}
  OptLabel 'EXTERNAL'      {ExternalName ','}+  EOS -> ExternalStmt  {cons("ExternalStmt")}

  Ident                                             -> ExternalName

%%R1211
  OptLabel 'PROCEDURE' '(' OptProcInterface ')'
                           NoProcAttrSpecList
                           {ProcDecl ','}+ EOS -> ProcedureDeclarationStmt {cons("ProcedureDeclarationStmt")}
  OptLabel 'PROCEDURE' '(' OptProcInterface ')'
                           OptProcAttrSpecList
                      '::' {ProcDecl ','}+ EOS -> ProcedureDeclarationStmt {cons("ProcedureDeclarationStmt")}

%%R1212
  InterfaceName                                -> ProcInterface
  DeclarationTypeSpec                          -> ProcInterface

  ProcInterface                                -> OptProcInterface
  % empty %                                    -> OptProcInterface        {cons("no-proc-interface")}

%%R1213
  AccessSpec                                   -> ProcAttrSpec
  ProcLanguageBindingSpec                      -> ProcAttrSpec
  'INTENT' '(' IntentSpec ')'                  -> ProcAttrSpec            {cons("INTENT")}
  'OPTIONAL'                                   -> ProcAttrSpec            {cons("OPTIONAL")}
  'POINTER'                                    -> ProcAttrSpec            {cons("POINTER")}
  'SAVE'                                       -> ProcAttrSpec            {cons("SAVE")}

  ',' {ProcAttrSpec ','}+                      -> OptProcAttrSpecList     {cons("opt-list")}
  % empty %                                    -> OptProcAttrSpecList     {cons("no-list")}
  % empty %                                    -> NoProcAttrSpecList      {cons("no-list")}

%%R1214
  ProcedureEntityName      NoProcPointerInit   -> ProcDecl                {cons("ProcDecl")}
  ProcedureEntityName '=>' ProcPointerInit     -> ProcDecl                {cons("ProcDecl")}
  Ident                                        -> ProcedureEntityName

%%R1215
  Ident                                        -> InterfaceName

%%R1216
  NullInit                                     -> ProcPointerInit
  InitialProcTarget                            -> ProcPointerInit

  % empty %                                    -> NoProcPointerInit       {cons("no-init")}

%%R1217
  ProcedureName                                -> InitialProcTarget

%%R1218
  OptLabel 'INTRINSIC' '::' {IntrinsicProcedureName ','}+ EOS -> IntrinsicStmt  {cons("IntrinsicStmt")}
  OptLabel 'INTRINSIC'      {IntrinsicProcedureName ','}+ EOS -> IntrinsicStmt  {cons("IntrinsicStmt")}

  Ident                                        -> IntrinsicProcedureName

%%R1219
  ProcedureDesignator '(' {ActualArgSpec ','}* ')'    -> FunctionReference   {cons("FunctionReference")}

%%R1220
  OptLabel 'CALL' ProcedureDesignator
                     NoActualArgSpecList          EOS -> CallStmt            {cons("CallStmt")}
  OptLabel 'CALL' ProcedureDesignator
                  '(' {ActualArgSpec ','}* ')'    EOS -> CallStmt            {cons("CallStmt")}

  % empty %                                           -> NoActualArgSpecList {cons("no-list")}

%%R1221
  ProcedureName                                       -> ProcedureDesignator {cons("ProcedureDesignator")}
%%ProcComponentRef   %% AMB with alt3
  DataRef '%' BindingName                             -> ProcedureDesignator {cons("ProcedureDesignator")}

%%R1222
  NoKeyword   ActualArg                               -> ActualArgSpec       {cons("ActualArgSpec")}
  Keyword '=' ActualArg                               -> ActualArgSpec       {cons("ActualArgSpec")}

%%R1223
  Expr                                                -> ActualArg
%%Variable           %% AMB with alt1
%%ProcedureName      %% AMB with alt1
%%ProcComponentRef   %% AMB with alt1
  AltReturnSpec                                       -> ActualArg

%%1224
  '*' Label                                           -> AltReturnSpec       {cons("AltReturnSpec")}

%%1225
  PrefixSpec+                                         -> Prefix

  Prefix                                              -> OptPrefix
  % empty %                                           -> OptPrefix           {cons("no-prefix")}

%%1226
  DeclarationTypeSpec                                 -> PrefixSpec
  'ELEMENTAL'                                         -> PrefixSpec          {cons("ELEMENTAL")}
  'IMPURE'                                            -> PrefixSpec          {cons("IMPURE")}
  'MODULE'                                            -> PrefixSpec          {cons("MODULE")}
  'PURE'                                              -> PrefixSpec          {cons("PURE")}
  'RECURSIVE'                                         -> PrefixSpec          {cons("RECURSIVE")}

%%R1227
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%       ExecutionPart modified so it can be an empty list, thus it is not optional.
%%
  FunctionStmt
    SpecificationPart
    ExecutionPart
    OptInternalSubprogramPart
  EndFunctionStmt                                   -> FunctionSubprogram {cons("FunctionSubprogram")}

%%R1228
  OptLabel OptPrefix 'FUNCTION' FunctionName
        '(' {DummyArgName ','}* ')' OptSuffix EOS   -> FunctionStmt       {cons("FunctionStmt")}

%%R1229
  LanguageBindingSpec                  -> ProcLanguageBindingSpec

  ProcLanguageBindingSpec              -> OptProcLanguageBindingSpec
  % empty %                            -> OptProcLanguageBindingSpec    {cons("no-language-binding")}
  % empty %                            -> NoProcLanguageBindingSpec     {cons("no-language-binding")}

%%R1230
  Ident                                -> DummyArgName

%%R1231
  ProcLanguageBindingSpec NoResultName                  -> Suffix       {cons("Suffix")}
  ProcLanguageBindingSpec 'RESULT' '(' ResultName ')'   -> Suffix       {cons("Suffix")}
  'RESULT' '(' ResultName ')' NoProcLanguageBindingSpec -> Suffix       {cons("Suffix")}
  'RESULT' '(' ResultName ')' ProcLanguageBindingSpec   -> Suffix       {cons("Suffix")}

  Suffix                                                -> OptSuffix
  % empty %                                             -> OptSuffix    {cons("no-suffix")}
  % empty %                                             -> NoSuffix     {cons("no-suffix")}

  Ident                                                 -> ResultName
  % empty %                                             -> NoResultName {cons("no-result-name")}

%%R1232
  OptLabel 'END'            NoFunctionName          EOS -> EndFunctionStmt  {cons("EndFunctionStmt")}
  OptLabel 'END' 'FUNCTION' OptFunctionName         EOS -> EndFunctionStmt  {cons("EndFunctionStmt")}

  Ident                                                 -> FunctionName
  % empty %                                             -> NoFunctionName   {cons("no-function-name")}
  % empty %                                             -> OptFunctionName  {cons("no-function-name")}
  FunctionName                                          -> OptFunctionName


%%R1233
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%       ExecutionPart modified so it can be an empty list, thus it is not optional.
%%
  SubroutineStmt
    SpecificationPart
    ExecutionPart
    OptInternalSubprogramPart
  EndSubroutineStmt                                -> SubroutineSubprogram {cons("SubroutineSubprogram")}

%%R1234
  OptLabel OptPrefix 'SUBROUTINE' SubroutineName
            '(' OptDummyArgList ')'
             OptProcLanguageBindingSpec          EOS -> SubroutineStmt     {cons("SubroutineStmt")}
  OptLabel OptPrefix 'SUBROUTINE' SubroutineName
             NoDummyArgList
             NoProcLanguageBindingSpec           EOS -> SubroutineStmt     {cons("SubroutineStmt")}

%%R1235
  DummyArgName                                       -> DummyArg
  '*'                                                -> DummyArg           {cons("STAR")}
  {DummyArg ','}+                                    -> DummyArgList

  DummyArgList                                       -> OptDummyArgList
  % empty %                                          -> OptDummyArgList    {cons("no-list")}
  % empty %                                          -> NoDummyArgList     {cons("no-list")}

%%R1236
  OptLabel 'END'              NoSubroutineName   EOS -> EndSubroutineStmt  {cons("EndSubroutineStmt")}
  OptLabel 'END' 'SUBROUTINE' OptSubroutineName  EOS -> EndSubroutineStmt  {cons("EndSubroutineStmt")}

  Ident                                              -> SubroutineName
  % empty %                                          -> NoSubroutineName   {cons("no-subroutine-name")}
  % empty %                                          -> OptSubroutineName  {cons("no-subroutine-name")}
  SubroutineName                                     -> OptSubroutineName

%%R1237
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%       ExecutionPart modified so it can be an empty list, thus it is not optional.
%%
  MpSubprogramStmt
    SpecificationPart
    ExecutionPart
    OptInternalSubprogramPart
  EndMpSubprogramStmt                             -> SeparateModuleSubprogram {cons("SeparateModuleSubprogram")}

%%R1238
  OptLabel 'MODULE' 'PROCEDURE' ProcedureName EOS -> MpSubprogramStmt         {cons("MpSubprogramStmt")}

%%R1239
  OptLabel 'END'             NoProcedureName  EOS -> EndMpSubprogramStmt      {cons("EndMpSubprogramStmt")}
  OptLabel 'END' 'PROCEDURE' NoProcedureName  EOS -> EndMpSubprogramStmt      {cons("EndMpSubprogramStmt")}
  OptLabel 'END' 'PROCEDURE'   ProcedureName  EOS -> EndMpSubprogramStmt      {cons("EndMpSubprogramStmt")}

%%R1240
  OptLabel 'ENTRY' EntryName '(' OptDummyArgList ')' OptSuffix EOS -> EntryStmt  {cons("EntryStmt")}
  OptLabel 'ENTRY' EntryName      NoDummyArgList      NoSuffix EOS -> EntryStmt  {cons("EntryStmt")}
  Ident                                                            -> EntryName

%%R1241
%%       expr substituted for scalar-int-expr
%%
  OptLabel 'RETURN' OptExpr                 EOS -> ReturnStmt     {cons("ReturnStmt")}

  Expr                                          -> OptExpr
  % empty %                                     -> OptExpr        {cons("no-expr")}

%%R1242
  OptLabel 'CONTAINS'                       EOS -> ContainsStmt   {cons("ContainsStmt")}

%%R1243
%%          scalar-expr replaced by expr
%%
  OptLabel FunctionName '(' {DummyArgName ','}* ')' '=' Expr  EOS -> StmtFunctionStmt {cons("StmtFunctionStmt")}
