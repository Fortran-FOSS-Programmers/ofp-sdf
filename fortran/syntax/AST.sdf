module AST

exports 

  context-free start-symbols OfpProgram

  sorts

    String StrChar

    OfpLabel

    OfpKeyword                        %% R215

    OfpName                           %% R303
    OfpLiteral                        %% R305
    OfpOp                             %% R309

    OfpScope
    OfpSpecPart
    OfpExecPart
    OfpFuncPart

    OfpDecl
    OfpStmt
    OfpBeginStmt
    OfpEndStmt

    OfpProgram
    OfpFile
    OfpProgramUnit

    INTEGER                           %% R404
    REAL
    DOUBLEPRECISION
    COMPLEX
    CHARACTER
    LOGICAL
    DOUBLECOMPLEX

    OfpType

    OfpCharLength                     %% R422


    OfpTypeDeclarationStmt            %% R501
    OfpAttrSpec                       %% R502
    OfpEntityDecl                     %% R503
                                      %% R504  ObjectName - lex
    OfpInitialization                 %% R505

    OfpLanguageBinding                %% R508
    OfpCoarraySpec                    %% R509

    OfpArraySpec                      %% R515  
    OfpExplicitShape                  %% R516
    OfpDimSpec                        %% R517-R518
    OfpAssumedOrDeferredShape         %% R519-R520
    OfpAssumedSize                    %% R521
    OfpImpliedShape                   %% R522
    OfpAssumedRank                    %% R522a
    OfpIntent                         %% R523
    IN
    OUT
    INOUT

    OfpImplicitStmt          %% R560

    OfpVarDef                %% R602
    OfpVarRef                %% R612

    OfpDefinedOp             %% R703,R723

    EQ                       %% R713
    NE
    LT
    LE
    GT
    GE

    OfpAssignmentStmt        %% R732

    OfpMainProgram           %% R1101
    OfpProgramStmt           %% R1102
    OfpEndProgramStmt        %% R1103

    OfpModule                %% R1104
    OfpModuleStmt            %% R1105
    OfpEndModuleStmt         %% R1106

    ABSTRACT
    OfpInterfaceBlock        %% R1201
    OfpInterfaceStmt         %% R1203
    OfpEndInterfaceStmt      %% R1204

    OfpProcedureStmt         %% R1206
    OfpGenericSpec           %% R1207
    ASSIGNMENT
    READFORMATTED            %% R1208
    READUNFORMATTED
    WRITEFORMATTED
    WRITEUNFORMATTED

    OfpExternalStmt          %% R1210

    OfpCallStmt              %% R1220
    OfpProcRef               %% R1221
    OfpArg                   %% R1222
    OfpPrefix                %% R1225
    OfpPrefixSpec            %% R1226
    OfpFunction              %% R1227
    OfpFunctionStmt          %% R1228
    OfpFunctionName

    ELEMENTAL
    IMPURE
    MODULE
    PURE
    RECURSIVE

    OfpSuffix                %% R1231
    OfpSuffixSpec
    OfpResultName

    OfpEndFunctionStmt       %% R1232

    OfpSubroutine            %% R1233
    OfpSubroutineStmt        %% R1234
    OfpSubroutineName
    OfpDummyArg              %% R1235
    STAR
    OfpEndSubroutineStmt     %% R1236

    OfpMpSubprogram          %% R1237
    OfpMpSubprogramStmt      %% R1238
    OfpEndMpSubprogramStmt   %% R1239

    OfpContainsStmt          %% R1242

%% Clause 7, Expressions and assignment

    OfpExpr

  lexical syntax

    "\"" StrChar* "\""   -> String
    ~[\"\\\n]            -> StrChar
    [\\][\"\\n]          -> StrChar

%% Keywords

    "ABSTRACT"           -> ABSTRACT
    "ASSIGNMENT"         -> ASSIGNMENT
    "ELEMENTAL"          -> ELEMENTAL
    "IMPURE"             -> IMPURE
    "MODULE"             -> MODULE
    "PURE"               -> PURE
    "RECURSIVE"          -> RECURSIVE

    "*"                  -> STAR

  context-free syntax

  String    -> OfpLabel   {cons("OfpLabel")}

%%R215
  String    -> OfpKeyword {cons("OfpKeyword")}

%%R303
  String    -> OfpName    {cons("OfpName")}

%% TEMPORARY

  String -> OfpLiteral       {cons("OfpLiteral")}

%% Additional (new) syntax rules for AST nodes

  String    -> OfpFile      {cons("OfpFile")}

  OfpSpecPart OfpExecPart OfpFuncPart
     OfpBeginStmt? OfpContainsStmt? OfpEndStmt?   -> OfpScope     {cons("OfpScope")}

  OfpDecl*  -> OfpSpecPart  {cons("OfpSpecPart")}
  OfpStmt*  -> OfpExecPart  {cons("OfpExecPart")}
  OfpDecl*  -> OfpFuncPart  {cons("OfpFuncPart")}

%%R201
  OfpFile? OfpProgramUnit+    -> OfpProgram      {cons("OfpProgram")}

%%R202
  OfpMainProgram              -> OfpProgramUnit
  OfpModule                   -> OfpProgramUnit
  OfpSubroutine               -> OfpProgramUnit
  OfpFunction                 -> OfpProgramUnit

  String OfpType              -> OfpLiteral       {cons("OfpLiteral")}             %% R305

  String                      -> OfpOp            {cons("OfpOp")}                  %% R309

%% 4.4 Intrinsic types
%%

                              -> INTEGER          {cons("INTEGER")}                %% R404
                              -> REAL             {cons("REAL")}
                              -> DOUBLEPRECISION  {cons("DOUBLEPRECISION")}
                              -> COMPLEX          {cons("COMPLEX")}
                              -> CHARACTER        {cons("CHARACTER")}
                              -> LOGICAL          {cons("LOGICAL")}
                              -> DOUBLECOMPLEX    {cons("DOUBLECOMPLEX")}

  INTEGER         OfpExpr?    -> OfpType          {cons("OfpType")}
  REAL            OfpExpr?    -> OfpType          {cons("OfpType")}
  DOUBLEPRECISION OfpExpr?    -> OfpType          {cons("OfpType")}
  COMPLEX         OfpExpr?    -> OfpType          {cons("OfpType")}
  CHARACTER       OfpExpr?    -> OfpType          {cons("OfpType")}
  LOGICAL         OfpExpr?    -> OfpType          {cons("OfpType")}
  DOUBLECOMPLEX   OfpExpr?    -> OfpType          {cons("OfpType")}

  OfpLabel? OfpType
            OfpAttrSpec*
            OfpEntityDecl+    -> OfpTypeDeclarationStmt {cons(" OfpTypeDeclarationStmt")} %% R501
  OfpTypeDeclarationStmt      -> OfpDecl

  "ALLOCATABLE"               -> OfpAttrSpec      {cons("ALLOCATABLE")}            %% R502
  OfpIntent                   -> OfpAttrSpec      {cons("OfpIntent")}

  OfpName OfpArraySpec?
          OfpCoarraySpec?
          OfpCharLength?
          OfpInitialization?  -> OfpEntityDecl    {cons("OfpEntityDecl")}          %% R503

%%TODO
  String -> OfpArraySpec
  String -> OfpCoarraySpec
  String -> OfpCharLength
  String -> OfpInitialization

%%R502  OfpAttrSpec
%%TODO remove? or stuff allocable in it

  OfpName?                    -> OfpLanguageBinding {cons("OfpLanguageBinding")}   %% R508

  OfpDimSpec+                 -> OfpExplicitShape {cons("OfpExplicitShape")}       %% R516

  OfpExpr OfpExpr             -> OfpDimSpec       {cons("OfpDimSpec")}             %% R517-R518
  OfpExpr String              -> OfpDimSpec       {cons("OfpDimSpec")}

  OfpDimSpec+     -> OfpAssumedOrDeferredShape {cons("OfpAssumedOrDeferredShape")} %% R519-R520
  OfpDimSpec+     -> OfpAssumedSize            {cons("OfpAssumedSize")}            %% R521
  OfpDimSpec+     -> OfpImpliedShape           {cons("OfpImpliedShape")}           %% R522
  OfpDimSpec+     -> OfpAssumedRank            {cons("OfpAssumedRank")}            %% R522a

  String          -> OfpIntent                 {cons("OfpIntent")}                 %% R523
                  -> IN                        {cons("IN")}
                  -> OUT                       {cons("OUT")}
                  -> INOUT                     {cons("INOUT")}

  IN              -> OfpIntent
  OUT             -> OfpIntent
  INOUT           -> OfpIntent

  %% These are kind of like expressions and need some place to merge them into AST grammar
  %%
  OfpAssumedOrDeferredShape   -> OfpExpr
  OfpAssumedSize              -> OfpExpr
  OfpExplicitShape            -> OfpExpr
  OfpImpliedShape             -> OfpExpr
  OfpAssumedRank              -> OfpExpr

  OfpLabel? OfpType*          -> OfpImplicitStmt  {cons("OfpImplicitStmt")}        %% R560
  OfpImplicitStmt             -> OfpDecl

  OfpName                     -> OfpVarDef  {cons("OfpVarDef")}                    %% R602
  OfpName                     -> OfpVarRef  {cons("OfpVarRef")}                    %% R612


%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R7xx Expressions and Assignments
%%%%%%%%%%

  String                      -> OfpDefinedOp       {cons("OfpDefinedOp")}         %% R703,R723

                              -> EQ                 {cons("EQ")}                   %% R713
                              -> NE                 {cons("NE")}
                              -> LT                 {cons("LT")}
                              -> LE                 {cons("LE")}
                              -> GT                 {cons("GT")}
                              -> GE                 {cons("GE")}
  EQ                          -> OfpOp
  NE                          -> OfpOp
  LT                          -> OfpOp
  LE                          -> OfpOp
  GT                          -> OfpOp
  GE                          -> OfpOp

  OfpLiteral                  -> OfpExpr            {cons("OfpExpr")}
  OfpVarRef                   -> OfpExpr            {cons("OfpExpr")}

  OfpExpr OfpExpr             -> OfpExpr            {cons("OfpPlusExpr")}

  OfpLabel? OfpVarDef OfpExpr -> OfpAssignmentStmt {cons("OfpAssignmentStmt")}     %% R732
  OfpAssignmentStmt           -> OfpStmt

  OfpName?  OfpScope          -> OfpMainProgram     {cons("OfpMainProgram")}       %% R1101
  OfpLabel? OfpName           -> OfpProgramStmt     {cons("OfpProgramStmt")}       %% R1102
  OfpLabel? OfpName?          -> OfpEndProgramStmt  {cons("OfpEndProgramStmt")}    %% R1103
  OfpProgramStmt              -> OfpBeginStmt
  OfpEndProgramStmt           -> OfpEndStmt

  OfpName?  OfpScope          -> OfpModule          {cons("OfpModule")}            %% R1104
  OfpLabel? OfpName           -> OfpModuleStmt      {cons("OfpModuleStmt")}        %% R1105
  OfpLabel? OfpName?          -> OfpEndModuleStmt   {cons("OfpEndModuleStmt")}     %% R1106
  OfpModuleStmt               -> OfpBeginStmt
  OfpEndModuleStmt            -> OfpEndStmt

  OfpInterfaceStmt
  OfpEndInterfaceStmt OfpScope* -> OfpInterfaceBlock {cons("OfpInterfaceBlock")}   %% R1201
  OfpInterfaceBlock             -> OfpDecl

  OfpLabel? ABSTRACT?
            OfpGenericSpec?   -> OfpInterfaceStmt    {cons("OfpInterfaceStmt")}    %% R1203
  OfpLabel? OfpGenericSpec?   -> OfpEndInterfaceStmt {cons("OfpEndInterfaceStmt")} %% R1204
  OfpInterfaceStmt            -> OfpBeginStmt
  OfpEndInterfaceStmt         -> OfpEndStmt

  OfpLabel? MODULE? OfpName+  -> OfpProcedureStmt    {cons("OfpProcedureStmt")}    %% R1206
  OfpProcedureStmt            -> OfpBeginStmt

  OfpName                     -> OfpGenericSpec      {cons("OfpGenericSpec")}      %% R1207
  OfpOp                       -> OfpGenericSpec      {cons("OfpOp")}
  OfpDefinedOp                -> OfpGenericSpec      {cons("OfpDefinedOp")}
  ASSIGNMENT                  -> OfpGenericSpec      {cons("ASSIGNMENT")}
                              -> ASSIGNMENT          {cons("ASSIGNMENT")}
  READFORMATTED               -> OfpGenericSpec      {cons("READFORMATTED")}
  READUNFORMATTED             -> OfpGenericSpec      {cons("READUNFORMATTED")}
  WRITEFORMATTED              -> OfpGenericSpec      {cons("WRITEFORMATTED")}
  WRITEUNFORMATTED            -> OfpGenericSpec      {cons("WRITEUNFORMATTED")}
                              -> READFORMATTED       {cons("READFORMATTED")}       %% R1208
                              -> READUNFORMATTED     {cons("READUNFORMATTED")}
                              -> WRITEFORMATTED      {cons("WRITEFORMATTED")}
                              -> WRITEUNFORMATTED    {cons("WRITEUNFORMATTED")}

  OfpLabel? OfpName+          -> OfpExternalStmt     {cons("OfpExternalStmt")}     %% R1210
  OfpExternalStmt             -> OfpDecl

  OfpLabel? OfpProcRef OfpArg+ -> OfpCallStmt        {cons("OfpCallStmt")}               %% R1220
  OfpCallStmt                  -> OfpStmt

  OfpExpr                      -> OfpProcRef         {cons("OfpProcRef")}                %% R1221

  OfpExpr                     -> OfpArg              {cons("OfpArg")}                    %% R1222
  OfpExpr OfpKeyword          -> OfpArg              {cons("OfpArg")}

  OfpPrefixSpec*              -> OfpPrefix           {cons("OfpPrefix")}                 %% R1225
%%TODO declaration-type-spec  -> OfpPrefixSpec
  ELEMENTAL                   -> OfpPrefixSpec       {cons("ELEMENTAL")}
  IMPURE                      -> OfpPrefixSpec       {cons("IMPURE")}
  MODULE                      -> OfpPrefixSpec       {cons("MODULE")}
  PURE                        -> OfpPrefixSpec       {cons("PURE")}
  RECURSIVE                   -> OfpPrefixSpec       {cons("RECURSIVE")}
  
  OfpName OfpScope            -> OfpFunction            {cons("OfpFunction")}            %% R1227

  OfpLabel? OfpFunctionName
        OfpDummyArg* OfpPrefix
                    OfpSuffix -> OfpFunctionStmt        {cons("OfpFunctionStmt")}        %% R1228

  String                      -> OfpFunctionName        {cons("OfpFunctionName")}

  OfpLanguageBinding          -> OfpSuffixSpec          {cons("OfpLanguageBinding")}     %% R1229
  OfpResultName               -> OfpSuffixSpec          {cons("OfpResultName")}
  OfpName                     -> OfpResultName          {cons("OfpResultName")}

  OfpSuffixSpec*              -> OfpSuffix              {cons("OfpSuffix")}              %% R1231

  OfpLabel? OfpName?          -> OfpEndFunctionStmt     {cons("OfpEndFunctionStmt")}     %% R1232
  OfpFunctionStmt             -> OfpBeginStmt
  OfpEndFunctionStmt          -> OfpEndStmt

  OfpName OfpScope            -> OfpSubroutine          {cons("OfpSubroutine")}          %% R1233
  OfpLabel? OfpSubroutineName
       OfpDummyArg* OfpPrefix
                    OfpSuffix -> OfpSubroutineStmt      {cons("OfpSubroutineStmt")}      %% R1234
  String                      -> OfpSubroutineName      {cons("OfpSubroutineName")}
  String                      -> OfpDummyArg            {cons("OfpDummyArg")}            %% R1235
  STAR                        -> OfpDummyArg            {cons("STAR")}
                              -> STAR                   {cons("STAR")}
  OfpLabel? OfpName?          -> OfpEndSubroutineStmt   {cons("OfpEndSubroutineStmt")}   %% R1236
  OfpSubroutineStmt           -> OfpBeginStmt
  OfpEndSubroutineStmt        -> OfpEndStmt

  OfpName?  OfpScope          -> OfpMpSubprogram        {cons("OfpMpSubprogram")}        %% R1237
  OfpLabel? OfpName           -> OfpMpSubprogramStmt    {cons("OfpMpSubprogramStmt")}    %% R1238
  OfpLabel? OfpName?          -> OfpEndMpSubprogramStmt {cons("OfpEndMpSubprogramStmt")} %% R1239
  OfpMpSubprogramStmt         -> OfpBeginStmt
  OfpEndMpSubprogramStmt      -> OfpEndStmt
  OfpMpSubprogram             -> OfpDecl

  OfpLabel?                   -> OfpContainsStmt    {cons("OfpContainsStmt")}      %% R1242
