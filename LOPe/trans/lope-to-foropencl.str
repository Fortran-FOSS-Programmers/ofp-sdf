module lope-to-foropencl

imports
   libstratego-lib
   FAST
   LOPe
   ofp-simplify

signature
  constructors

  ALLOCATED : ALLOCATED
  INTERNAL  : INTERNAL

  clMemObject : symbol -> clMemObject

//TODO - move this to FAST
  OfpBlockDoConstruct : begin_stmt * block * end_stmt -> OfpBlockDoConstruct


strategies //=================START OF STRATEGIES============================

  io-lope-to-foropencl =
    io-wrap(lope-to-foropencl)

  lope-to-foropencl =
{ st,lt,save
        :  ?OfpProgram(name, units)
        ;  new-hashtable => st
        ;  new-hashtable => lt
        ;  !OfpProgram(name, units)
        ;  topdown(try(fast-get-symbols(|st)))
        ;  topdown(try(cafe-get-symbols(|st,lt)))
        ;  bottomup(try(cafe-add-cl(|st,lt)))
        ;  topdown(try(fast-flatten-scope-parts))
        ;  bottomup(try(caf-lower-ast))  => save
        ;  !"--------------------------------------------------------------------------------------"
        ;  debug()
        ;  !save
}


rules //========================START OF RULES===============================

// FAST strategies (MOVE TO fortran/trans)
// ---------------

fast-var-name =
     ?VarRef(name)
  ;  !name
 <+  ?VarDef(name)
  ;  !name

// Remove excess list elements inside of OfpSpecPart and OfpExecPart
//   - occurs when a single statement is replaced by a list of statements
fast-flatten-scope-parts =
     ?OfpSpecPart(list)
  ;  !OfpSpecPart(<flatten-list>list)
 <+  ?OfpExecPart(list)
  ;  !OfpExecPart(<flatten-list>list)

fast-allocation-object =
     ?Allocation(object,_,_)
  ;  <fast-var-name> object

// assume literals for now, otherwise get const from symbol table
// TODO - use choice to use lb info
fast-build-allocation-size(|st,obj) =
     ?AllocateShapeSpec(no-lower-bound(),ub)
  ;  !ub

fast-dim-size =
     ?DimSpec(lb,ub)
  ;  !Parens(Minus(ub,lb))
  ;  !Parens(Plus(<id>,"1"))

// Size of a type in bytes
// TODO - add other intrinsic types and support for kinds
// TODO - could replace kind with size in bytes!!!!
fast-type-size =
     ?IntrinsicType(REAL(no-kind())) ; !"4"

fast-mult-op =
     ?(l,r)
  ;  !Mult(l,r)

fast-allocation-size(|st) =
     ?symbol
  ;  <hashtable-get(|symbol)> st
  ;  ?(type,attrs)
  ;  <fetch-elem(?Dimension(shape))> attrs
  ;  innermost(fast-var-name)
  ;  <map(fast-dim-size)> shape
  ;  <foldr(!"1",fast-mult-op)> <id>
  ;  <fast-mult-op> (<fast-type-size>type,<id>)

fast-fix-no-lower-bound =
     ?no-lower-bound()
  ;  !"1"

fast-update-allocation-dim =
     ?(AllocateShapeSpec(lb,ub),DimSpec(_,_))
  ;  !DimSpec(lb,ub)

fast-update-allocation-codim =
     ?(AllocateCoshapeSpec(lb,ub),DimSpec(_,_))
  ;  !DimSpec(lb,ub)

// Update the symbol table with information from an allocate statement
fast-update-allocation-symbol(|st) =
{shape,coshape,attrs
  :  topdown(try(fast-fix-no-lower-bound))
  ;  ?Allocation(VarRef(obj),alloc_shape,alloc_coshape)
  ;  <hashtable-get(|obj)> st
  ;  ?(type,decl_attrs)
  ;  <elem> (ALLOCATABLE(),decl_attrs)   // ensure this symbol is allocatable
  ;  <fetch-elem(?Dimension(decl_shape))> decl_attrs
  ;  <fetch-elem(?Codimension(decl_coshape))> decl_attrs
  ;  <zip(fast-update-allocation-dim)>   (alloc_shape,  decl_shape)   =>   shape
  ;  <zip(fast-update-allocation-codim)> (alloc_coshape,decl_coshape) => coshape
  ;  <filter( try(?Dimension(_)   ; !Dimension(shape))     )> decl_attrs
  ;  <filter( try(?Codimension(_) ; !Codimension(coshape)) )> <id>
  ;  <filter( try(?ALLOCATABLE()  ; !ALLOCATED()) )> <id> => attrs
  ;  <hashtable-put(|obj,(type,attrs))> st
}

fast-build-use-stmt =
     ?module_name
  ;  !UseStmt(no-label(), no-module-nature(), module_name, [], eos("\n"))

fast-build-type-decl(|type,attrs) =
     ?object_name
  ;  !TypeDeclarationStmt(  no-label()
                          , type
                          , attrs
                          , [EntityDecl(object_name,[],[],no-char-length(),no-init())]
                          , eos("\n"))

fast-build-block(|decls,execs) =
     !BlockConstruct(
              BlockStmt(no-label(),no-name(),eos("\n"))
            , OfpSpecPart(decls)
            , Block(execs)
            , EndBlockStmt(no-label(),no-name(),eos("\n")))

// Local thread group size (in any dimension)
opencl-group-size =
     !"int(16,c_size_t)"

// Allocate memory on OpenCL device via call to createBuffer()
opencl-build-create-buffer(|st,device) =
     ?obj
  ;  <fast-allocation-size(|st)> obj
  ;  ![  AssignmentStmt(no-label(),VarDef("cl_size__"),<id>,eos("\n"))
       , AssignmentStmt(no-label(),<cl-wrap-name> obj
          , FunctionReference("createBuffer"
             , [device,"CL_MEM_READ_WRITE",VarRef("cl_size__")
               ,"C_NULL_PTR"]),eos("\n"))
      ]

// Deallocate memory on OpenCL device via call to releaseMemObject()
opencl-build-release-buffer(|st,device) =
    !AssignmentStmt(no-label(),VarDef("cl_status__")
          , FunctionReference("releaseMemObject", [<cl-wrap-var> <id>]), eos("\n"))

// Create an OpenCL kernel object via call to createKernel
//TODO - check selector against device to ensure they refer to same image
opencl-build-create-kernel(|ct,device) =
{kernel_arg_funcs
  :  ?obj
  ;  <hashtable-get(|obj)> ct
  ;  ?(kernel,DerivedType("CLKernel",[]),[]) {annotations}
  ;  <lookup> ("args", annotations)
  ;  <map(opencl-build-add-kernel-args(|ct,kernel))> <add-indices> <id>  => kernel_arg_funcs
  ;  !AssignmentStmt(no-label(),kernel
         , FunctionReference("createKernel",[<cl-wrap-name>device,<write-to-string>obj]),eos("\n"))
  ;  <flatten-list> [<id>, kernel_arg_funcs]
 <+  ![]
}

// Add an argument to an OpenCL kernel object via call to setKernelArg
opencl-build-add-kernel-args(|ct,kernel) =
     ?(index, ActualArgSpec(_,PartRef(arg,_,selector)))
  ;  <opencl-kernel-arg-type(|ct)> <hashtable-get(|arg)> ct
  ;  !AssignmentStmt(no-label(),VarDef("cl_status__")
         , FunctionReference("setKernelArg"
              ,[kernel,<subti>(index,1),<id>]),eos("\n"))
 <+  ![]

opencl-kernel-arg-type(|ct) =
     ?(cl_symbol, DerivedType("CLBuffer",_),_)
  ;  !clMemObject(cl_symbol)


// Utility strategies
// ------------------

cl-wrap-name =
     is-string
  ;  <conc-strings>("cl_", <id>, "_")
 +>  ?VarRef(name) 
  ;  debug(!"CL_WRAP_NAME: ERROR isVarRef ------------------------------------------------")
  ;  <conc-strings>("cl_", name, "_")

cl-wrap-var =
     ?VarRef(name) 
  ;  <conc-strings>("cl_", name, "_")
 +>  ?VarDef(name) 
  ;  <conc-strings>("cl_", name, "_")
 +>  is-string
  ;  debug(!"CL_WRAP_VAR: ERROR is-string ------------------------------------------------")
  ;  <conc-strings>("cl_", <id>, "_")

ofp-ident
  :  EntityDecl(ident,_,_,_,_) -> ident

// add subimage device
//
cafe-add-subimage-symbol(|ct,lhs) =
     ?PartRef("get_subimage",args,no-image-selector())
  ;  <hashtable-put(|<fast-var-name>lhs, (<cl-wrap-var>lhs,DerivedType("CLDevice",[]),[]))> ct
  ;  !PartRef("get_subimage",args,no-image-selector())

// Add a symbol to the symbol table
st-add-symbol(|st,type,attrs) =
     ?symbol
  ;  <hashtable-put(|symbol,(type,attrs))> st

// Add a symbol to the CAFe symbol table
ct-add-symbol(|ct,type,attrs) =
     ?symbol
  ;  <hashtable-put(|symbol,(<cl-wrap-name>symbol,type,attrs))> ct

ct-add-type-decl(|ct) =
     ?ident
  ;  <hashtable-get(|ident)> ct
  ;  ?(clident,type,attrs)
  ;  <fast-build-type-decl(|type,attrs)> clident


// Build symbol table
// ------------------

// Add declared variables to symbol table
fast-get-symbols(|st) =
     ?TypeDeclarationStmt(label,type,attrs,vars,eos)
  ;  <map(st-add-symbol(|st,type,attrs))> <map(ofp-ident)> vars
  ;  !TypeDeclarationStmt(label,type,attrs,vars,eos)

// Update symbol table with information from allocate statements
fast-get-symbols(|st) =
     ?AllocateStmt(label,type,alloc_list,options,eos)
  ;  <map(fast-update-allocation-symbol(|st))> alloc_list
  ;  !AllocateStmt(label,type,alloc_list,options,eos)


// Get symbols specifically relevant to CAFe
// -----------------------------------------

cafe-get-symbols(|st,ct) =
     ?AssignmentStmt(label,lhs,rhs,eos)
  ;  <cafe-add-subimage-symbol(|ct,lhs)> rhs
  ;  !AssignmentStmt(label,lhs,rhs,eos)

cafe-get-symbols(|st,ct) =
     ?CoAllocateStmt(label,type,alloc_list,options,image,eos)
  ;  <map(ct-add-symbol(|ct,DerivedType("CLBuffer",[]),[]))>
         <map(fast-allocation-object)> alloc_list
  ;  <map(fast-update-allocation-symbol(|st))> alloc_list
  ;  !CoAllocateStmt(label,type,alloc_list,options,image,eos)

// Mark DO CONCURRENT loops having an ImageExecutionSelector
cafe-get-symbols(|st,ct) =
     ?OfpBlockDoConstruct(begin,stmts,end)
  ;  !begin
  ;  ?NonlabelDoStmt(_,_,ConcurrentExecControl(_,image),eos)
  ;  <map(cafe-get-stmt-symbol(|st,ct))> stmts
  ;  !OfpBlockDoConstruct(begin,stmts,end) {[("ImageExecutionSelector",<cafe-subimage>image)]}

// Unmark DO CONCURRENT loop (assumes no embedded do loops)
cafe-get-symbols(|st,ct) =
     ?EndDoStmt(label,name,eos)
  ;  <hashtable-get(|"cafe_do_concurrent_tmp_")> ct
  ;  <hashtable-remove(|"cafe_do_concurrent_tmp_")> ct
  ;  !EndDoStmt(label,name,eos)

// Add CONCURRENT subroutine names to CAFe symbols
cafe-get-stmt-symbol(|st,ct) =
     ?CallStmt(label, ProcedureDesignator(name), args, eos)
  ;  <hashtable-put(|name,(<cl-wrap-name>name
            , DerivedType("CLKernel",[])
            , []){[("args",args)]})> ct
  ;  !CallStmt(label, ProcedureDesignator(name), args, eos)

cafe-subimage =
     ?ImageExecutionSelector([VarRef(device)])
  ;  !device

cafe-loop-bounds =
     ?NonlabelDoStmt(_,_,ConcurrentExecControl(ForallHeader(_,[ForallTripletSpec(var,lb,ub,_)],_),_),_)
  ;  !Plus(Minus(ub,lb),"1")


// Add ForOpenCL calls to the AST
// ------------------------------

cafe-add-cl(|st,ct) =
     ?AssignmentStmt(label,VarDef(lhs),PartRef("get_subimage",[arg],_),eos)
  ;  !AssignmentStmt(label,VarDef(lhs),FunctionReference("get_subimage",
                                      [arg,<cl-wrap-name>lhs]),eos)

// Add variables associated with ForOpenCL calls
cafe-add-cl(|st,ct) =
     ?OfpSpecPart(decls)
  ;  <concat> [[<fast-build-use-stmt>"ForOpenCL"], decls]
  ;  <concat> [<id>, <map(ct-add-type-decl(|ct))> <hashtable-keys()> ct]
  ;  <concat> [<id>, [<fast-build-type-decl(|
                       IntrinsicType(INTEGER(KindSelector(VarRef("cl_int")))),[])> "cl_status__"]]
  ;  <concat> [<id>, [<fast-build-type-decl(|
                       IntrinsicType(INTEGER(KindSelector(VarRef("c_size_t")))),[])> "cl_size__"]]
  ;  <concat> [<id>, [<fast-build-type-decl(|
                       IntrinsicType(INTEGER(KindSelector(VarRef("c_size_t")))),[])> "cl_nx__"]]
  ;  !OfpSpecPart(<id>)

// Replace coallocate statement with function call to alloc memory on device
cafe-add-cl(|st,ct) =
{device
  :  ?CoAllocateStmt(label,type,alloc_list,options,image,eos)
  ;  <cl-wrap-name> <cafe-subimage> image => device
  ;  <map(ct-add-symbol(|ct,DerivedType("CLBuffer",[]),[]))>
         <map(fast-allocation-object)> alloc_list
  ;  <map(fast-allocation-object)> alloc_list
  ;  <map(opencl-build-create-buffer(|st,device))> <id>
}

// Replace codeallocate statement with function call to free memory on device
cafe-add-cl(|st,ct) =
{device
  :  ?CoDeallocateStmt(label,dealloc_list,options,image,eos)
  ;  <cl-wrap-name> <cafe-subimage> image => device
  ;  <map(opencl-build-release-buffer(|st,device))> dealloc_list
}

// Replace assignment statements with memory transfer with read/writeBuffer
cafe-add-cl(|st,ct) =
     ?AssignmentStmt(label,PartRef(var,no-section-subscripts(),[VarRef(device)]),VarRef(obj),eos)
  ;  <fast-allocation-size(|st)> var
  ;  ![  AssignmentStmt(no-label(),VarDef("cl_size__"),<id>,eos("\n"))
       , AssignmentStmt(no-label(),VarDef("cl_status__")
         , FunctionReference("writeBuffer"
            ,[<cl-wrap-name>var,<conc-strings>("C_LOC(",obj,")"),VarRef("cl_size__")]),eos("\n"))
      ]
 +>  ?AssignmentStmt(label,VarDef(var),PartRef(obj,no-section-subscripts(),[VarRef(device)]),eos)
  ;  <fast-allocation-size(|st)> obj
  ;  ![  AssignmentStmt(no-label(),VarDef("cl_size__"),<id>,eos("\n"))
       , AssignmentStmt(no-label(),VarDef("cl_status__")
         , FunctionReference("readBuffer"
            ,[<cl-wrap-name>obj,<conc-strings>("C_LOC(",var,")"),VarRef("cl_size__")]),eos("\n"))
      ]

// Create OpenCL kernels
cafe-add-cl(|st,ct) =
{device,kernels,finish
  :  ?OfpBlockDoConstruct(begin,stmts,end) {annotations}
  ;  <lookup> ("ImageExecutionSelector", annotations) => device
  ;  <map(opencl-build-create-kernel(|ct,device))> <hashtable-keys> ct
  ;  <flatten-list> <id>  => kernels
  ;  <map(opencl-build-finish-kernel)> stmts
  ;  <flatten-list> <id>  => finish
  ;  <map(opencl-replace-call-stmt(|<cafe-loop-bounds>begin))> stmts
  ;  <concat> [kernels, <id>, finish]
}

// Replace subroutine call with running the corresponding OpenCL kernel
opencl-replace-call-stmt(|bounds) =
     ?CallStmt(label, ProcedureDesignator(name), args, eos)
  ;  !AssignmentStmt(no-label(),"cl_nx__", bounds, eos("\n"))
  ;  ![<id>, AssignmentStmt(no-label(),VarDef("cl_status__")
               , FunctionReference("run",[<cl-wrap-name>name
                  , VarRef("cl_nx__"), <opencl-group-size>]),eos("\n"))]

// Build the OpenCL kernel finish call
opencl-build-finish-kernel =
     ?CallStmt(label, ProcedureDesignator(name), args, eos)
  ;  !AssignmentStmt(no-label(),VarDef("cl_status__")
         , FunctionReference("clFinish",[<conc-strings>(<cl-wrap-name>name, "%commands")]),eos("\n"))


// Lower CAF components to serial
// ------------------------------
caf-lower-ast =
     ?Codimension(_)
  ;  ![]

caf-lower-ast =
     ?EntityDecl(name,array_spec,coarray_spec,char_length,init)
  ;  !EntityDecl(name,array_spec,          [],char_length,init)

// This is just used to flatten the attribute list from removing Codimension attribute
caf-lower-ast =
     ?TypeDeclarationStmt(label,type,attrs,vars,eos)
  ;  !TypeDeclarationStmt(label,type,<flatten-list>attrs,vars,eos)

caf-lower-ast =
     ?Allocation(var,shape,coshape)
  ;  !Allocation(var,shape,     [])
