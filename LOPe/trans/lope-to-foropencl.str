module lope-to-foropencl

imports
   libstratego-lib
   AST
   LOPe
   ofp-simplify

signature
  constructors

  ALLOCATED : ALLOCATED
  TMP       : TMP

strategies //=================START OF STRATEGIES============================

  io-lope-to-foropencl =
    io-wrap(lope-to-foropencl)

  lope-to-foropencl =
{ st,lt
        :  ?OfpProgram(name, units)
        ;  new-hashtable => st
        ;  new-hashtable => lt
        ;  !OfpProgram(name, units)
        ;  topdown(try(fast-get-symbols(|st)))
        ;  topdown(try(cafe-get-symbols(|st,lt)))
        ;  bottomup(try(cafe-add-cl(|st,lt)))
        ;  topdown(try(fast-flatten-scope-parts))
}

rules //========================START OF RULES===============================

// FAST strategies (MOVE TO fortran/trans)
// ---------------

// Remove excess list elements inside of OfpSpecPart and OfpExecPart
//   - occurs when a single statement is replaced by a list of statements
fast-flatten-scope-parts =
     ?OfpSpecPart(list)
  ;  !OfpSpecPart(<flatten-list>list)
 <+  ?OfpExecPart(list)
  ;  !OfpExecPart(<flatten-list>list)

fast-allocation-object =
     ?Allocation(object,_,_)
  ;  !object

// assume literals for now, otherwise get const from symbol table
// TODO - use choice to use lb info
fast-build-allocation-size(|st,obj) =
     ?AllocateShapeSpec(no-lower-bound(),ub)
  ;  !ub

fast-dim-size =
     ?DimSpec(lb,ub)
  ;  <subtS> (ub,lb)
  ;  <addS> (<id>,"1")

// Size of a type in bytes
// TODO - add other intrinsic types and support for kinds
// TODO - could replace kind with size in bytes!!!!
fast-type-size =
     ?IntrinsicType(REAL(no-kind())) ; !"4"

fast-allocation-size(|st) =
     ?obj
  ;  <hashtable-get(|obj)> st
  ;  ?(type,attrs)
  ;  <fetch-elem(?Dimension(shape))> attrs
  ;  <map(fast-dim-size)> shape
  ;  <foldr(!"1",mulS)> <id>
  ;  <mulS> (<fast-type-size>type,<id>)

fast-fix-no-lower-bound =
     ?no-lower-bound()
  ;  !"1"

fast-update-allocation-dim =
     ?(AllocateShapeSpec(lb,ub),DimSpec(_,_))
  ;  !DimSpec(lb,ub)

fast-update-allocation-codim =
     ?(AllocateCoshapeSpec(lb,ub),DimSpec(_,_))
  ;  !DimSpec(lb,ub)

// Update the symbol table with information from an allocate statement
fast-update-allocation-symbol(|st) =
{shape,coshape,attrs
  :  topdown(try(fast-fix-no-lower-bound))
  ;  ?Allocation(obj,alloc_shape,alloc_coshape)
  ;  <hashtable-get(|obj)> st
  ;  ?(type,decl_attrs)
  ;  <elem> (ALLOCATABLE(),decl_attrs)   // ensure this symbol is allocatable
  ;  <fetch-elem(?Dimension(decl_shape))> decl_attrs
  ;  <fetch-elem(?Codimension(decl_coshape))> decl_attrs
  ;  <zip(fast-update-allocation-dim)>   (alloc_shape,  decl_shape)   =>   shape
  ;  <zip(fast-update-allocation-codim)> (alloc_coshape,decl_coshape) => coshape
  ;  <filter( try(?Dimension(_)   ; !Dimension(shape))     )> decl_attrs
  ;  <filter( try(?Codimension(_) ; !Codimension(coshape)) )> <id>
  ;  <filter( try(?ALLOCATABLE()  ; !ALLOCATED()) )> <id> => attrs
  ;  <hashtable-put(|obj,(type,attrs))> st
}

fast-build-use-stmt =
     ?module_name
  ;  !UseStmt(no-label(), no-module-nature(), module_name, [], eos("\n"))

fast-build-type-decl(|type,attrs) =
     ?object_name
  ;  !TypeDeclarationStmt(  no-label()
                          , type
                          , attrs
                          , [EntityDecl(object_name,[],[],no-char-length(),no-init())]
                          , eos("\n"))

fast-build-block(|decls,execs) =
     !BlockConstruct(
              BlockStmt(no-label(),no-name(),eos("\n"))
            , OfpSpecPart(decls)
            , Block(execs)
            , EndBlockStmt(no-label(),no-name(),eos("\n")))

opencl-build-create-buffer(|st,device) =
     ?obj
  ;  <fast-allocation-size(|st)> obj
  ;  !AssignmentStmt(no-label(),<cl-wrap-name>obj,
         FunctionReference("createBuffer",
                           [device,"CL_MEM_READ_WRITE",<id>,<conc-strings>("C_LOC(",obj, ")")]),eos("\n"))

// Utility strategies
// ------------------
cl-wrap-name =
     is-string
  ;  <conc-strings>("cl_", <id>, "_")

ofp-ident
  :  EntityDecl(ident,_,_,_,_) -> ident

// add subimage device
//
cafe-add-subimage-symbol(|ct,lhs) =
     ?PartRef("get_subimage",args,no-image-selector())
  ;  <hashtable-put(|lhs, (<cl-wrap-name>lhs,DerivedType("CLDevice",[]),[]))> ct
  ;  !PartRef("get_subimage",args,no-image-selector())

// Add a symbol to the symbol table
st-add-symbol(|st,type,attrs) =
     ?obj
  ;  <hashtable-put(|obj,(type,attrs))> st

// Add a symbol to the CAFe symbol table
ct-add-symbol(|ct,type,attrs) =
     ?obj
  ;  <hashtable-put(|obj,(<cl-wrap-name>obj,type,attrs))> ct

ct-add-type-decl(|ct) =
     ?ident
  ;  <hashtable-get(|ident)> ct
  ;  ?(clident,type,attrs)
  ;  <fast-build-type-decl(|type,attrs)> clident


// Build symbol table
// ------------------

// Add declared variables to symbol table
fast-get-symbols(|st) =
     ?TypeDeclarationStmt(label,type,attrs,vars,eos)
  ;  <map(st-add-symbol(|st,type,attrs))> <map(ofp-ident)> vars
  ;  !TypeDeclarationStmt(label,type,attrs,vars,eos)

// Update symbol table with information from allocate statements
fast-get-symbols(|st) =
     ?AllocateStmt(label,type,alloc_list,options,eos)
  ;  <map(fast-update-allocation-symbol(|st))> alloc_list
  ;  !AllocateStmt(label,type,alloc_list,options,eos)


// Get symbols specifically relevant to CAFe
// -----------------------------------------

cafe-get-symbols(|st,ct) =
     ?AssignmentStmt(label,lhs,rhs,eos)
  ;  <cafe-add-subimage-symbol(|ct,lhs)> rhs
  ;  !AssignmentStmt(label,lhs,rhs,eos)

cafe-get-symbols(|st,ct) =
     ?CoAllocateStmt(label,type,alloc_list,options,image,eos)
  ;  <map(ct-add-symbol(|ct,DerivedType("CLBuffer",[]),[]))>
         <map(fast-allocation-object)> alloc_list
  ;  <map(fast-update-allocation-symbol(|st))> alloc_list
  ;  !CoAllocateStmt(label,type,alloc_list,options,image,eos)

// Mark DO CONCURRENT loop as CAFe executable
cafe-get-symbols(|st,ct) =
     ?ConcurrentExecControl(header,ImageExecutionSelector([device]))
  ;  <hashtable-put(|"cafe_do_concurrent_tmp_", (device,TMP(),[]))> ct
  ;  !ConcurrentExecControl(header,ImageExecutionSelector([device]))

// Add subroutine name to CAFe symbols
cafe-get-symbols(|st,ct) =
     ?CallStmt(label, ProcedureDesignator(name), args, eos)
  ;  <hashtable-get(|"cafe_do_concurrent_tmp_")> ct
  ;  <hashtable-put(|name, (<cl-wrap-name>name, DerivedType("CLKernel",[]),[]))> ct
  ;  !CallStmt(label, ProcedureDesignator(name), args, eos)

// Unmark DO CONCURRENT loop (assumes no embedded do loops)
cafe-get-symbols(|st,ct) =
     ?EndDoStmt(label,name,eos)
  ;  <hashtable-get(|"cafe_do_concurrent_tmp_")> ct
  ;  <hashtable-remove(|"cafe_do_concurrent_tmp_")> ct
  ;  !EndDoStmt(label,name,eos)

cafe-subimage =
     ?ImageExecutionSelector([device])
  ;  !device


// Add ForOpenCL calls to the AST
// ------------------------------

cafe-add-cl(|st,ct) =
     ?AssignmentStmt(label,lhs,PartRef("get_subimage",[arg],_),eos)
  ;  !AssignmentStmt(label,lhs,FunctionReference("get_subimage",
                                      [arg,<cl-wrap-name>lhs]),eos)

// Add variables associated with ForOpenCL calls
cafe-add-cl(|st,ct) =
{use_stmt
  :  ?OfpSpecPart(decls)
  ;  <fast-build-use-stmt> "ForOpenCL" => use_stmt
//  ;  <fast-build-type-decl(|IntrinsicType(INTEGER(no-kind())),[])> "cl_size_" => size
  ;  <map(ct-add-type-decl(|ct))> <hashtable-keys()> ct
  ;  !OfpSpecPart(<concat>[[use_stmt,<id>],decls])
}

// Replace coallocate statement with function call to alloc memory on device
cafe-add-cl(|st,ct) =
{device
  :  ?CoAllocateStmt(label,type,alloc_list,options,image,eos)
  ;  <cl-wrap-name> <cafe-subimage> image => device
  ;  <map(ct-add-symbol(|ct,DerivedType("CLBuffer",[]),[]))>
         <map(fast-allocation-object)> alloc_list
  ;  <map(fast-allocation-object)> alloc_list
  ;  <map(opencl-build-create-buffer(|st,device))> <id>
}
