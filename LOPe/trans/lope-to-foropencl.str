module lope-to-foropencl

imports
   libstratego-lib
   AST
   LOPe
   ofp-simplify

signature
  constructors

  ALLOCATED : ALLOCATED


strategies //=================START OF STRATEGIES============================

  io-lope-to-foropencl =
    io-wrap(lope-to-foropencl)

  lope-to-foropencl =
{ st,lt
        :  ?OfpProgram(name, units)
        ;  new-hashtable => st
        ;  new-hashtable => lt
        ;  !OfpProgram(name, units)
        ;  topdown(try(fast-get-symbols(|st)))
        ;  topdown(try(cafe-get-symbols(|st,lt)))
        ;  bottomup(try(cafe-add-cl(|st,lt)))
}

rules //========================START OF RULES===============================

// FAST strategies (MOVE TO fortran/trans)
// ---------------

fast-allocation-object =
     ?Allocation(object,_,_)
  ;  !object

// assume literals for now, otherwise get const from symbol table
// TODO - use choice to use lb info
fast-build-allocation-size(|st,obj) =
     ?AllocateShapeSpec(no-lower-bound,ub)
  ;  !ub

fast-allocation-size(|st) =
     ?Allocation(obj,[shape],_)
  ;  !(obj,<fast-build-allocation-size(|st,obj)> shape)

fast-fix-no-lower-bound =
     ?no-lower-bound()
  ;  !"1"

fast-update-allocation-dim =
     ?(AllocateShapeSpec(lb,ub),DimSpec(_,_))
  ;  !DimSpec(lb,ub)

fast-update-allocation-codim =
     ?(AllocateCoshapeSpec(lb,ub),DimSpec(_,_))
  ;  !DimSpec(lb,ub)

fast-update-allocation-symbol(|st) =
{shape,coshape,attrs
  :  topdown(try(fast-fix-no-lower-bound))
  ;  ?Allocation(obj,alloc_shape,alloc_coshape)
  ;  <hashtable-get(|obj)> st
  ;  ?(type,decl_attrs)
  ;  <elem> (ALLOCATABLE(),decl_attrs)   // ensure this symbol is allocatable
  ;  <fetch-elem(?Dimension(decl_shape))> decl_attrs
  ;  <fetch-elem(?Codimension(decl_coshape))> decl_attrs
  ;  <zip(fast-update-allocation-dim)>   (alloc_shape,  decl_shape)   =>   shape
  ;  <zip(fast-update-allocation-codim)> (alloc_coshape,decl_coshape) => coshape
  ;  <filter( try(?Dimension(_)   ; !Dimension(shape))     )> decl_attrs
  ;  <filter( try(?Codimension(_) ; !Codimension(coshape)) )> <id>
  ;  <filter( try(?ALLOCATABLE()  ; !ALLOCATED()) )> <id> => attrs
  ;  <hashtable-put(|obj,(type,attrs))> st
}

fast-build-use-stmt =
     ?module_name
  ;  !UseStmt(no-label(), no-module-nature(), module_name, [], eos("\n"))

fast-build-type-decl(|type,attrs) =
     ?object_name
  ;  !TypeDeclarationStmt(  no-label()
                          , type
                          , attrs
                          , [EntityDecl(object_name,[],[],no-char-length(),no-init())]
                          , eos("\n"))


// Utility strategies
// ------------------
cl-wrap-name =
     is-string
  ;  <conc-strings>("cl_", <id>, "_")

ofp-ident
  :  EntityDecl(ident,_,_,_,_) -> ident

// add subimage device
//
cafe-add-subimage-symbol(|ct,lhs) =
     ?PartRef("get_subimage",args,no-image-selector())
  ;  <hashtable-put(|lhs, (<cl-wrap-name>lhs,DerivedType("CLDevice",[]),[]))> ct
  ;  !PartRef("get_subimage",args,no-image-selector())

// Add a symbol to the symbol table
st-add-symbol(|st,type,attrs) =
     ?obj
  ;  <hashtable-put(|obj,(type,attrs))> st

// Add a symbol to the CAFe symbol table
ct-add-symbol(|ct,type,attrs) =
     ?obj
  ;  <hashtable-put(|obj,(<cl-wrap-name>obj,type,attrs))> ct

ct-add-type-decl(|ct) =
     ?ident
  ;  <hashtable-get(|ident)> ct
  ;  ?(clident,type,attrs)
  ;  <fast-build-type-decl(|type,attrs)> clident


// Build symbol table
// ------------------

// Add declared variables to symbol table
fast-get-symbols(|st) =
     ?TypeDeclarationStmt(label,type,attrs,vars,eos)
  ;  <map(st-add-symbol(|st,type,attrs))> <map(ofp-ident)> vars
  ;  !TypeDeclarationStmt(label,type,attrs,vars,eos)

// Update symbol table with information from allocate statements
fast-get-symbols(|st) =
     ?AllocateStmt(label,type,alloc_list,options,eos)
  ;  <map(fast-update-allocation-symbol(|st))> alloc_list
  ;  !AllocateStmt(label,type,alloc_list,options,eos)


// Get symbols specifically relevant to CAFe
// -----------------------------------------

cafe-get-symbols(|st,ct) =
     ?AssignmentStmt(label,lhs,rhs,eos)
  ;  <cafe-add-subimage-symbol(|ct,lhs)> rhs
  ;  !AssignmentStmt(label,lhs,rhs,eos)

cafe-get-symbols(|st,ct) =
     ?CoAllocateStmt(label,type,alloc_list,options,image,eos)
  ;  <map(fast-allocation-object)> alloc_list
  ;  <map(ct-add-symbol(|ct,DerivedType("CLBuffer",[]),[]))>
         <map(fast-allocation-object)> alloc_list
  ;  !CoAllocateStmt(label,type,alloc_list,options,image,eos)

cafe-subimage =
     ?ImageExecutionSelector([device])
  ;  !device


// Add ForOpenCL calls to the AST
// ------------------------------

cafe-add-cl(|st,ct) =
     ?AssignmentStmt(label,lhs,PartRef("get_subimage",[arg],_),eos)
  ;  !AssignmentStmt(label,lhs,FunctionReference("get_subimage",
                                      [arg,<cl-wrap-name>lhs]),eos)

cafe-add-cl(|st,ct) =
{use_stmt,size
  :  ?OfpSpecPart(decls)
  ;  <fast-build-use-stmt> "ForOpenCL" => use_stmt
  ;  <fast-build-type-decl(|IntrinsicType(INTEGER(no-kind())),[])> "cl_size_" => size
  ;  <map(ct-add-type-decl(|ct))> <hashtable-keys()> ct
  ;  !OfpSpecPart(<concat>[[use_stmt,size,<id>],decls])
}

cafe-add-cl(|st,ct) =
{device,sizes
  :  ?CoAllocateStmt(label,type,alloc_list,options,image,eos)
  ;  <cl-wrap-name> <cafe-subimage> image => device
  ;  <map(fast-allocation-size(|st))> alloc_list => sizes
  ;  <map(fast-allocation-object)> alloc_list
  ;  <map(ct-add-symbol(|ct,DerivedType("CLBuffer",[]),[]))>
         <map(fast-allocation-object)> alloc_list
  ;  !AssignmentStmt(no-label,"cl_A_",
         FunctionReference("createBuffer",
                           [device,"CL_MEM_READ_WRITE","cl_size_","C_LOC(A)"]),eos("\n"))
}
