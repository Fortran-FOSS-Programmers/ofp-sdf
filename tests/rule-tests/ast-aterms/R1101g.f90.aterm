OfpProgram(
  None()
, [ OfpMainProgram(
      Some(OfpName("my_prog"))
    , OfpScope(
        OfpSpecPart(
          [ OfpTypeDeclarationStmt(
              None()
            , OfpType(REAL(), None())
            , []
            , [OfpEntityDecl(OfpName("i"), None(), None(), None(), None())]
            ){Comment("
  ")}
          ]
        )
      , OfpExecPart(
          [ OfpAssignmentStmt(
              None()
            , OfpVarDef(OfpName("i"))
            , OfpLiteral("1", OfpType(INTEGER(), None()))
            ){Comment("
")}
          ]
        )
      , OfpFuncPart(
          [ OfpSubroutine(
              OfpName("sub")
            , OfpScope(
                OfpSpecPart([])
              , OfpExecPart([])
              , OfpFuncPart([])
              , Some(
                  OfpSubroutineStmt(
                    None()
                  , OfpName("sub")
                  , OfpArgList([])
                  , OfpPrefix([])
                  , OfpSuffix([])
                  ){Comment("
  ")}
                )
              , None()
              , Some(OfpEndSubroutineStmt(None(), Some(OfpName("sub"))){Comment("
")})
              )
            )
          ]
        )
      , Some(OfpProgramStmt(None(), OfpName("my_prog")){Comment("
  ")})
      , Some(OfpContainsStmt(None()){Comment("
  ")})
      , Some(OfpEndProgramStmt(None(), Some(OfpName("my_prog"))){Comment("
")})
      )
    )
  ]
){Comment("! Test main-program
!
!      main-program  is  [ program-stmt ]
!                          [ specification-part ]
!                          [ execution-part ]
!                          [ internal-subprogram-part ]
!                        end-program-stmt
!
!      program-stmt  is  PROGRAM program-name
!
!      end-program-stmt  is  END [ PROGRAM [ program-name ] ]
!
! Not tested here: specification-part, execution-part, and 
! internal-subprogram-part.

! Add all of the optionals together.
")}
