
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R7xx Expressions and Assignments
%%%%%%%%%%

%% module languages/fortran/syntax/R700Expressions
module R700Expressions

imports
  %% languages/fortran/syntax/FortranLex
  %% languages/fortran/syntax/R1200Procedures
  %% languages/fortran/syntax/R600UseDataObjects
  FortranLex
  R1200Procedures
  R600UseDataObjects

exports

sorts

  IntrinsicOperator                   %% R309
  DefinedOperator                     %% R310
  ExtendedIntrinsicOp                 %% R311

  Primary                             %% R701
  Level1Expr                          %% R702
  DefinedUnaryOp                      %% R703
  MultOperand                         %% R704
  AddOperand                          %% R705
  Level2Expr                          %% R706
  PowerOp                             %% R707
  MultOp                              %% R708
  AddOp                               %% R709
  Level3Expr                          %% R710
  ConcatOp                            %% R711
  Level4Expr                          %% R712
  RelOp                               %% R713
  AndOperand                          %% R714
  OrOperand                           %% R715
  EquivOperand                        %% R716
  Level5Expr                          %% R717
  NotOp                               %% R718
  AndOp                               %% R719
  OrOp                                %% R720
  EquivOp                             %% R721
  Expr                                %% R722
  DefinedBinaryOp                     %% R723
  LogicalExpr                         %% R724
  DefaultCharExpr                     %% R725
  IntExpr                             %% R726
  NumericExpr                         %% R727
  SpecificationExpr                   %% R728
  ConstantExpr                        %% R729
  DefaultCharConstantExpr             %% R730
  IntConstantExpr                     %% R731
  AssignmentStmt                      %% R732
  PointerAssignmentStmt               %% R733
  DataPointerObject                   %% R734
  BoundsSpec                          %% R735
  BoundsRemapping                     %% R736
  DataTarget                          %% R737
  ProcPointerObject                   %% R738
  ProcComponentRef                    %% R739
  ProcTarget                          %% R740
  WhereStmt                           %% R741
  WhereConstruct                      %% R742
  WhereConstructStmt                  %% R743
  WhereBodyConstruct                  %% R744
  WhereAssignmentStmt                 %% R745
  MaskExpr                            %% R746
  MaskedElsewhereStmt                 %% R747
  ElsewhereStmt                       %% R748
  EndWhereStmt                        %% R749
  ForallConstruct                     %% R750
  ForallConstructStmt                 %% R751
  ForallHeader                        %% R752
  ForallTripletSpec                   %% R753
  ForallLimit                         %% R754
  ForallStep                          %% R755
  ForallBodyConstruct                 %% R756
  ForallAssignmentStmt                %% R757
  EndForallStmt                       %% R758
  ForallStmt                          %% R759


context-free syntax


%%R309
    PowerOp
  | MultOp
  | AddOp
  | ConcatOp
  | RelOp
  | NotOp
  | AndOp
  | OrOp
  | EquivOp                     -> IntrinsicOperator     {cons("intrinsic-operator")}

%%R310
    DefinedUnaryOp
  | DefinedBinaryOp
  | ExtendedIntrinsicOp         -> DefinedOperator       {cons("defined-operator")}

%%R311
  IntrinsicOperator             -> ExtendedIntrinsicOp   {cons("extended-intrinsic-op")}

%%R701
%%TODO-AMB
  Constant                      -> Primary          {cons("Primary_AMB")}
  Designator                    -> Primary          {cons("Primary_AMB")}
  ArrayConstructor              -> Primary          {cons("Primary_AMB")}
  StructureConstructor          -> Primary          {cons("Primary_AMB")}
  FunctionReference             -> Primary          {cons("Primary_AMB")}
  TypeParamInquiry              -> Primary          {cons("Primary_AMB")}
%%TypeParamName                 -> Primary          {reject}                %% > Designator
  '(' Expr ')'                  -> Primary          {cons("Primary_AMB")}

%%TODO-DELETE   Scon                          -> Primary          {cons("primary-scon")}
%%TODO-DELETE   UnsignedArithmeticConstant    -> Primary          {cons("const-expr")}
%%TODO- needed to resolve ambiguity? DataRef
%%TODO ???????  ArrayConstructor              -> SFPrimary

%%R702
  DefinedUnaryOp? Primary                  -> Level1Expr      {cons("Level1Expr")}

%%R703
  Dop                                      -> DefinedUnaryOp  {cons("defined-unary-op")}

%%R704
  Level1Expr (PowerOp MultOperand)?        -> MultOperand     {cons("MultOperand")}

%%R705
  (AddOperand MultOp)? MultOperand         -> AddOperand      {cons("AddOperand")}

%%R706 % ELI: "We need to distinguish unary operators" SDF: ambig on "-2" on next 2 lines 
%%TODO-F08: is this still true?
%%R706
  (Level2Expr? AddOp)? AddOperand          -> Level2Expr      {cons("Level2Expr")}

%%R707
  '**'                                     -> PowerOp         {cons("power-op")}

%%R708
  '*'                                      -> MultOp          {cons("mult-op_TIMES")}
  '/'                                      -> MultOp          {cons("mult-op_DIV")}

%%R709
  '+'                                      -> AddOp           {cons("add-op_PLUS")}
  '-'                                      -> AddOp           {cons("add-op_MINUS")}

%%R710
  (Level3Expr ConcatOp)? Level2Expr        -> Level3Expr      {cons("Level3Expr")}

%%R711
  '//'                                     -> ConcatOp        {cons("concat-op")}

%%R712
  (Level3Expr RelOp)? Level3Expr           -> Level4Expr      {cons("Level4Expr")}

%%R713
  '.EQ.'                                   -> RelOp           {cons("rel-op_EQ")}
  '.NE.'                                   -> RelOp           {cons("rel-op_NE")}
  '.LT.'                                   -> RelOp           {cons("rel-op_LT")}
  '.LE.'                                   -> RelOp           {cons("rel-op_LE")}
  '.GT.'                                   -> RelOp           {cons("rel-op_GT")}
  '.GE.'                                   -> RelOp           {cons("rel-op_GE")}
  '=='                                     -> RelOp           {cons("rel-op_EQ")}
  '/='                                     -> RelOp           {cons("rel-op_NE")}
  '<'                                      -> RelOp           {cons("rel-op_LT")}
  '<='                                     -> RelOp           {cons("rel-op_LE")}
  '>'                                      -> RelOp           {cons("rel-op_GT")}
  '>='                                     -> RelOp           {cons("rel-op_GE")}

%%R714
  NotOp? Level4Expr                        -> AndOperand      {cons("AndOperand")}

%%R715
  (OrOperand AndOp)? AndOperand            -> OrOperand       {cons("OrOperand")}

%%R716
  (EquivOperand OrOp)? OrOperand           -> EquivOperand    {cons("EquivOperand")}

%%R717
  (Level5Expr EquivOp)? EquivOperand       -> Level5Expr      {cons("Level5Expr")}

%%R718
  '.NOT.'                                  -> NotOp           {cons("not-op")}

%%R719
  '.AND.'                                  -> AndOp           {cons("and-op")}

%%R720
  '.OR.'                                   -> OrOp            {cons("or-op")}

%%R721
  '.EQV.'                                  -> EquivOp         {cons("equiv-op_EQV")}
  '.NEQV.'                                 -> EquivOp         {cons("equiv-op_NEQV")}

%%R722
%%TODO-short circuit the expr nonsense and make it more sensible
%%TODO-PUTBACK/FIXME  ( Expr DefinedBinaryOp )? Level5Expr     -> Expr            {cons("expr")}
%%Primary                                    -> Expr            {cons("Expr")}



%%R723
  Dop                                      -> DefinedBinaryOp {cons("defined-binary-op")}

%%TODO - what to do about this
%%R725-R734 chain rule deleted

%%R724
  Expr                                     -> LogicalExpr     {cons("logical-expr")}

%%R725
  Expr                                     -> DefaultCharExpr {cons("default-char-expr")}

%%R726
  Expr                                     -> IntExpr         {cons("IntExpr")}

%%R727
  Expr                                     -> NumericExpr     {cons("numeric-expr")}

%%R728
%%       scalar-int-expr replaced by int-expr
%%
  IntExpr                                  -> SpecificationExpr  {cons("SpecificationExpr")}

%%R729
  Expr                                     -> ConstantExpr    {cons("constant-expr")}

%%R730
  DefaultCharExpr                          -> DefaultCharConstantExpr  {cons("default-char-constant-expr")}

%%R731
  IntExpr                                  -> IntConstantExpr {cons("int-constant-expr")}

%%R732
  LblDef Variable '=' Expr             EOS -> AssignmentStmt  {cons("assignment-stmt")}

%% todo: check. Original ISO: assignmentStatement is variable '=' expression
%%TODO-DELETE   LblDef Name '%' Name '=' Expr EOS                                      -> AssignmentStmt
%%TODO-DELETE   LblDef Name '%' DataRef '=' Expr EOS                                   -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '%' Name '=' Expr EOS                   -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '%' DataRef '=' Expr EOS                -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFDummyArgNameList ')' '%' Name '=' Expr EOS           -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFDummyArgNameList ')' '%' DataRef '=' Expr EOS        -> AssignmentStmt
%%TODO-DELETE   LblDef Name '=' Expr EOS                                               -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '=' Expr EOS                            -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' SubstringRange '=' Expr EOS             -> AssignmentStmt

%%R733
  LblDef
       ( DataPointerObject ( '(' {BoundsSpec      ','}+ ')' )? '=>' DataTarget )
    |  ( DataPointerObject   '(' {BoundsRemapping ','}+ ')'    '=>' DataTarget )
    |  ( ProcPointerObject                                     '=>' ProcTarget )
    EOS -> PointerAssignmentStmt  {cons("pointer-assignment-stmt")}

%%TODO-DELETE these
%%TODO   LblDef Name '%' Name '=>' DataTarget EOS                               -> PointerAssignmentStmt
%%TODO   LblDef Name '%' DataRef '=>' DataTarget EOS                            -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFExprList ')' '%' Name '=>' DataTarget EOS            -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFExprList ')' '%' DataRef '=>' DataTarget EOS         -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFDummyArgNameList ')' '%' Name '=>' DataTarget EOS    -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFDummyArgNameList ')' '%' DataRef '=>' DataTarget EOS -> PointerAssignmentStmt

%%R734
%%          variable substituted for scalar-variable
%%
    ( VariableName                          )
  | ( Variable '%' DataPointerComponentName )            -> DataPointerObject  {cons("data-pointer-object")}

%%R735
  LowerBoundExpr ':'                                     -> BoundsSpec         {cons("bounds-spec")}

%%R736
  LowerBoundExpr ':' UpperBoundExpr                      -> BoundsRemapping    {cons("bounds-remappig")}

%%R737
%%       Variable producing DataTarget is Ambiguous
%%
  Expr      -> DataTarget

%%R738
    ProcPointerName
  | ProcComponentRef                                   -> ProcPointerObject {cons("proc-pointer-object")}

%%R739
%%          variable substituted for scalar-variable
%%
  Variable '%' ProcedureComponentName                  -> ProcComponentRef  {cons("proc-component-ref")}

%%R740
    Expr
  | ProcedureName
  | ProcComponentRef                                   -> ProcTarget        {cons("proc-target")}

%%R741
  LblDef 'WHERE' '(' MaskExpr ')' WhereAssignmentStmt  -> WhereStmt         {cons("where-stmt")}

%%R742
%%TODO-F08-FIXME
%% todo: sdf-fy
%%  Where     EndWhereStmt      -> WhereConstruct
%%  ElseWhere EndWhereStmt      -> WhereConstruct
%%  WhereConstructStmt          -> Where
%%  Where AssignmentStmt        -> Where
%%  Where ElsewhereStmt         -> ElseWhere
%%  ElseWhere AssignmentStmt    -> ElseWhere
%%TODO-DELETE  WhereConstructStmt AssignmentStmt* 
%%TODO-DELETE                (ElsewhereStmt AssignmentStmt*)? 
%%TODO-DELETE  EndWhereStmt                                  -> WhereConstruct  {cons("where-construct")}

%%R742
  WhereConstructStmt
    (                    WhereBodyConstruct*)
    (MaskedElsewhereStmt WhereBodyConstruct*)*
    (ElsewhereStmt       WhereBodyConstruct*)? 
  EndWhereStmt                                  -> WhereConstruct  {cons("where-construct")}

%%R743
%%       Ident substituted for where-construct-name
%%
  LblDef (Ident ':')? 'WHERE' '(' MaskExpr ')' EOS -> WhereConstructStmt  {cons("where-construct-stmt")}

%%R744
    WhereAssignmentStmt
  | WhereStmt
  | WhereConstruct                                 -> WhereBodyConstruct  {cons("where-body-construct")}

%%R745
%%TODO-F08 - make it so label can't be part of assignment-stmt
%%
  AssignmentStmt                                   -> WhereAssignmentStmt {cons("where-assignment-stmt")}

%%R746
  LogicalExpr                                      -> MaskExpr            {cons("mask-expr")}

%%R747
%%       Ident substituted for where-construct-name
%%
  LblDef 'ELSEWHERE' '(' MaskExpr ')' Ident?   EOS -> MaskedElsewhereStmt {cons("masked-elsewhere-stmt")}

%%R748
%%       Ident substituted for where-construct-name
%%
  LblDef 'ELSEWHERE' Ident?                    EOS -> ElsewhereStmt       {cons("elsewhere-stmt")}

%%R749
%%       Ident substituted for where-construct-name
%%
  LblDef 'END' 'WHERE' Ident?                  EOS -> EndWhereStmt        {cons("end-where-stmt")}

%%R750
  ForallConstructStmt
    ForallBodyConstruct*
  EndForallStmt                                    -> ForallConstruct     {cons("forall-construct")}

%%R751
  LblDef (ForallConstructName ':')?
         'FORALL' ForallHeader                 EOS -> ForallConstructStmt  {cons("forall-construct-stmt")}

%%752
%%       mask-expr substituted for scalar-mask-expr
%%
  '('
     (TypeSpec '::')? {ForallTripletSpec ','}+
                      (',' MaskExpr)?
  ')'                                              -> ForallHeader         {cons("forall-header")}

%%753
  IndexName '=' ForallLimit
            ':' ForallLimit (':' ForallStep)?      -> ForallTripletSpec    {cons("forall-triplet-spec")}

%%754
%%        int-expr substituted for scalar-int-expr
%%
  IntExpr                                          -> ForallLimit          {cons("forall-limit")}

%%755
%%        int-expr substituted for scalar-int-expr
%%
  IntExpr                                          -> ForallStep           {cons("forall-step")}

%%756
    ForallAssignmentStmt
  | WhereStmt
  | WhereConstruct
  | ForallConstruct
  | ForallStmt                                     -> ForallBodyConstruct  {cons("forall-body-construct")}

%%757
    AssignmentStmt
  | PointerAssignmentStmt                          -> ForallAssignmentStmt {cons("forall-assignment-stmt")}

%%758
  LblDef 'END' 'FORALL' ForallConstructName?   EOS -> EndForallStmt        {cons("end-forall-stmt")}

%%759
  LblDef 'FORALL' ForallHeader ForallAssignmentStmt  EOS -> ForallStmt     {cons("forall-stmt")}


%%TODO - what with the following
%%
%%  SFExpr ':' Expr ':' Expr                      -> SFExprList
%%  SFExpr ':' ':' Expr                           -> SFExprList
%%  ':' Expr ':' Expr                             -> SFExprList
%%  ':' ':' Expr                                  -> SFExprList
%%  ':'                                           -> SFExprList
%%  ':' Expr                                      -> SFExprList
%%  SFExpr                                        -> SFExprList
%%  SFExpr ':'                                    -> SFExprList
%%  SFExpr ':' Expr                               -> SFExprList
%%  SFExprList ',' SectionSubscript               -> SFExprList
%%TODO   SFDummyArgNameList ',' ':'                    -> SFExprList
%%TODO   SFDummyArgNameList ',' ':' Expr               -> SFExprList
%% problem with code like P(A,2). A can be both SFExprList and SFDummyargnameList. 
%% Conflict with 3 lines above: SFExprList ',' SectionSubscript  
%%  SFDummyArgNameList ',' SFExpr                 -> SFExprList
%%TODO   SFDummyArgNameList ',' SFExpr ':'             -> SFExprList
%%TODO   SFDummyArgNameList ',' SFExpr ':' Expr        -> SFExprList

%%  SFTerm                                        -> SFExpr
%%  Sign AddOperand                               -> SFExpr
%%  SFExpr AddOp AddOperand                       -> SFExpr
%%  SFFactor                                      -> SFTerm
%%  SFTerm MultOp MultOperand                     -> SFTerm
%%  SFPrimary                                     -> SFFactor
%%  SFPrimary PowerOp MultOperand                 -> SFFactor
%%  Icon                                          -> SFPrimary
%%  Name                                          -> SFPrimary
%%  DataRef                                       -> SFPrimary
%%  FunctionReference                             -> SFPrimary
%%  '(' Expr ')'                                  -> SFPrimary


context-free priorities

%% See Clause 7.1.3 for precedence of operators

%% defined-unary-op has highest priority followed by **
%%
  Expr '**' Expr        -> Expr {cons("PowerExpr"), right}
  >
  { left:
    Expr '*' Expr       -> Expr {cons("MultExpr"), left}
    Expr '/' Expr       -> Expr {cons("DivExpr"),  left}
  }
  >
  {
    '+' Expr            -> Expr {cons("UnaryPlusExpr")}
    '-' Expr            -> Expr {cons("UnaryMinusExpr")}
  }
  >
  { left:
    Expr '+'  Expr      -> Expr {cons("PlusExpr"),  left}
    Expr '-'  Expr      -> Expr {cons("MinusExpr"), left}
  }
  > Expr '//' Expr      -> Expr {cons("ConcatExpr"), left}
  >
  { left:
    Expr '=='  Expr     -> Expr {cons("EqExpr"),    left}
    Expr '/='  Expr     -> Expr {cons("NotEqExpr"), left}
  }
  > Expr '.NOT.' Expr   -> Expr {cons("NotExpr"), left}
  > Expr '.AND.' Expr   -> Expr {cons("AndExpr"), left}
  > Expr '.OR.'  Expr   -> Expr {cons("OrExpr"),  left}
  >
  { left:
    Expr '.EQV.'  Expr  -> Expr {cons("EqvExpr"),    left}
    Expr '.NEQV.' Expr  -> Expr {cons("NotEqvExpr"), left}
  }
%%
%% defined-binary-op has lowest priority

