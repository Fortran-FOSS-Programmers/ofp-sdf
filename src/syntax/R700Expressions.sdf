
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R7xx Expressions and Assignments
%%%%%%%%%%

%% module languages/fortran/syntax/R700Expressions
module R700Expressions

imports
  %% languages/fortran/syntax/FortranLex
  %% languages/fortran/syntax/R1200Procedures
  %% languages/fortran/syntax/R600UseDataObjects
  FortranLex
  R1200Procedures
  R600UseDataObjects

exports

sorts
  CExpr
  ComplexConst COperand CPrimary
  LogicalConstant
  Stride
  UnsignedArithmeticConstant

  Primary                             %% R701
  Level1Expr                          %% R702
  DefinedUnaryOp                      %% R703
  MultOperand                         %% R704
  AddOperand                          %% R705
  Level2Expr                          %% R706
  
  Level3Expr                          %% R710

  Level4Expr                          %% R712

  AndOperand                          %% R714
  OrOperand                           %% R715
  EquivOperand                        %% R716
  Level5Expr                          %% R717

  Expr                                %% R722
  DefinedBinaryOp                     %% R723

  LogicalExpr                         %% R724
  DefaultCharExpr                     %% R725
  IntExpr                             %% R726
  NumericExpr                         %% R727
  SpecificationExpr                   %% R728
  ConstantExpr                        %% R729
  DefaultCharConstantExpr             %% R730
  IntConstantExpr                     %% R731
  AssignmentStmt                      %% R732
  PointerAssignmentStmt               %% R733
  DataPointerObject                   %% R734
  BoundsSpec                          %% R735
  BoundsRemapping                     %% R736
  DataTarget                          %% R737
  ProcPointerObject                   %% R738
  ProcComponentRef                    %% R739
  ProcTarget                          %% R740
  WhereStmt                           %% R741
  WhereConstruct                      %% R742
  WhereConstructStmt                  %% R743
  WhereBodyConstruct                  %% R744
  WhereAssignmentStmt                 %% R745
  MaskExpr                            %% R746
  MaskedElsewhereStmt                 %% R747
  ElsewhereStmt                       %% R748
  EndWhereStmt                        %% R749
  ForallConstruct                     %% R750
  ForallConstructStmt                 %% R751
  ForallHeader                        %% R752
  ForallTripletSpec                   %% R753
  ForallLimit                         %% R754
  ForallStep                          %% R755
  ForallBodyConstruct                 %% R756
  ForallAssignmentStmt                %% R757
  EndForallStmt                       %% R758
  ForallStmt                          %% R759

context-free syntax
%%%% TODO: put these under the right section

%%  UFTerm                        -> UFExpr
%%  Sign UFTerm                   -> UFExpr
%%  UFExpr AddOp UFTerm           -> UFExpr
%%  UFFactor                      -> UFTerm
%%  UFTerm MultOp UFFactor        -> UFTerm
%%  UFTerm ConcatOp UFPrimary     -> UFTerm
%%  UFPrimary                     -> UFFactor
%%  UFPrimary PowerOp UFFactor    -> UFFactor

%%  Icon                          -> UFPrimary
%%  Scon                          -> UFPrimary
%%  Name                          -> UFPrimary
%%  FunctionReference             -> UFPrimary
%%  DataRef                       -> UFPrimary
%%  '(' UFExpr ')'                -> UFPrimary

%%82,83
  (CExpr '//')? CPrimary    -> CExpr
  COperand                      -> CPrimary
  '(' CExpr ')'                 -> CPrimary
  Scon                          -> COperand
  Name                          -> COperand
  DataRef                       -> COperand
  FunctionReference             -> COperand

%%101
  Icon                          -> UnsignedArithmeticConstant
  Rcon                          -> UnsignedArithmeticConstant
  ComplexConst                  -> UnsignedArithmeticConstant

%%107
  '(' Expr ',' Expr ')'         -> ComplexConst

%%108
  '.true.' | '.false.'          -> LogicalConstant

%%R701
    Constant
  | Designator
  | ArrayConstructor
  | StructureConstructor
  | FunctionReference
  | TypeParamInquiry
  | TypeParamName
  | ( '(' Expr ')' )            -> Primary          {cons("primary")}

%%TODO-DELETE   Scon                          -> Primary          {cons("primary-scon")}
%%TODO-DELETE   UnsignedArithmeticConstant    -> Primary          {cons("const-expr")}
%%TODO- needed to resolve ambiguity? DataRef
%%TODO ???????  ArrayConstructor              -> SFPrimary

%%R702
  DefinedUnaryOp? Primary                  -> Level1Expr      {cons("level-1-expr")}

%%R703
  Dop                                      -> DefinedUnaryOp  {cons("defined-unary-op")}

%%R704
  Level1Expr  ('**'         MultOperand)?  -> MultOperand     {cons("mult-operand")}

%%R705
  (AddOperand ('*' | '/'))? MultOperand    -> AddOperand      {cons("add-operand")}

%%R706 % ELI: "We need to distinguish unary operators" SDF: ambig on "-2" on next 2 lines 
%%TODO-F08: is this still true?
%%R706
  (Level2Expr? ('+' | '-'))? AddOperand    -> Level2Expr      {cons("level-2-expr")}

%%R707
%%  '**'                                   -> PowerOp

%%R708
%%  ('*' | '/')                            -> MultOp

%%R709
%%  ('+' | '-')                            -> AddOp

%%R710
  (Level3Expr  '//')? Level2Expr           -> Level3Expr      {cons("level-3-expr")}

%%R711
%%  '//'                                   -> ConcatOp

%%R712
  ( Level3Expr
      (    '.EQ.'
         | '.NE.'
         | '.LT.'
         | '.LE.'
         | '.GT.'
         | '.GE.'
         | '=='
         | '/='
         | '<'
         | '<='
         | '>'
         | '>='
      )
   )? Level3Expr                           -> Level4Expr      {cons("level-4-expr")}

%%R713
%%    '.EQ.'
%%  | '.NE.'
%%  | '.LT.'
%%  | '.LE.'
%%  | '.GT.'
%%  | '.GE.'
%%  | '=='
%%  | '/='
%%  | '<'
%%  | '<='
%%  | '>'
%%  | '>='                                 -> RelOp

%%R714
  '.NOT.'? Level4Expr                      -> AndOperand      {cons("and-operand")}

%%R715
  ( OrOperand    '.AND.'   )? AndOperand   -> OrOperand       {cons("or-operand")}

%%R716
  ( EquivOperand '.OR.'    )? OrOperand    -> EquivOperand    {cons("equiv-operand")}

%%R717
  ( Level5Expr
      ('.EQV.' | '.NEQV.') )? EquivOperand -> Level5Expr      {cons("level-5-expr")}

%%R718
%% '.NOT.'                                 -> NotOp

%%R719
%% '.AND.'                                 -> AndOp

%%R720
%%  '.OR.'                                 -> OrOp

%%R721
%%    '.EQV.'
%%  | '.NEQV.'                             -> EquivOp

%%R722
  ( Expr DefinedBinaryOp )? Level5Expr     -> Expr            {cons("expr")}

%%R723
  Dop                                      -> DefinedBinaryOp {cons("defined-binary-op")}

%%TODO - what to do about this
%%R725-R734 chain rule deleted

%%R724
  Expr                                     -> LogicalExpr     {cons("logical-expr")}

%%R725
  Expr                                     -> DefaultCharExpr {cons("default-char-expr")}

%%R726
  Expr                                     -> IntExpr         {cons("int-expr")}

%%R727
  Expr                                     -> NumericExpr     {cons("numeric-expr")}

%%R728
%%       scalar-int-expr replaced by int-expr
%%
  IntExpr                                  -> SpecificationExpr  {cons("specification-expr")}

%%R729
  Expr                                     -> ConstantExpr    {cons("constant-expr")}

%%R730
  DefaultCharExpr                          -> DefaultCharConstantExpr  {cons("default-char-constant-expr")}

%%R731
  IntExpr                                  -> IntConstantExpr {cons("int-constant-expr")}

%%R732
  LblDef Variable '=' Expr             EOS -> AssignmentStmt  {cons("assignment-stmt")}

%% todo: check. Original ISO: assignmentStatement is variable '=' expression
%%TODO-DELETE   LblDef Name '%' Name '=' Expr EOS                                      -> AssignmentStmt
%%TODO-DELETE   LblDef Name '%' DataRef '=' Expr EOS                                   -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '%' Name '=' Expr EOS                   -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '%' DataRef '=' Expr EOS                -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFDummyArgNameList ')' '%' Name '=' Expr EOS           -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFDummyArgNameList ')' '%' DataRef '=' Expr EOS        -> AssignmentStmt
%%TODO-DELETE   LblDef Name '=' Expr EOS                                               -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '=' Expr EOS                            -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' SubstringRange '=' Expr EOS             -> AssignmentStmt

%%R733
  LblDef
       ( DataPointerObject ( '(' {BoundsSpec      ','}+ ')' )? '=>' DataTarget )
    |  ( DataPointerObject   '(' {BoundsRemapping ','}+ ')'    '=>' DataTarget )
    |  ( ProcPointerObject                                     '=>' ProcTarget )
    EOS -> PointerAssignmentStmt  {cons("pointer-assignment-stmt")}

%%TODO-DELETE these
%%TODO   LblDef Name '%' Name '=>' DataTarget EOS                               -> PointerAssignmentStmt
%%TODO   LblDef Name '%' DataRef '=>' DataTarget EOS                            -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFExprList ')' '%' Name '=>' DataTarget EOS            -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFExprList ')' '%' DataRef '=>' DataTarget EOS         -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFDummyArgNameList ')' '%' Name '=>' DataTarget EOS    -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFDummyArgNameList ')' '%' DataRef '=>' DataTarget EOS -> PointerAssignmentStmt

%%R734
    ( VariableName                                )
  | ( ScalarVariable '%' DataPointerComponentName )      -> DataPointerObject  {cons("data-pointer-object")}

%%R735
  LowerBoundExpr ':'                                     -> BoundsSpec         {cons("bounds-spec")}

%%R736
  LowerBoundExpr ':' UpperBoundExpr                      -> BoundsRemapping    {cons("bounds-remappig")}

%%R737
%%       Variable producing DataTarget is Ambiguous
%%
  Expr      -> DataTarget

%%R738
    ProcPointerName
  | ProcComponentRef                                   -> ProcPointerObject {cons("proc-pointer-object")}

%%R739
  ScalarVariable '%' ProcedureComponentName            -> ProcComponentRef  {cons("proc-component-ref")}

%%R740
    Expr
  | ProcedureName
  | ProcComponentRef                                   -> ProcTarget        {cons("proc-target")}

%%R741
  LblDef 'WHERE' '(' MaskExpr ')' WhereAssignmentStmt  -> WhereStmt         {cons("where-stmt")}

%%R742
%%TODO-F08-FIXME
%% todo: sdf-fy
%%  Where     EndWhereStmt      -> WhereConstruct
%%  ElseWhere EndWhereStmt      -> WhereConstruct
%%  WhereConstructStmt          -> Where
%%  Where AssignmentStmt        -> Where
%%  Where ElsewhereStmt         -> ElseWhere
%%  ElseWhere AssignmentStmt    -> ElseWhere
%%TODO-DELETE  WhereConstructStmt AssignmentStmt* 
%%TODO-DELETE                (ElsewhereStmt AssignmentStmt*)? 
%%TODO-DELETE  EndWhereStmt                                  -> WhereConstruct  {cons("where-construct")}

%%R742
  WhereConstructStmt
    (                    WhereBodyConstruct*)
    (MaskedElsewhereStmt WhereBodyConstruct*)*
    (ElsewhereStmt       WhereBodyConstruct*)? 
  EndWhereStmt                                  -> WhereConstruct  {cons("where-construct")}

%%R743
%%       Ident substituted for where-construct-name
%%
  LblDef (Ident ':')? 'WHERE' '(' MaskExpr ')' EOS -> WhereConstructStmt  {cons("where-construct-stmt")}

%%R744
    WhereAssignmentStmt
  | WhereStmt
  | WhereConstruct                                 -> WhereBodyConstruct  {cons("where-body-construct")}

%%R745
%%TODO-F08 - make it so label can't be part of assignment-stmt
%%
  AssignmentStmt                                   -> WhereAssignmentStmt {cons("where-assignment-stmt")}

%%R746
  LogicalExpr                                      -> MaskExpr            {cons("mask-expr")}

%%R747
%%       Ident substituted for where-construct-name
%%
  LblDef 'ELSEWHERE' '(' MaskExpr ')' Ident?   EOS -> MaskedElsewhereStmt {cons("masked-elsewhere-stmt")}

%%R748
%%       Ident substituted for where-construct-name
%%
  LblDef 'ELSEWHERE' Ident?                    EOS -> ElsewhereStmt       {cons("elsewhere-stmt")}

%%R749
%%       Ident substituted for where-construct-name
%%
  LblDef 'END' 'WHERE' Ident?                  EOS -> EndWhereStmt        {cons("end-where-stmt")}

%%R750
  ForallConstructStmt
    ForallBodyConstruct*
  EndForallStmt                                    -> ForallConstruct     {cons("forall-construct")}

%%R751
  LblDef (ForallConstructName ':')?
         'FORALL' ForallHeader                 EOS -> ForallConstructStmt  {cons("forall-construct-stmt")}

%%752
%%       mask-expr substituted for scalar-mask-expr
%%
  '('
     (TypeSpec '::')? {ForallTripletSpec ','}+
                      (',' MaskExpr)?
  ')'                                              -> ForallHeader         {cons("forall-header")}

%%753
  IndexName '=' ForallLimit
            ':' ForallLimit (':' ForallStep)?      -> ForallTripletSpec    {cons("forall-triplet-spec")}

%%754
%%        int-expr substituted for scalar-int-expr
%%
  IntExpr                                          -> ForallLimit          {cons("forall-limit")}

%%755
%%        int-expr substituted for scalar-int-expr
%%
  IntExpr                                          -> ForallStep           {cons("forall-step")}

%%756
    ForallAssignmentStmt
  | WhereStmt
  | WhereConstruct
  | ForallConstruct
  | ForallStmt                                     -> ForallBodyConstruct  {cons("forall-body-construct")}

%%757
    AssignmentStmt
  | PointerAssignmentStmt                          -> ForallAssignmentStmt {cons("forall-assignment-stmt")}

%%758
  LblDef 'END' 'FORALL' ForallConstructName?   EOS -> EndForallStmt        {cons("end-forall-stmt")}

%%759
  LblDef 'FORALL' ForallHeader ForallAssignmentStmt  EOS -> ForallStmt     {cons("forall-stmt")}


%%TODO - what with the following
%%
%%  SFExpr ':' Expr ':' Expr                      -> SFExprList
%%  SFExpr ':' ':' Expr                           -> SFExprList
%%  ':' Expr ':' Expr                             -> SFExprList
%%  ':' ':' Expr                                  -> SFExprList
%%  ':'                                           -> SFExprList
%%  ':' Expr                                      -> SFExprList
%%  SFExpr                                        -> SFExprList
%%  SFExpr ':'                                    -> SFExprList
%%  SFExpr ':' Expr                               -> SFExprList
%%  SFExprList ',' SectionSubscript               -> SFExprList
%%TODO   SFDummyArgNameList ',' ':'                    -> SFExprList
%%TODO   SFDummyArgNameList ',' ':' Expr               -> SFExprList
%% problem with code like P(A,2). A can be both SFExprList and SFDummyargnameList. 
%% Conflict with 3 lines above: SFExprList ',' SectionSubscript  
%%  SFDummyArgNameList ',' SFExpr                 -> SFExprList
%%TODO   SFDummyArgNameList ',' SFExpr ':'             -> SFExprList
%%TODO   SFDummyArgNameList ',' SFExpr ':' Expr        -> SFExprList

%%  SFTerm                                        -> SFExpr
%%  Sign AddOperand                               -> SFExpr
%%  SFExpr AddOp AddOperand                       -> SFExpr
%%  SFFactor                                      -> SFTerm
%%  SFTerm MultOp MultOperand                     -> SFTerm
%%  SFPrimary                                     -> SFFactor
%%  SFPrimary PowerOp MultOperand                 -> SFFactor
%%  Icon                                          -> SFPrimary
%%  Name                                          -> SFPrimary
%%  DataRef                                       -> SFPrimary
%%  FunctionReference                             -> SFPrimary
%%  '(' Expr ')'                                  -> SFPrimary
