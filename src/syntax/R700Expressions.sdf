
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R7xx Expressions and Assignments
%%%%%%%%%%

%% module languages/fortran/syntax/R700Expressions
module R700Expressions

imports
  %% languages/fortran/syntax/FortranLex
  %% languages/fortran/syntax/R1200Procedures
  %% languages/fortran/syntax/R600UseDataObjects
  FortranLex
  R1200Procedures
  R600UseDataObjects

exports

sorts
  AddOp AndOp AssignmentStmt
  BoundsRemappingList BoundsSpecList
  CExpr CharExpr CharInitializationExpr
  ComplexConst ConcatOp COperand CPrimary
  DataPointerComponentName DataPointerObject
  DefaultCharExpr
  ElsewhereStmt EndWhereStmt
  EquivOp
  ForallConstructName ForallTripletSpecList
  IndexName InitializationExpr IntExpr IntInitializationExpr
  NumericExpr LogicalConstant
  LogicalExpr LogicalInitializationExpr
  MaskExpr
  MultOp NotOp OrOp
  PointerAssignmentStmt PowerOp RelOp ScalarMaskExpr Stride
  SFExpr SFExprList SFFactor SFPrimary SFTerm
  Sign
  SpecificationExpr UFExpr UFFactor UFPrimary
  UFTerm UnsignedArithmeticConstant WhereAssignmentStmt WhereConstruct
  WhereConstructStmt WhereStmt    

  Primary            %%R701
  Level1Expr         %%R702
  DefinedUnaryOp     %%R703
  MultOperand        %%R704
  AddOperand         %%R705
  Level2Expr         %%R706
  Level3Expr         %%R710
  Level4Expr         %%R712
  AndOperand         %%R714
  OrOperand          %%R715
  EquivOperand       %%R716
  Level5Expr         %%R717
  Expr               %%R722
  DefinedBinaryOp    %%R723


  BoundsSpec             %%R737
  BoundsRemapping        %%R738
  DataTarget             %%R739
  ForallConstruct        %%R752
  ForallConstructStmt    %%R753
  ForallHeader           %%R754
  ForallTripletSpec      %%R755
  ForallBodyConstruct    %%R756
  ForallAssignmentStmt   %%R757
  EndForallStmt          %%R758
  ForallStmt             %%R759

context-free syntax
%%%% TODO: put these under the right section

  UFTerm                        -> UFExpr
  Sign UFTerm                   -> UFExpr
  UFExpr AddOp UFTerm           -> UFExpr
  UFFactor                      -> UFTerm
  UFTerm MultOp UFFactor        -> UFTerm
  UFTerm ConcatOp UFPrimary     -> UFTerm
  UFPrimary                     -> UFFactor
  UFPrimary PowerOp UFFactor    -> UFFactor

  Icon                          -> UFPrimary
  Scon                          -> UFPrimary
  Name                          -> UFPrimary
  FunctionReference             -> UFPrimary
  DataRef                       -> UFPrimary
  '(' UFExpr ')'                -> UFPrimary

%%82,83
  (CExpr ConcatOp)? CPrimary    -> CExpr
  COperand                      -> CPrimary
  '(' CExpr ')'                 -> CPrimary
  Scon                          -> COperand
  Name                          -> COperand
  DataRef                       -> COperand
  FunctionReference             -> COperand

%%101
  Icon                          -> UnsignedArithmeticConstant
  Rcon                          -> UnsignedArithmeticConstant
  ComplexConst                  -> UnsignedArithmeticConstant

%%107
  '(' Expr ',' Expr ')'         -> ComplexConst

%%108
  '.true.' | '.false.'          -> LogicalConstant

%%R701
  ArrayConstructor              -> Primary          {cons("primary-ac")}
  ArrayConstructor              -> SFPrimary
  UnsignedArithmeticConstant    -> Primary          {cons("const-expr")}
  Name                          -> Primary          {cons("primary-name")}
  DataRef                       -> Primary          {cons("primary-dref")}
  FunctionReference             -> Primary          {cons("primary-fref")}
  '(' Expr ')'                  -> Primary          {cons("paren-expr")}
  Scon                          -> Primary          {cons("primary-scon")}

%%R702
                   Primary             -> Level1Expr
  DefinedUnaryOp   Primary             -> Level1Expr      {cons("defined-unary-op-expr")}

%%R703
  Dop                                  -> DefinedUnaryOp

%%R704
  Level1Expr                           -> MultOperand
  Level1Expr   "**"    MultOperand     -> MultOperand     {cons("power-expr")}

%%R705
                       MultOperand     -> AddOperand
   AddOperand  "*"     MultOperand     -> AddOperand      {cons("mult-expr")}
   AddOperand  "/"     MultOperand     -> AddOperand      {cons("div-expr")}

%%R706 % ELI: "We need to distinguish unary operators" SDF: ambig on "-2" on next 2 lines 
%%TODO-F08: is this still true?
%%R706
                       AddOperand      -> Level2Expr
               "+"     AddOperand      -> Level2Expr      {cons("unary-plus-expr")}
               "-"     AddOperand      -> Level2Expr      {cons("unary-minus-expr")}
   Level2Expr  "+"     AddOperand      -> Level2Expr      {cons("add-expr")}
   Level2Expr  "-"     AddOperand      -> Level2Expr      {cons("sub-expr")}

%%R707
  '**'                                 -> PowerOp         {cons("power-op")}

%%R708
  '*'                                   -> MultOp         {cons("mult-op-times")}
  '/'                                   -> MultOp         {cons("mult-op-div")}

%%R709
  '+'                                   -> AddOp         {cons("add-op-plus")}
  '-'                                   -> AddOp         {cons("add-op-minus")}
  '+'                                   -> Sign          {cons("sign-plus")}
  '-'                                   -> Sign          {cons("sign-minus")}

%%R710
                         Level2Expr    -> Level3Expr
   Level3Expr  "//"      Level2Expr    -> Level3Expr      {cons("concat-expr")}

%%R711
  "//"                                 -> ConcatOp        {cons("concat-op")}

%%R712
                     Level3Expr        -> Level4Expr
  Level3Expr  "=="   Level3Expr        -> Level4Expr      {cons("rel-op-eq-expr")}
  Level3Expr '.EQ.'  Level3Expr        -> Level4Expr      {cons("rel-op-eq-expr")}
  Level3Expr  "/="   Level3Expr        -> Level4Expr      {cons("rel-op-ne-expr")}
  Level3Expr '.NE.'  Level3Expr        -> Level4Expr      {cons("rel-op-ne-expr")}
  Level3Expr  "<"    Level3Expr        -> Level4Expr      {cons("rel-op-lt-expr")}
  Level3Expr '.LT.'  Level3Expr        -> Level4Expr      {cons("rel-op-lt-expr")}
  Level3Expr  "<="   Level3Expr        -> Level4Expr      {cons("rel-op-le-expr")}
  Level3Expr '.LE.'  Level3Expr        -> Level4Expr      {cons("rel-op-le-expr")}
  Level3Expr  ">"    Level3Expr        -> Level4Expr      {cons("rel-op-gt-expr")}
  Level3Expr '.GT.'  Level3Expr        -> Level4Expr      {cons("rel-op-gt-expr")}
  Level3Expr  ">="   Level3Expr        -> Level4Expr      {cons("rel-op-ge-expr")}
  Level3Expr '.GE.'  Level3Expr        -> Level4Expr      {cons("rel-op-ge-expr")}

%%R713
  "=="                                 -> RelOp           {cons("rel-op-eq")}
  '.EQ.'                               -> RelOp           {cons("rel-op-eq")}
  "/="                                 -> RelOp           {cons("rel-op-ne")}
  '.NE.'                               -> RelOp           {cons("rel-op-ne")}
  "<"                                  -> RelOp           {cons("rel-op-lt")}
  '.LT.'                               -> RelOp           {cons("rel-op-lt")}
  "<="                                 -> RelOp           {cons("rel-op-le")}
  '.LE.'                               -> RelOp           {cons("rel-op-le")}
  ">"                                  -> RelOp           {cons("rel-op-gt")}
  '.GT.'                               -> RelOp           {cons("rel-op-gt")}
  ">="                                 -> RelOp           {cons("rel-op-ge")}
  '.GE.'                               -> RelOp           {cons("rel-op-ge")}

%%R714
          Level4Expr                   -> AndOperand
  '.NOT.' Level4Expr                   -> AndOperand      {cons("not-expr")}

%%R715
                        AndOperand     -> OrOperand
   OrOperand  '.AND.'   AndOperand     -> OrOperand       {cons("and-expr")}

%%R716
                        OrOperand      -> EquivOperand
   EquivOperand '.OR.'  OrOperand      -> EquivOperand    {cons("or-expr")}

%%R717
                        EquivOperand   -> Level5Expr
   Level5Expr  '.EQV.'  EquivOperand   -> Level5Expr      {cons("eqv-expr")}
   Level5Expr  '.NEQV.' EquivOperand   -> Level5Expr      {cons("neqv-expr")}

%%R722
                          Level5Expr   -> Expr
  Expr  DefinedBinaryOp   Level5Expr   -> Expr            {cons("defined-binary-op-expr")}

%%R723
  Dop                                  -> DefinedBinaryOp

%%R719
 '.NOT.'                                -> NotOp          {cons("not-op")}

%%R720
  '.AND.'                               -> AndOp          {cons("and-op")}

%%R721
  '.OR.'                                -> OrOp           {cons("or-op")}

%%R722
  '.EQV.'                               -> EquivOp        {cons("equiv-op")}
  '.NEQV.'                              -> EquivOp        {cons("nequiv-op")}


  LogicalConstant                       -> Primary


%%R725-R734 chain rule deleted

%%R724
  Expr                                  -> LogicalExpr

%%R725
  Expr                                  -> CharExpr

%%R726
  Expr                                  -> DefaultCharExpr

%%R727
  Expr                                  -> IntExpr

%%R728
  Expr                                  -> NumericExpr

%%R729
  ScalarIntExpr                         -> SpecificationExpr

%%R730
  Expr                                  -> InitializationExpr

%%R731
  CharExpr                              -> CharInitializationExpr

%%R732
  IntExpr                               -> IntInitializationExpr

%%R733
  LogicalExpr                           -> LogicalInitializationExpr

%%R734
  LblDef Variable '=' Expr          EOS -> AssignmentStmt   {cons("assignment-stmt")}

%% todo: check. Original ISO: assignmentStatement is variable '=' expression
%%TODO-DELETE   LblDef Name '%' Name '=' Expr EOS                                      -> AssignmentStmt
%%TODO-DELETE   LblDef Name '%' DataRef '=' Expr EOS                                   -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '%' Name '=' Expr EOS                   -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '%' DataRef '=' Expr EOS                -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFDummyArgNameList ')' '%' Name '=' Expr EOS           -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFDummyArgNameList ')' '%' DataRef '=' Expr EOS        -> AssignmentStmt
%%TODO-DELETE   LblDef Name '=' Expr EOS                                               -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' '=' Expr EOS                            -> AssignmentStmt
%%TODO-DELETE   LblDef Name '(' SFExprList ')' SubstringRange '=' Expr EOS             -> AssignmentStmt

  SFExpr ':' Expr ':' Expr                      -> SFExprList
  SFExpr ':' ':' Expr                           -> SFExprList
  ':' Expr ':' Expr                             -> SFExprList
  ':' ':' Expr                                  -> SFExprList
  ':'                                           -> SFExprList
  ':' Expr                                      -> SFExprList
  SFExpr                                        -> SFExprList
  SFExpr ':'                                    -> SFExprList
  SFExpr ':' Expr                               -> SFExprList
  SFExprList ',' SectionSubscript               -> SFExprList
%%TODO   SFDummyArgNameList ',' ':'                    -> SFExprList
%%TODO   SFDummyArgNameList ',' ':' Expr               -> SFExprList
%% problem with code like P(A,2). A can be both SFExprList and SFDummyargnameList. 
%% Conflict with 3 lines above: SFExprList ',' SectionSubscript  
%%  SFDummyArgNameList ',' SFExpr                 -> SFExprList
%%TODO   SFDummyArgNameList ',' SFExpr ':'             -> SFExprList
%%TODO   SFDummyArgNameList ',' SFExpr ':' Expr        -> SFExprList

  SFTerm                                        -> SFExpr
  Sign AddOperand                               -> SFExpr
  SFExpr AddOp AddOperand                       -> SFExpr
  SFFactor                                      -> SFTerm
  SFTerm MultOp MultOperand                     -> SFTerm
  SFPrimary                                     -> SFFactor
  SFPrimary PowerOp MultOperand                 -> SFFactor
  Icon                                          -> SFPrimary
  Name                                          -> SFPrimary
  DataRef                                       -> SFPrimary
  FunctionReference                             -> SFPrimary
  '(' Expr ')'                                  -> SFPrimary

%%R735
  LblDef DataPointerObject                             "=>" DataTarget  EOS -> PointerAssignmentStmt  {cons("pointer-assignment-stmt")}
  LblDef DataPointerObject "(" BoundsSpecList ")"      "=>" DataTarget  EOS -> PointerAssignmentStmt  {cons("pointer-assignment-stmt")}
  LblDef DataPointerObject "(" BoundsRemappingList ")" "=>" DataTarget  EOS -> PointerAssignmentStmt  {cons("pointer-assignment-stmt")}
%%TODO   LblDef Name '%' Name '=>' DataTarget EOS                                          -> PointerAssignmentStmt
%%TODO   LblDef Name '%' DataRef '=>' DataTarget EOS                                       -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFExprList ')' '%' Name '=>' DataTarget EOS                       -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFExprList ')' '%' DataRef '=>' DataTarget EOS                    -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFDummyArgNameList ')' '%' Name '=>' DataTarget EOS               -> PointerAssignmentStmt
%%TODO   LblDef Name '(' SFDummyArgNameList ')' '%' DataRef '=>' DataTarget EOS            -> PointerAssignmentStmt

%%R736
  VariableName                                    -> DataPointerObject
  ScalarVariable "%" DataPointerComponentName     -> DataPointerObject
  Name                                            -> DataPointerComponentName

%%R737
  LowerBoundExpr ":"                              -> BoundsSpec
  {BoundsSpec ","}+                               -> BoundsSpecList 

%%R738
  LowerBoundExpr ":" UpperBoundExpr               -> BoundsRemapping
  {BoundsRemapping ","}+                          -> BoundsRemappingList 

%%R739
  Expr      -> DataTarget
%%Ambiguous
%%Variable  -> DataTarget

%%R743
  LblDef 'WHERE' '(' MaskExpr ')' WhereAssignmentStmt  -> WhereStmt    {cons("where-stmt")}

%%R739
%% todo: sdf-fy
%%  Where     EndWhereStmt      -> WhereConstruct
%%  ElseWhere EndWhereStmt      -> WhereConstruct
%%  WhereConstructStmt          -> Where
%%  Where AssignmentStmt        -> Where
%%  Where ElsewhereStmt         -> ElseWhere
%%  ElseWhere AssignmentStmt    -> ElseWhere
  WhereConstructStmt AssignmentStmt* 
                (ElsewhereStmt AssignmentStmt*)? 
        EndWhereStmt                            -> WhereConstruct

%%R740
  LblDef 'where' '(' MaskExpr ')' EOS           -> WhereConstructStmt

%%R741
  Expr  -> MaskExpr

%%R742
  LblDef 'elsewhere' EOS                        -> ElsewhereStmt

%%R743
  LblDef 'end' 'where' EOS                      -> EndWhereStmt

%%R747
%%TODO-F08 - make it so label can't be part of assignment-stmt
  AssignmentStmt                                -> WhereAssignmentStmt

%%R752
  ForallConstructStmt {ForallBodyConstruct ','}* EndForallStmt      -> ForallConstruct

%%R753
  LblDef (ForallConstructName ":")? 'FORALL' ForallHeader       EOS -> ForallConstructStmt  {cons("forall-construct-stmt")}
  Name                                                              -> ForallConstructName

%%754
  '('
     (TypeSpec '::')? ForallTripletSpecList (',' ScalarMaskExpr)?
  ')'                                                               -> ForallHeader
  Expr                                                              -> ScalarMaskExpr

%%755
  IndexName '=' Subscript ':' Subscript (':' Stride)?               -> ForallTripletSpec
  {ForallTripletSpec ','}+                                          -> ForallTripletSpecList
  Name                                                              -> IndexName

%%756
  ForallAssignmentStmt                                              -> ForallBodyConstruct
  WhereStmt                                                         -> ForallBodyConstruct
  WhereConstruct                                                    -> ForallBodyConstruct
  ForallConstruct                                                   -> ForallBodyConstruct
  ForallStmt                                                        -> ForallBodyConstruct

%%757
  AssignmentStmt                                                    -> ForallAssignmentStmt
  PointerAssignmentStmt                                             -> ForallAssignmentStmt

%%758
  'END' 'FORALL' ForallConstructName?                           EOS -> EndForallStmt  {cons("end-forall-stmt")}

%%759
  LblDef 'FORALL' ForallHeader ForallAssignmentStmt             EOS -> ForallStmt     {cons("forall-stmt")}