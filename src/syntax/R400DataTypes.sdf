      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 4xx DataTypes
%%%%%%%%%%

%%module languages/fortran/syntax/R400DataTypes
module R400DataTypes

imports
%%  languages/fortran/syntax/FortranLex
%%  languages/fortran/syntax/R500DataDeclarations
  FortranLex
  R500DataDeclarations

exports

sorts

  AcImpliedDo AcImpliedDoControl AcDoVariable AcSpec AcValue AcValueList ArrayConstructor
  BozLiteralConstant ComponentArraySpec ComponentAttrSpec ComponentAttrSpecList ComponentDecl
  ComponentDeclList ComponentDefStmt Constant DerivedTypeBody 
  DerivedTypeDef DerivedTypeSpec DerivedTypeStmt EndTypeStmt InitialDataTarget
  LogicalConstant OptTypeParameterSpecList ParentTypeName
  PrivateComponentsStmt PrivateOrSequence
  ScalarConstant ScalarIntConstantName SequenceStmt StructureConstructor
  TypeAttrSpec TypeAttrSpecList TypeParamAttrSpec TypeParamDefStmt TypeParamName
  TypeParamDecl TypeParamDeclList TypeParamNameList TypeParamSpec
  UnsignedArithmeticConstant

  LiteralConstant             %% R306
  NamedConstant               %% R307
  IntConstant                 %% R308
  CharConstant                %% R309

  TypeSpec                    %% R402
  DeclarationTypeSpec         %% R403
  IntrinsicTypeSpec           %% R404
  KindSelector                %% R405
  SignedIntLiteralConstant    %% R406
  IntLiteralConstant          %% R407
  KindParam                   %% R408
  SignedDigitString           %% R409
  DigitString                 %% R410
  Sign                        %% R411
  SignedRealLiteralConstant   %% R417
  ComplexLiteralConstant      %% R422
  CharLiteralConstant         %% R428
  RealLiteralConstant         %% R429
  RealPart                    %% R423
  ImagPart                    %% R424
  CharSelector                %% R425
  LengthSelector              %% R426
  CharLength                  %% R427
  LogicalLiteralConstant      %% R429
  

context-free syntax

%%TODO-F08 - move to clause 300

%%R305
%%TODO-DELETE   NamedConstantUse                      -> Constant
%%TODO-DELETE   UnsignedArithmeticConstant            -> Constant
%%TODO-DELETE   '+' UnsignedArithmeticConstant        -> Constant
%%TODO-DELETE   '-' UnsignedArithmeticConstant        -> Constant
%%TODO-DELETE   Scon                                  -> Constant
%%TODO-DELETE   Hcon                                  -> Constant
%%TODO-DELETE   LogicalConstant                       -> Constant
%%TODO-DELETE   Icon '_' Scon                         -> Constant
%%TODO-DELETE   NamedConstantUse '_' Scon             -> Constant

  LiteralConstant                       -> Constant         {cons("constant")}
  NamedConstant                         -> Constant         {cons("constant")}

  Constant                              -> ScalarConstant

%%R306
  IntLiteralConstant                    -> LiteralConstant
  RealLiteralConstant                   -> LiteralConstant
  ComplexLiteralConstant                -> LiteralConstant
  LogicalLiteralConstant                -> LiteralConstant
  CharLiteralConstant                   -> LiteralConstant
  BozLiteralConstant                    -> LiteralConstant

%%R307
  Name                                  -> NamedConstant    {cons("named-constant")}

%%TODO-AMBIGUOUS
%%TODO-F08 the following rules look way ambiguous

%%R308
  Constant                              -> IntConstant      {cons("int-constant")}

%%R309
  Constant                              -> CharConstant     {cons("char-constant")}

%%R401
  SpecificationExpr                    -> TypeParamValue
  '*'                                  -> TypeParamValue
  ':'                                  -> TypeParamValue

%%R402
    IntrinsicTypeSpec
  | DerivedTypeSpec                     -> TypeSpec             {cons("type-spec")}

%%R403
%%TODO-F08
%%AMBIGUOS - change to intrinsic-type-spec at later stage
  IntrinsicTypeSpec
%%| ( 'TYPE'  '(' IntrinsicTypeSpec ')' )
  | ( 'TYPE'  '(' DerivedTypeSpec   ')' )
  | ( 'CLASS' '(' DerivedTypeSpec   ')' )
  | ( 'CLASS' '(' '*'               ')' )
  | ( 'TYPE'  '(' '*'               ')' ) -> DeclarationTypeSpec  {cons("declaration-type-spec")}

%%R404
    ( 'INTEGER'   KindSelector? )
  | ( 'REAL'      KindSelector? )
  | ( 'DOUBLE' 'PRECISION'      )
  | ( 'COMPLEX'   KindSelector? )
  | ( 'CHARACTER' CharSelector? )
  | ( 'LOGICAL'   KindSelector? )
  | ( 'DOUBLE' 'COMPLEX'        )       -> IntrinsicTypeSpec    {cons("intrinsic-type-spec")}

%%R405
  "(" ('KIND' "=")? ScalarIntInitializationExpr ")"     -> KindSelector
%%NONSTANDARD: e.g., integer*8 complex*8 complex*16
  '*' Icon                                              -> KindSelector

%%406
  Sign? IntLiteralConstant            -> SignedIntLiteralConstant

%%R407
  DigitString ("_" KindParam)?        -> IntLiteralConstant

%%R408
    DigitString
  | ScalarIntConstantName             -> KindParam          {cons("kind-param")}
  Name                                -> ScalarIntConstantName

%%R409 lex: signed-digit-string is [sign] digit-string
%%R410 lex: digit-string is digit [digit]...

%%R409
  Sign? DigitString                   -> SignedDigitString  {cons("signed-digit-string")}

%%R410
  Icon                                -> DigitString        {cons("digit-string")}

%%R411
  "+"                                 -> Sign             {cons("sign-plus")}
  "-"                                 -> Sign             {cons("sign-minus")}

%%R412
  BinaryConstant                        -> BozLiteralConstant
  OctalConstant                         -> BozLiteralConstant
  HexConstant                           -> BozLiteralConstant

%%R413 binary-constant - lex

%%R414 octal-constant  - lex

%%R415 hex-constant    - lex

%%R416 hex-digit

%%R417
  Sign? RealLiteralConstant             -> SignedRealLiteralConstant

%%R418
  Rcon                                  -> RealLiteralConstant

%%R419 significand     - lex

%%R420 exponent-letter - lex

%%R421 exponent        - lex

%%422
  "(" RealPart "," ImagPart ")"         -> ComplexLiteralConstant

%%423
  SignedIntLiteralConstant              -> RealPart
  SignedRealLiteralConstant             -> RealPart
  NamedConstant                         -> RealPart

%%424
  SignedIntLiteralConstant              -> ImagPart
  SignedRealLiteralConstant             -> ImagPart
  NamedConstant                         -> ImagPart

%%R420
  LengthSelector                                        -> CharSelector
  '(' 'LEN' '=' TypeParamValue ',' 'KIND' '=' Expr ')'  -> CharSelector
  '('           TypeParamValue ',' 'KIND' '=' Expr ')'  -> CharSelector
  '('           TypeParamValue ','            Expr ')'  -> CharSelector

  '(' 'KIND' '=' Expr ',' 'LEN' '=' TypeParamValue ')'  -> CharSelector
  '(' 'KIND' '=' Expr                              ')'  -> CharSelector

%%R421
  '(' ('LEN' '=')? TypeParamValue ')'                   -> LengthSelector
  '*' CharLength ','?                                   -> LengthSelector

%%R422
  '(' TypeParamValue ')'                                -> CharLength
  Icon                                                  -> CharLength

%%428
  (KindParam "_")? Scon                 -> CharLiteralConstant     {cons("char-literal-constant")}

%%R429
  '.TRUE.'  ("_" KindParam)?            -> LogicalLiteralConstant
  '.FALSE.' ("_" KindParam)?            -> LogicalLiteralConstant

%%R430
%% TODO: iso defines order: privateseq, componentdef.
%%TODO-F08: add private-or-sequence, component-part, type-bound-procedure-part
  DerivedTypeStmt DerivedTypeBody* EndTypeStmt          -> DerivedTypeDef
  TypeParamDefStmt                                      -> DerivedTypeBody
  PrivateOrSequence                                     -> DerivedTypeBody
  ComponentDefStmt                                      -> DerivedTypeBody

%%R431
  LblDef 'TYPE'
             ((',' TypeAttrSpecList)? '::')?
             TypeName
             ('(' TypeParamNameList ')')?                  EOS -> DerivedTypeStmt

  Ident                                                        -> ParentTypeName
  Ident                                                        -> TypeName
  Ident                                                        -> TypeParamName

  {TypeParamName ","}+                                         -> TypeParamNameList

%%R432
  'ABSTRACT'                                                   -> TypeAttrSpec
   AccessSpec                                                  -> TypeAttrSpec
  'BIND'     '(' 'C'            ')'                            -> TypeAttrSpec
  'EXTENDS'  '(' ParentTypeName ')'                            -> TypeAttrSpec

  {TypeAttrSpec ","}+                                          -> TypeAttrSpecList

%%R433
  PrivateComponentsStmt                                        -> PrivateOrSequence
  SequenceStmt                                                 -> PrivateOrSequence

%%R434
  LblDef 'END' 'TYPE' TypeName?                            EOS -> EndTypeStmt   {cons("end-type-stmt")}

%%R435
  LblDef 'SEQUENCE'                                        EOS -> SequenceStmt  {cons("sequence-stmt")}

%%R436
  LblDef 'INTEGER' KindSelector? ','  TypeParamAttrSpec
                                 '::' TypeParamDeclList    EOS -> TypeParamDefStmt {cons("type-param-def-stmt")}

%%R437
  TypeParamName ( '=' Expr )?                                  -> TypeParamDecl
  {TypeParamDecl ','}+                                         -> TypeParamDeclList

%%R438
  'KIND'                                                       -> TypeParamAttrSpec
  'LEN'                                                        -> TypeParamAttrSpec

%%R440
%%TODO-F08: data-component-def-stmt or proc-component-def-stmt
  LblDef DeclarationTypeSpec ( ',' ComponentAttrSpecList )? '::' ComponentDeclList EOS   -> ComponentDefStmt
  LblDef DeclarationTypeSpec ComponentDeclList EOS                                       -> ComponentDefStmt

%%R441
%%TODO-F08: add data-component-def-stmt

%%R442
%%TODO-F08 - add co-array-spec to dimension
  {ComponentAttrSpec ","}+                              -> ComponentAttrSpecList
  AccessSpec                                            -> ComponentAttrSpec
  'ALLOCATABLE'                                         -> ComponentAttrSpec
  'DIMENSION' '(' ComponentArraySpec ')'                -> ComponentAttrSpec
  'CONTIGUOUS'                                          -> ComponentAttrSpec
  'POINTER'                                             -> ComponentAttrSpec

%%R443
%%TODO-F08 co-array-spec, component-initialization
  ComponentName ('(' ComponentArraySpec ')')? ('*' CharLength)?      -> ComponentDecl
  {ComponentDecl ","}+                                               -> ComponentDeclList

%%R444
  ExplicitShapeSpecList                                 -> ComponentArraySpec
  DeferredShapeSpecList                                 -> ComponentArraySpec

%%R445
%%TODO-F08 proc-component-def-stmt

%%R446
%%TODO-F08 proc-component-attr-spec

%%R447
%%TODO-F08 component-initialization

%%R448
%%Designator replaced by variable
  Variable                                              -> InitialDataTarget

%%R449
  LblDef 'PRIVATE'                                  EOS -> PrivateComponentsStmt

%%R454
%%TODO-F08 type-bound-generic-stmt

%%R455
%%TODO-F08 binding-attr

%%R457
  TypeName OptTypeParameterSpecList             -> DerivedTypeSpec      {cons("derived-type-spec")}
  ( '(' {TypeParamSpec ','}+ ')' )?             -> OptTypeParameterSpecList

%%458
  OptKeywordEqual TypeParamValue                -> TypeParamSpec        {cons("type-param-spec")}

%%R459
%%TODO-F08 component-spec-list
  TypeName '(' {Expr ","}+ ')'                  -> StructureConstructor

%%R467
  '(/' AcSpec '/)'                              -> ArrayConstructor     {cons("array-constructor")}
  '['  AcSpec  ']'                              -> ArrayConstructor     {cons("array-constructor")}

%%R468
  TypeSpec '::'                                 -> AcSpec               {cons("ac-spec")}
  (TypeSpec '::')? AcValueList                  -> AcSpec               {cons("ac-spec")}

%%R432
%%TODO-REMOVE
%%  Expr                                        -> AcValueList
%%  AcValueList1                                -> AcValueList
%%  Expr ',' Expr                               -> AcValueList1
%%  Expr ',' AcImpliedDo                        -> AcValueList1
%%  AcImpliedDo                                 -> AcValueList1
%%  AcValueList1 ',' Expr                       -> AcValueList1
%%  AcValueList1 ',' AcImpliedDo                -> AcValueList1

%%R471
  Expr                                          -> AcValue
  AcImpliedDo                                   -> AcValue
  {AcValue ","}+                                -> AcValueList
   
%%R433
%%TODO-REMOVE
%%TODO   '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ')'                  -> AcImpliedDo
%%TODO   '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')'         -> AcImpliedDo
%%TODO   '(' AcImpliedDo ',' ImpliedDoVariable '=' Expr ',' Expr ')'           -> AcImpliedDo
%%TODO   '(' AcImpliedDo ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')'  -> AcImpliedDo
%%TODO   '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ')'                  -> AcImpliedDo

%%R472
  '(' AcValueList ',' AcImpliedDoControl ')'    -> AcImpliedDo

%%R473
  AcDoVariable '=' ScalarIntExpr ',' ScalarIntExpr (',' ScalarIntExpr)?    -> AcImpliedDoControl

%%R474
  DoVariable                                    -> AcDoVariable
