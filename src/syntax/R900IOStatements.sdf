      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R9xx Input/Output Statements
%%%%%%%%%%

%%TODO module languages/fortran/syntax/R900IOStatements
module R900IOStatements

imports
%%TODO  languages/fortran/syntax/FortranLex
%%TODO  languages/fortran/syntax/Fortran90
 FortranLex
 Fortran

exports

sorts

%% 9.5 File connection

  IoUnit                              %% R901
  FileUnitNumber                      %% R902
  InternalFileVariable                %% R903
  OpenStmt                            %% R904
  ConnectSpec                         %% R905
  FileNameExpr                        %% R906
  IomsgVariable                       %% R907
  CloseStmt                           %% R908
  CloseSpec                           %% R909

%% 9.6 Data transfer statements

  ReadStmt                            %% R910
  WriteStmt                           %% R911
  PrintStmt                           %% R912
  IoControlSpec                       %% R913
  IdVariable                          %% R914
  Format                              %% R915
  InputItem                           %% R916
  OutputItem                          %% R917
  IoImpliedDo                         %% R918
  IoImpliedDoObject                   %% R919
  IoImpliedDoControl                  %% R920

%% 9.7 Waiting on pending data transfer

  WaitStmt                            %% R922
  WaitSpec                            %% R923

%% 9.8 File positioning statements

  BackspaceStmt                        %% R924
  EndfileStmt                          %% R925
  RewindStmt                           %% R926
  PositionSpec                         %% R927

%% 9.9 FLUSH statement

  FlushStmt                           %% R928
  FlushSpec                           %% R929

%% 9.10 File inquiry statement

  InquireStmt                         %% R930
  InquireSpec                         %% R931


context-free syntax

%%TODO-FiXME
%% already defined in R800 section:
%%  Icon  ->  LblRef


%% 9.5 File connection
%%

%%R901
%%         int-expr substituted for file-unit-number
%%         char-variable substituted for internal-file-variable
%%
  IntExpr                                        -> IoUnit          {cons("io-unit_FUN")}
  '*'                                            -> IoUnit          {cons("io-unit_STAR")}
  CharVariable                                   -> IoUnit          {cons("io-unit_IFV")}

%%R902
%%         int-expr substituted for scalar-int-expr
%%
  IntExpr                                        -> FileUnitNumber  {cons("file-unit-number")}

%%R903
  CharVariable                                   -> InternalFileVariable  {cons("internal-file-variable")}

%%R904
  LblDef 'OPEN' '(' {ConnectSpec ','}+ ')'   EOS -> OpenStmt        {cons("open-stmt")}

%%R905
%%         default-char-expr substituted for scalar-default-char-expr
%%         int-variable substituted for scalar-int-variable
%%
  ('UNIT'         '=')? FileUnitNumber           -> ConnectSpec   {cons("connect-spec_UNIT")}
   'ACCESS'       '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_ACCESS")}
   'ACTION'       '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_ACTION")}
   'ASYNCHRONOUS' '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_ASYNCHRONOUS")}
   'BLANK'        '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_BLANK")}
   'DECIMAL'      '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_DECIMAL")}
   'DELIM'        '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_DELIM")}
   'ENCODING'     '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_ENCODING")}
   'ERR'          '='   LblRef                   -> ConnectSpec   {cons("connect-spec_ERR")}
   'FILE'         '='   FileNameExpr             -> ConnectSpec   {cons("connect-spec_FILE")}
   'FORM'         '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_FORM")}
   'IOMSG'        '='   IomsgVariable            -> ConnectSpec   {cons("connect-spec_IOMSG")}
   'IOSTAT'       '='   IntVariable              -> ConnectSpec   {cons("connect-spec_IOSTAT")}
   'NEWUNIT'      '='   IntVariable              -> ConnectSpec   {cons("connect-spec_NEWUNIT")}
   'PAD'          '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_PAD")}
   'POSITION'     '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_POSITION")}
   'RECL'         '='   IntExpr                  -> ConnectSpec   {cons("connect-spec_RECL")}
   'ROUND'        '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_ROUND")}
   'SIGN'         '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_SIGN")}
   'STATUS'       '='   DefaultCharExpr          -> ConnectSpec   {cons("connect-spec_STATUS")}
%% 'TEAM'         '='   ImageTeam          %%TODO - is this in standard for F08?

%%R906
%%           default-char-expr substituted for scalar-default-char-expr
  DefaultCharExpr                               -> FileNameExpr   {cons("file-name-expr")}

%%R907
%%           default-char-expr substituted for scalar-default-char-expr
  DefaultCharExpr                               -> IomsgVariable  {cons("iomsg-variable")}

%%R908
  LblDef 'CLOSE' '(' {CloseSpec ','}+ ')'   EOS -> CloseStmt      {cons("close-stmt")}

%%R909
%%           default-char-expr substituted for scalar-default-char-expr
%%           int-variable substituted for scalar-int-variable
%%
  ('UNIT'         '=')? FileUnitNumber          -> CloseSpec      {cons("close-spec_UNIT")}
   'IOSTAT'       '=' IntVariable               -> CloseSpec      {cons("close-spec_IOSTAT")}
   'IOMSG'        '=' IomsgVariable             -> CloseSpec      {cons("close-spec_IOMSG")}
   'ERR'          '=' LblRef                    -> CloseSpec      {cons("close-spec_ERR")}
   'STATUS'       '=' DefaultCharExpr           -> CloseSpec      {cons("close-spec_STATUS")}


%% 9.6 Data transfer statements
%%

%%910
  LblDef 'READ' '(' {IoControlSpec ','}+ ')' {InputItem ','}*   EOS -> ReadStmt  {cons("read-stmt_ICSL")}
  LblDef 'READ' Format                  (',' {InputItem ','}+)? EOS -> ReadStmt  {cons("read-stmt_F")}

%%R911
  LblDef 'WRITE' '(' {IoControlSpec ','}+ ')' {OutputItem ','}* EOS -> WriteStmt {cons("write-stmt")}

%%R912
  LblDef 'PRINT' Format (',' {OutputItem ','}+ )?               EOS -> PrintStmt {cons("print-stmt")}

%%R913
%% TODO-F08  io-unit and format must be first and second (without {UNIT,FMT}=)
%%           default-char-expr substituted for scalar-default-char-expr
%%
  ('UNIT'         '=')? IoUnit                    -> IoControlSpec  {cons("io-control-spec_UNIT")}
  ('FMT'          '=')? Format                    -> IoControlSpec  {cons("io-control-spec_FMT")}
  ('NML'          '=')? NamelistGroupName         -> IoControlSpec  {cons("io-control-spec_NML")}
  'ADVANCE'      '='   DefaultCharExpr            -> IoControlSpec  {cons("io-control-spec_ADVANCE")}
  'ASYNCHRONOUS' '='   DefaultCharExpr            -> IoControlSpec  {cons("io-control-spec_ASYNCHRONOUS")}
  'BLANK'        '='   DefaultCharExpr            -> IoControlSpec  {cons("io-control-spec_BLANK")}
  'DECIMAL'      '='   DefaultCharExpr            -> IoControlSpec  {cons("io-control-spec_DECIMAL")}
  'DELIM'        '='   DefaultCharExpr            -> IoControlSpec  {cons("io-control-spec_DELIM")}
  'END'          '='   LblRef                     -> IoControlSpec  {cons("io-control-spec_END")}
  'EOR'          '='   LblRef                     -> IoControlSpec  {cons("io-control-spec_EOR")}
  'ERR'          '='   LblRef                     -> IoControlSpec  {cons("io-control-spec_ERR")}
  'ID'           '='   IdVariable                 -> IoControlSpec  {cons("io-control-spec_ID")}
  'IOMSG'        '='   IomsgVariable              -> IoControlSpec  {cons("io-control-spec_IOMSG")}
  'IOSTAT'       '='   IntVariable                -> IoControlSpec  {cons("io-control-spec_IOSTAT")}
  'PAD'          '='   DefaultCharExpr            -> IoControlSpec  {cons("io-control-spec_PAD")}
  'POS'          '='   Expr                       -> IoControlSpec  {cons("io-control-spec_POS")}
  'REC'          '='   Expr                       -> IoControlSpec  {cons("io-control-spec_REC")}
  'ROUND'        '='   DefaultCharExpr            -> IoControlSpec  {cons("io-control-spec_ROUND")}
  'SIGN'         '='   DefaultCharExpr            -> IoControlSpec  {cons("io-control-spec_SIGN")}
  'SIZE'         '='   IntVariable                -> IoControlSpec  {cons("io-control-spec_SIZE")}

%%R914
  IntVariable                                     -> IdVariable     {cons("id-variable")}

%%R915
  DefaultCharExpr                                 -> Format         {cons("format_DCE")}
  Label                                           -> Format         {cons("format_L")}
  '*'                                             -> Format         {cons("format_STAR")}

%%R916
    Variable
  | IoImpliedDo                                   -> InputItem      {cons("input-item")}

%%R917
    Expr
  | IoImpliedDo                                   -> OutputItem     {cons("output-item")}

%%R918
  '('
      {IoImpliedDoObject ','}+ ',' IoImpliedDoControl
  ')'                                             -> IoImpliedDo    {cons("io-implied-do")}

%%R919
    InputItem
  | OutputItem                                    -> IoImpliedDoObject  {cons("io-implied-do-object")}

%%R920
  DoVariable '=' IntExpr  ','
                 IntExpr (',' IntExpr)?           -> IoImpliedDoControl {cons("io-implied-do-control")}

%% 9.7 Waiting on pending data transfer
%%

%%R922
  LblDef 'WAIT' '(' {WaitSpec ','}+ ')'             EOS -> WaitStmt       {cons("wait-stmt")}

%%R923
%%           int-expr substituted for scalar-int-expr
%%           int-variable substituted for scalar-int-variable
%%

  ('UNIT'   '=')? FileUnitNumber                        -> WaitSpec       {cons("wait-spec_UNIT")}
   'END'    '=' LblRef                                  -> WaitSpec       {cons("wait-spec_END")}
   'EOR'    '=' LblRef                                  -> WaitSpec       {cons("wait-spec_EOR")}
   'ERR'    '=' LblRef                                  -> WaitSpec       {cons("wait-spec_ERR")}
   'ID'     '=' IntExpr                                 -> WaitSpec       {cons("wait-spec_ID")}
   'IOMSG'  '=' IomsgVariable                           -> WaitSpec       {cons("wait-spec_IOMSG")}
   'IOSTAT' '=' IntExpr                                 -> WaitSpec       {cons("wait-spec_IOSTAT")}


%% 9.8 File positioning statements
%%

%%R924
  LblDef 'BACKSPACE' FileUnitNumber                EOS -> BackspaceStmt   {cons("backspace-stmt_FUN")}
  LblDef 'BACKSPACE' '(' {PositionSpec ','}+ ')'   EOS -> BackspaceStmt   {cons("backspace-stmt_PSL")}

%%R925
  LblDef 'END' 'FILE' FileUnitNumber               EOS -> EndfileStmt     {cons("endfile-stmt_FUN")}
  LblDef 'END' 'FILE' '(' {PositionSpec ","}+ ')'  EOS -> EndfileStmt     {cons("endfile-stmt_PSL")}

%%R926
  LblDef 'REWIND' FileUnitNumber                   EOS -> RewindStmt      {cons("rewind-stmt_FUN")}
  LblDef 'REWIND' '(' {PositionSpec ","}+ ')'      EOS -> RewindStmt      {cons("rewind-stmt_PSL")}

%%R927
  ('UNIT'    '=')? FileUnitNumber                      -> PositionSpec    {cons("position-spec_UNIT")}
   'IOSTAT'  '=' IntVariable                           -> PositionSpec    {cons("position-spec_IOSTAT")}
   'IOMSG'   '=' IomsgVariable                         -> PositionSpec    {cons("position-spec_IOMSG")}
   'ERR'     '=' LblRef                                -> PositionSpec    {cons("position-spec_ERR")}


%% 9.9 FLUSH statement
%%

%%R928
  LblDef 'FLUSH' FileUnitNumber                     EOS -> FlushStmt      {cons("flush-stmt_FUN')")}
  LblDef 'FLUSH' '(' {FlushSpec ','}+ ')'           EOS -> FlushStmt      {cons("flush-stmt_FSL'")}

%%R929
%%           int-variable substituted for scalar-int-variable
%%
  ('UNIT'    '=')? FileUnitNumber                       -> FlushSpec      {cons("flush-spec_UNIT")}
   'IOSTAT'  '=' IntVariable                            -> FlushSpec      {cons("flush-spec_IOSTAT")}
   'IOMSG'   '=' IomsgVariable                          -> FlushSpec      {cons("flush-spec_IOMSG")}
   'ERR'     '=' LblRef                                 -> FlushSpec      {cons("flush-spec_ERR")}


%% 9.10 File inquiry statement
%%

%%R930
%%           int-variable substituted for scalar-int-variable
%%
  LblDef 'INQUIRE' '(' {InquireSpec ','}+ ')'       EOS -> InquireStmt {cons("inquire-stmt_ISL")}
  LblDef 'INQUIRE' '(' 'IOLENGTH' '=' IntVariable ')' {OutputItem ','}+
                                                    EOS -> InquireStmt {cons("inquire-stmt_IOLENGTH")}

%%R931
%%           default-char-expr substituted for scalar-default-char-expr
%%           logical-variable substituted for scalar-logical-variable
%%           int-variable substituted for scalar-int-variable
%%
  ('UNIT'         '=')? FileUnitNumber                 -> InquireSpec  {cons("inquire-spec_UNIT")} 
   'FILE'         '=' FileNameExpr                     -> InquireSpec  {cons("inquire-spec_FILE")}  
   'ACCESS'       '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_ACCESS")}  
   'ACTION'       '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_ACTION")}  
   'ASYNCHRONOUS' '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_ASYNCHRONOUS")}  
   'BLANK'        '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_BLANK")}  
   'DECIMAL'      '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_DECIMAL")}  
   'DELIM'        '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_DELIM")}  
   'DIRECT'       '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_DIRECT")}  
   'ENCODING'     '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_ENCODING")}  
   'ERR'          '=' LblRef                           -> InquireSpec  {cons("inquire-spec_ERR")}  
   'EXIST '       '=' LogicalVariable                  -> InquireSpec  {cons("inquire-spec_EXIST")}  
   'FORM'         '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_FORM")}  
   'FORMATTED'    '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_FORMATTED")}
   'ID'           '=' IntExpr                          -> InquireSpec  {cons("inquire-spec_ID")}  
   'IOMSG'        '=' IomsgVariable                    -> InquireSpec  {cons("inquire-spec_IOMSG")}  
   'IOSTAT'       '=' IntVariable                      -> InquireSpec  {cons("inquire-spec_IOSTAT")}  
   'NAME'         '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_NAME")}  
   'NAMED'        '=' LogicalVariable                  -> InquireSpec  {cons("inquire-spec_NAMED")}  
   'NEXTREC'      '=' IntVariable                      -> InquireSpec  {cons("inquire-spec_NEXTREC")}  
   'NUMBER'       '=' IntVariable                      -> InquireSpec  {cons("inquire-spec_NUMBER")}  
   'OPENED'       '=' LogicalVariable                  -> InquireSpec  {cons("inquire-spec_OPENED")}  
   'PAD'          '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_PAD")}  
   'PENDING'      '=' LogicalVariable                  -> InquireSpec  {cons("inquire-spec_PENDING")}  
   'POS'          '=' IntVariable                      -> InquireSpec  {cons("inquire-spec_POS")}  
   'POSITION'     '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_POSITION")}  
   'READ'         '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_READ")}  
   'READWRITE'    '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_READWRITE")}  
   'RECL'         '=' IntVariable                      -> InquireSpec  {cons("inquire-spec_RECL")}  
   'ROUND'        '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_ROUND")}  
   'SEQUENTIAL '  '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_SEQUENTIAL")}  
   'SIGN'         '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_SIGN")}  
   'SIZE'         '=' IntVariable                      -> InquireSpec  {cons("inquire-spec_SIZE")}  
   'STREAM'       '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_STREAM")}  
%% 'TEAM'         '=' ImageTeam          %%TODO-F08
   'UNFORMATTED'  '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_UNFORMATTED")}  
   'WRITE'        '=' DefaultCharExpr                  -> InquireSpec  {cons("inquire-spec_WRITE")}
