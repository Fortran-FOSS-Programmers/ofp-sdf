      
%%%%%%%%%%
%%Fortran ISO/IEC 1539:1991 section R5xx Data Object declarations and Specifications
%%%%%%%%%%

%%module languages/fortran/syntax/R500DataDeclarations
module R500DataDeclarations

imports
  %% languages/fortran/syntax/FortranLex
  %% languages/fortran/syntax/R400DataTypes
  %% languages/fortran/syntax/R700Expressions

  FortranLex
  R400DataTypes
  R700Expressions

exports

sorts

%% 5.2 Type declaration statements

  TypeDeclarationStmt                 %% R501
  AttrSpec                            %% R502
  EntityDecl                          %% R503
                                      %% R504  ObjectName - lex
  Initialization                      %% R505
  NullInit                            %% R506

%% 5.3 Attributes

  AccessSpec                          %% R507
  LanguageBindingSpec                 %% R508
  CoarraySpec                         %% R509
  DeferredCoshapeSpec                 %% R510
  ExplicitCoshapeSpec                 %% R511
  LowerCobound                        %% R512
  UpperCobound                        %% R513
  DimensionSpec                       %% R514
  ArraySpec                           %% R515  
  ExplicitShapeSpec                   %% R516
  LowerBound                          %% R517
  UpperBound                          %% R518
  AssumedShapeSpec                    %% R519
  DeferredShapeSpec                   %% R520
  AssumedSizeSpec                     %% R521
  AssumedRankSpec                     %% R522a TR 29113
  ImpliedShapeSpec                    %% R522
  IntentSpec                          %% R523

%% 5.4 Attribute specification statements

  AccessStmt                          %% R524
  AccessId                            %% R525
  AllocatableStmt                     %% R526
  AllocatableDecl                     %% R527
  AsynchronousStmt                    %% R528
  BindStmt                            %% R529
  BindEntity                          %% R530
  CodimensionStmt                     %% R531
  CodimensionDecl                     %% R532
  ContiguousStmt                      %% R533
  DataStmt                            %% R534
  DataStmtSet                         %% R535
  DataStmtSetList
  DataStmtObject                      %% R536
  DataImpliedDo                       %% R537
  DataIDoObject                       %% R538
  DataIDoVariable                     %% R539
  DataStmtValue                       %% R540
  DataStmtRepeat                      %% R541
  DataStmtConstant                    %% R542
  IntConstantSubobject                %% R543
  ConstantSubobject                   %% R544
  DimensionStmt                       %% R545
  IntentStmt                          %% R546
  OptionalStmt                        %% R547
  ParameterStmt                       %% R548
  NamedConstantDef                    %% R549
  PointerStmt                         %% R550
  PointerDecl                         %% R551
  ProtectedStmt                       %% R552
  SaveStmt                            %% R553
  SavedEntity                         %% R554
  ProcPointerName                     %% R555
  TargetStmt                          %% R556
  TargetDecl                          %% R557
  ValueStmt                           %% R558
  VolatileStmt                        %% R559

%% 5.5 Implicit statement

  ImplicitStmt                        %% R560
  ImplicitSpec                        %% R561
  LetterSpec                          %% R562

%% 5.6 Namelist statement

  NamelistStmt                        %% R563
  NamelistGroupObject                 %% R564

%% 5.7 Storage association of data objects

  EquivalenceStmt                     %% R565
  EquivalenceSet                      %% R566
  EquivalenceObject                   %% R567
  CommonStmt                          %% R568
  CommonBlockObject                   %% R569


context-free syntax


%% 5.2 Type declaration statements
%%

%%R501
  LblDef? DeclarationTypeSpec
          ((',' {AttrSpec ','}+)? '::')? {EntityDecl ','}+
                                                    EOS -> TypeDeclarationStmt  {cons("TypeDeclarationStmt")}
%%R502
   AccessSpec                                           -> AttrSpec  {cons("AttrSpec_AS")}
  'ALLOCATABLE'                                         -> AttrSpec  {cons("AttrSpec_ALLOCATABLE")}
  'ASYNCHRONOUS'                                        -> AttrSpec  {cons("AttrSpec_ASYNCHRONOUS")}
  'CODIMENSION' '[' CoarraySpec ']'                     -> AttrSpec  {cons("AttrSpec_CODIMENSION")}
  'CONTIGUOUS'                                          -> AttrSpec  {cons("AttrSpec_CONTIGUOUS")}
  'DIMENSION' '(' ArraySpec ')'                         -> AttrSpec  {cons("AttrSpec_DIMENSION")}
  'EXTERNAL'                                            -> AttrSpec  {cons("AttrSpec_EXTERNAL")}
  'INTENT' '(' IntentSpec ')'                           -> AttrSpec  {cons("AttrSpec_INTENT")}
  'INTRINSIC'                                           -> AttrSpec  {cons("AttrSpec_INTRINSIC")}
   LanguageBindingSpec                                  -> AttrSpec  {cons("AttrSpec_LBS")}
  'OPTIONAL'                                            -> AttrSpec  {cons("AttrSpec_OPTIONAL")}
  'PARAMETER'                                           -> AttrSpec  {cons("AttrSpec_PARAMETER")}
  'POINTER'                                             -> AttrSpec  {cons("AttrSpec_POINTER")}
  'PROTECTED'                                           -> AttrSpec  {cons("AttrSpec_PROTECTED")}
  'SAVE'                                                -> AttrSpec  {cons("AttrSpec_SAVE")}
  'TARGET'                                              -> AttrSpec  {cons("AttrSpec_TARGET")}
  'VALUE'                                               -> AttrSpec  {cons("AttrSpec_VALUE")}
  'VOLATILE'                                            -> AttrSpec  {cons("AttrSpec_VOLATILE")}

%%R503
  ObjectName    ( '(' ArraySpec ')'   )?
                ( '[' CoarraySpec ']' )?
                ( '*' CharLength      )?
                   Initialization?                      -> EntityDecl  {cons("EntityDecl")}
%%| FunctionName( '*' CharLength      )?  %%Ambiguous with object-name
%%

%%R504
%%Name - lex

%%R505
    ( '='   ConstantExpr      )
  | ( '=>'  NullInit          )
  | ( '=>'  InitialDataTarget )                         -> Initialization  {cons("initialization")}

%%R506
  FunctionReference                                     -> NullInit        {cons("NullInit")}


%% 5.3 Attributes
%%

%%R507
  'PUBLIC'                                              -> AccessSpec      {cons("access-spec_PUBLIC")}
  'PRIVATE'                                             -> AccessSpec      {cons("access-spec_PRIVATE")}

%%R508
%%       Scon substituted for scalar-default-char-constant-expr
%%
  'BIND' '(' 'C' (',' 'NAME' '=' Scon)? ')'    -> LanguageBindingSpec      {cons("LanguageBindingSpec")}

%%R509
    ( {DeferredCoshapeSpec ','}+ )
  | (  ExplicitCoshapeSpec       )     -> CoarraySpec          {cons("coarray-spec")}

%%R510
  ':'                                  -> DeferredCoshapeSpec  {cons("deferred-coshape-spec")}

%%511
  ( ( LowerCobound ':' )? UpperCobound ',' )*
    ( LowerCobound ':' )?
  '*'                                  -> ExplicitCoshapeSpec  {cons("explicit-coshape-spec")}

%%R512
  SpecificationExpr                    -> LowerCobound         {cons("lower-cobound")}

%%R513
  SpecificationExpr                    -> UpperCobound         {cons("upper-cobound")}

%%R514
  'DIMENSION' '(' ArraySpec ')'        -> DimensionSpec        {cons("dimension-spec")}

%%R515
  {ExplicitShapeSpec ','}+             -> ArraySpec            {cons("ArraySpec")}
  {AssumedShapeSpec  ','}+             -> ArraySpec            {cons("ArraySpec")}
  {DeferredShapeSpec ','}+             -> ArraySpec            {cons("ArraySpec")}
   AssumedSizeSpec                     -> ArraySpec            {cons("ArraySpec")}
  {ImpliedShapeSpec  ','}+             -> ArraySpec            {cons("ArraySpec")}
   AssumedRankSpec                     -> ArraySpec            {cons("ArraySpec")}

%%R516
  (LowerBound ':')? UpperBound                  -> ExplicitShapeSpec  {cons("ExplicitShapeSpec")}

%%R517
  SpecificationExpr                             -> LowerBound         {cons("lower-bound")}

%%R518
  SpecificationExpr                             -> UpperBound         {cons("UpperBound")}

%%R519
  LowerBound? ':'                               -> AssumedShapeSpec   {cons("assumed-shape-spec")}

%%R520
  ':'                                           -> DeferredShapeSpec  {cons("deferred-shape-spec")}

%%R521
%%AMB: explicit-shape-spec list made non-empty to remove ambiguity with implied-shape-spec-list
%%
  (ExplicitShapeSpec ',')+ (LowerBound ':')? '*'  -> AssumedSizeSpec  {cons("AssumedSizeSpec")}

%%R522a
  '..'                                          -> AssumedRankSpec    {cons("AssumedRankSpec")}

%%R522
  (LowerBound ':')? '*'                         -> ImpliedShapeSpec   {cons("ImpliedShapeSpec")}

%%R523
  'IN'                                          -> IntentSpec  {cons("IntentSpec_IN")}
  'OUT'                                         -> IntentSpec  {cons("IntentSpec_OUT")}
  'IN' 'OUT'                                    -> IntentSpec  {cons("IntentSpec_INOUT")}


%% 5.4 Attribute specification statements
%%

%%R524
  LblDef AccessSpec ( OptCC {AccessId ','}+ )?             EOS -> AccessStmt   {cons("access-stmt")}

%%R525
%%UseName           %% ambiguous with generic-spec
  GenericSpec                                                  -> AccessId     {cons("access-id")}

%%R526
  LblDef 'ALLOCATABLE' OptCC {AllocatableDecl ','}+        EOS -> AllocatableStmt  {cons("allocatable-stmt")}

%%R527
  ObjectName ( '(' ArraySpec   ')' )?
             ( '[' CoarraySpec ']' )?                          -> AllocatableDecl  {cons("allocatable-decl")}
%%R528
  LblDef 'ASYNCHRONOUS' OptCC {ObjectName ','}+            EOS -> AsynchronousStmt {cons("asynchronous-stmt")}

%%R529
  LblDef LanguageBindingSpec OptCC {BindEntity ','}+       EOS -> BindStmt         {cons("bind-stmt")}

%%R530
  EntityName                                                   -> BindEntity       {cons("bind-entity_EN")}
  '/' CommonBlockName '/'                                      -> BindEntity       {cons("bind-entity_CBN")}

%%R531
  LblDef 'CODIMENSION' OptCC {CodimensionDecl ','}+        EOS -> CodimensionStmt  {cons("codimension-stmt")}      
%%R532
  CoarrayName '[' CoarraySpec ']'                              -> CodimensionDecl  {cons("codimension-decl")}

%%R533
  LblDef 'CONTIGUOUS' {ObjectName ','}+                    EOS -> ContiguousStmt   {cons("contiguous-stmt")}

%%R534
  LblDef 'DATA' DataStmtSetList                            EOS -> DataStmt         {cons("data-stmt")}

%%R535
  {DataStmtObject ','}+ '/' {DataStmtValue ','}+ '/'           -> DataStmtSet      {cons("data-stmt-set")}
  DataStmtSet                                                  -> DataStmtSetList  {cons("data-stmt-set-list")}
  DataStmtSetList ',' DataStmtSet                              -> DataStmtSetList  {cons("data-stmt-set-list")}
  DataStmtSetList     DataStmtSet                              -> DataStmtSetList  {cons("data-stmt-set-list")}

%%R536
    Variable
  | DataImpliedDo                                              -> DataStmtObject   {cons("data-stmt-object")}

%%R537
%%         expr substituted for scalar-int-constant-expr
%%
  '('
       {DataIDoObject ','}+ ',' DataIDoVariable
          '=' Expr ',' Expr (',' Expr)?
  ')'                                                          -> DataImpliedDo    {cons("data-implied-do")}

%%R538
    ArrayElement
  | StructureComponent
  | DataImpliedDo                                              -> DataIDoObject    {cons("data-i-do-object")}

%%R539
  DoVariable                                                   -> DataIDoVariable  {cons("data-i-do-variable")}

%%R540
  (DataStmtRepeat '*')? DataStmtConstant                       -> DataStmtValue    {cons("data-stmt-value")}
  
%%541
%%         Icon substituted for scalar-int-constant
%%         int-constant-subobject substituted for scalar-int-constant-subobject
%%
    Icon
  | IntConstantSubobject                                       -> DataStmtRepeat   {cons("data-stmt-repeat")}

%%R542
%%       constant substituted for scalar-constant
%%       constant-subobject substituted for scalar-constant-subobject
%%
    Constant
  | ConstantSubobject
  | SignedIntLiteralConstant
  | SignedRealLiteralConstant
  | NullInit
  | InitialDataTarget
  | StructureConstructor                                       -> DataStmtConstant  {cons("data-stmt-constant")}

%%R543
  ConstantSubobject                                            -> IntConstantSubobject  {cons("int-constant-subobject")}

%%R544
  Designator                                                   -> ConstantSubobject {cons("constant-subobject")}

%%R545
  LblDef 'DIMENSION' OptCC
                           ArrayName '(' ArraySpec ')'
                      (',' ArrayName '(' ArraySpec ')')*   EOS -> DimensionStmt  {cons("dimension-stmt")}

%%R546
  LblDef 'INTENT' '(' IntentSpec ')'
                    OptCC {DummyArgName ','}+              EOS -> IntentStmt   {cons("intent-stmt")}

%%R547
  LblDef 'OPTIONAL' OptCC {DummyArgName ','}+              EOS -> OptionalStmt {cons("optional-stmt")}

%%R548
  LblDef 'PARAMETER' '(' {NamedConstantDef ','}+ ')'       EOS -> ParameterStmt  {cons("parameter-stmt")}

%%R549
  NamedConstant '=' ConstantExpr                               -> NamedConstantDef  {cons("named-constnat-def")}

%%R550
  LblDef 'POINTER' OptCC {PointerDecl ','}+                EOS -> PointerStmt   {cons("pointer-stmt")}

%%R551
    ( ObjectName ( '(' {DeferredShapeSpec ','}+ ')' )? )
  |   ProcEntityName                                           -> PointerDecl   {cons("pointer-decl")}

%%R552
  LblDef 'PROTECTED' OptCC {EntityName ','}+               EOS -> ProtectedStmt {cons("protected-stmt")}

%%R553
  LblDef 'SAVE' (OptCC {SavedEntity ','}+)?                EOS -> SaveStmt      {cons("save-stmt")}

%%R554
    ( ObjectName              )
%%| ( ProcPointerName         )  %% Ambiguous with object-name
  | ( '/' CommonBlockName '/' )                                -> SavedEntity   {cons("saved-entity")}

%%R555
  Ident                                                        -> ProcPointerName  {cons("name")}

%%R556
  LblDef 'TARGET' OptCC {TargetDecl ','}+                  EOS -> TargetStmt   {cons("target-stmt")}

%%R557
  ObjectName ( '(' ArraySpec   ')' )?
             ( '[' CoarraySpec ']' )?                          -> TargetDecl   {cons("target-decl")}

%%R558
  LblDef 'VALUE' OptCC {DummyArgName ','}+                 EOS -> ValueStmt    {cons("value-stmt")}

%%R559
  LblDef 'VOLATILE' OptCC {ObjectName ','}+                EOS -> VolatileStmt  {cons("volatile-stmt")}


%% 5.5 Implicit statement
%%

%%R560
  LblDef? 'IMPLICIT' {ImplicitSpec ','}+           EOS -> ImplicitStmt    {cons("ImplicitStmt")}
  LblDef? 'IMPLICIT' 'NONE'                        EOS -> ImplicitStmt    {cons("ImplicitStmt")}

%%R561
  DeclarationTypeSpec '(' {LetterSpec ','}+ ')'        -> ImplicitSpec    {cons("implicit-spec")}

%%R562
  Letter ('-' Letter)?                                 -> LetterSpec      {cons("letter-spec")}


%% 5.6 Namelist statement
%%

%%R563
%%TODO - inline NamelistGroup?
  LblDef 'NAMELIST'
               '/' NamelistGroupName '/' {NamelistGroupObject ','}+
    ( OptComma '/' NamelistGroupName '/' {NamelistGroupObject ','}+ )*
                                                         EOS -> NamelistStmt      {cons("namelist-stmt")}

%%R564
  VariableName                                               -> NamelistGroupObject  {cons("namelist-group-object")}


%% 5.7 Storage association of data objects
%%

%%R565
  LblDef 'EQUIVALENCE' {EquivalenceSet ','}+             EOS -> EquivalenceStmt   {cons("equivalence-stmt")}

%%R566
  '(' EquivalenceObject ',' {EquivalenceObject ','}+ ')'     -> EquivalenceSet    {cons("equivalence-set")}

%%R567
    Variable                                                 -> EquivalenceObject {cons("equivalence-object")}
%%| ArrayElement  %% Ambiguous - included in variable
%%| Substring     %% Ambiguous - included in variable

%%R567
  LblDef 'COMMON'
              ('/' CommonBlockName? '/')? {CommonBlockObject ','}+
    (OptComma  '/' CommonBlockName? '/'   {CommonBlockObject ','}+ )*
                                                         EOS -> CommonStmt  {cons("common-stmt")}
%%R569
  VariableName ( '(' ArraySpec ')' )?                        -> CommonBlockObject  {cons("common-block-object")}
