      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section R6xx Use of Data Objects
%%%%%%%%%%

%%module languages/fortran/syntax/R600UseDataObjects
module R600UseDataObjects

imports
  %%  languages/fortran/syntax/FortranLex
  %%  languages/fortran/syntax/R700Expressions
  FortranLex
  R700Expressions

exports

sorts

%% 6.1 Designator

  Designator                          %% R601

%% 6.2 Variable

  Variable                            %% R602
                                      %% R603  VariableName - lex
  LogicalVariable                     %% R604
  CharVariable                        %% R605
  DefaultCharVariable                 %% R606
  IntVariable                         %% R607
  
%% 6.4 Scalars

  Substring                           %% R608
  ParentString                        %% R609
  SubstringRange                      %% R610

  DataRef                             %% R611
  PartRef                             %% R612
  StructureComponent                  %% R613
  CoindexedNamedObject                %% R614
  ComplexPartDesignator               %% R615
  TypeParamInquiry                    %% R616

%% 6.5 Arrays

  ArrayElement                        %% R617
  ArraySection                        %% R618
  Subscript                           %% R619
  SectionSubscript                    %% R620
  SubscriptTriplet                    %% R621
  Stride                              %% R622
  VectorSubscript                     %% R623

%% 6.6 Image selectors

  ImageSelector                       %% R624
  Cosubscript                         %% R625

%% 6.7 Dynamic association

  AllocateStmt                        %% R626
  AllocOpt                            %% R627
  StatVariable                        %% R628
  ErrmsgVariable                      %% R629
                                      %% R630  SourceExpr
  Allocation                          %% R631
  AllocateObject                      %% R632
  AllocateShapeSpec                   %% R633
  LowerBoundExpr                      %% R634
  UpperBoundExpr                      %% R635
  AllocateCoarraySpec                 %% R636
  AllocateCoshapeSpec                 %% R637
  NullifyStmt                         %% R638
  PointerObject                       %% R639
  DeallocateStmt                      %% R640
  DeallocOpt                          %% R641


context-free syntax


%% 6.1 Designator
%%

%%R601
%%          AMB  ObjectName                    %% R613 part-name -> part-ref -> data-ref
%%          AMB  ArrayElement                  %% R617 is data-ref
%%          AMB  ArraySection                  %% R618 is data-ref [ (substring-range) ] 
%%          AMB  CoindexedNamedObject          %% R614 is data-ref
%%          AMB  ComplexPartDesignator         %% R615 is designator % ('RE' | 'IM') -> data-ref
%%          AMB  StructureComponent            %% R614 is data-ref
%%          AMB  Substring                     %% R609 is data-ref '(' substring-range ')'
%%
%%      the above reduces to
%%

%%    ObjectName
%%  | CoindexedNamedObject
  DataRef
    | Substring                        -> Designator   {cons("Designator_AMB")}

%%TODO-F08 ambiguous is it needed.  I think '(' SubstringRange ')' is needed at end of 
%%Designator '(' SubstringRange ')'    -> Designator   {cons("designator")}

%%TODO-F08 CharLiteralConstant '(' substring_range ')'  -> Designator  %% from OFP ANTLR grammar


%% 6.2 Variable
%%

%%R602
  Designator                           -> Variable  {cons("variable")}
%%AMB Expr                             -> Variable  %% expr shall be a func ref with pointer result

%%R602
%%TODO-AMB   VariableName | ArrayElement                                   -> ScalarVariable
%%TODO-AMB   VariableName                                                  -> Variable
%%TODO-AMB   VariableName '(' {Subscript ","}+ ')'                         -> Variable
%%TODO-AMB   VariableName SubstringRange                                   -> Variable
%%TODO-AMB   VariableName '(' {Subscript ","}+ ')' SubstringRange          -> Variable
%%TODO-AMB   Expr                                                          -> Subscript

%%R603
%% VariableName

%%R604
  Variable           -> LogicalVariable

%%605
  Variable           -> CharVariable

%%R606
  Variable           -> DefaultCharVariable

%%607
  Variable           -> IntVariable


%% 6.4 Scalars
%%

%%608
  ParentString '(' SubstringRange ')'  -> Substring        {cons("substring")}

%%609
%%      constant substituted for scalar-constant
%%      structure-component substituted for scalar-structure-component
%%
    ScalarVariableName
  | ArrayElement
  | CoindexedNamedObject
  | StructureComponent
  | Constant                           -> ParentString     {cons("parent-string")}

%%R610
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr? ':' IntExpr?                -> SubstringRange   {cons("substring-range")}

%%R611
%%TODO - is the following still true?
%%AMBibuous with part-ref ambiguous with name
%%{PartRef "%"}+                                                -> DataRef   {cons("data-ref")}
%%Name                                                          -> DataRef   {reject}
%%
%%REMOVE  PartName '%' PartName                                         -> DataRef   {cons("data-ref")}
%%REMOVE  DataRef  '%' PartName                                         -> DataRef   {cons("data-ref")}
%%REMOVE  PartName ArraySelector                                        -> DataRef   {cons("data-ref")}
%%REMOVE  DataRef  ArraySelector                                        -> DataRef   {cons("data-ref")}

%%R611
  PartRef ('%' PartRef)*                                 -> DataRef   {cons("DataRef")}

%%R612 part-ref
%%REMOVE PartName                                   ImageSelector?     -> PartRef   {cons("part-ref")}
%%REMOVE PartName   '(' SectionSubscriptList ')'
%%REMOVE         ( '(' SubstringRange       ')' )? ImageSelector?     -> PartRef   {cons("part-ref")}

%%R612
  PartName ( '(' {SectionSubscript ','}+ ')' )?
           ( '[' {SectionSubscript ','}+ ']' )?          -> PartRef   {cons("PartRef")}

%%R613
  DataRef                                                -> StructureComponent  {cons("structure-component")}

%%R614
  DataRef                                                -> CoindexedNamedObject {cons("coindexed-named-object")}

%%R615
    ( Designator '%' 'RE' )
  | ( Designator '%' 'IM' )                              -> ComplexPartDesignator {cons("complex-part-designator")}

%%R616
  Designator '%' TypeParamName                           -> TypeParamInquiry     {cons("type-param-inquiry")}


%% 6.5 Arrays
%%

%%R617
  DataRef                                                -> ArrayElement         {cons("array-element")}

%%R618
    DataRef ( ('(' SubstringRange ')')? )
  | ComplexPartDesignator                                -> ArraySection         {cons("array-section")}

%%R619
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> Subscript            {cons("subscript")}

%%R620
    Subscript
  | SubscriptTriplet
%%| VectorSubscript     %%AMB with subscript
                                                         -> SectionSubscript     {cons("section-subscript")}

%%R621
  Subscript? ':' Subscript? (':' Stride)?                -> SubscriptTriplet     {cons("subscript-triplet")}

%%R622
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> Stride               {cons("stride")}

%%R623
  IntExpr                                                -> VectorSubscript      {cons("vector-subscript")}


%% 6.6 Image selectors
%%

%%R624
  '[' {Cosubscript ','}+ ']'                             -> ImageSelector        {cons("image-selector")}

%%625
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> Cosubscript          {cons("cosubscript")}


%% 6.7 Dynamic association
%%

%%R626
  LblDef 'ALLOCATE'
           '(' (TypeSpec '::')?
                    {Allocation ','}+
               (',' {AllocOpt   ','}+)?
           ')'                                       EOS -> AllocateStmt         {cons("allocate-stmt")}

%%R627
%%      expr substituted for source-expr
%%
    ( 'ERRMSG' '=' ErrmsgVariable )
  | ( 'MOLD'   '=' Expr           )
  | ( 'SOURCE' '=' Expr           )
  | ( 'STAT'   '=' StatVariable   )                      -> AllocOpt             {cons("alloc-opt")}

%%R628
%%     int-variable substituted for scalar-int-variable
%%
  IntVariable                                            -> StatVariable         {cons("stat-variable")}

%%R629
%%     default-char-variable substituted for scalar-default-char-variable
%%
  DefaultCharVariable                                    -> ErrmsgVariable       {cons("errmsg-variable")}

%%R630
%% SourceExpr

%%R631
   AllocateObject
        ( '(' {AllocateShapeSpec ','}+ ')' )?
        ( '[' AllocateCoarraySpec      ']' )?            -> Allocation           {cons("allocation")}

%%R632
    VariableName
  | StructureComponent                                   -> AllocateObject       {cons("allocate-object")}

%%R633
  ( LowerBoundExpr ':' )? UpperBoundExpr                 -> AllocateShapeSpec    {cons("allocate-shape-spec")}

%%R634
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> LowerBoundExpr       {cons("lower-bound-expr")}

%%R635
%%      int-expr substituted for scalar-int-expr
%%
  IntExpr                                                -> UpperBoundExpr       {cons("upper-bound-expr")}

%%R636
  ( {AllocateCoshapeSpec ','}+ )?
  ( LowerBoundExpr ':'         )?  '*'                   -> AllocateCoarraySpec  {cons("allocate-coarray-spec")}

%%R637
  ( LowerBoundExpr ':' )? UpperBoundExpr                 -> AllocateCoshapeSpec  {cons("allocate-coshape-spec")}

%%R638
  LblDef 'NULLIFY' '(' {PointerObject ','}+ ')'      EOS -> NullifyStmt          {cons("nullify-stmt")}

%%R639
    VariableName
  | StructureComponent
  | ProcPointerName                                      -> PointerObject        {cons("pointer-object")}
   
%%R640
  LblDef 'DEALLOCATE'
            '('
                       {AllocateObject ','}+
                  (',' {DeallocOpt     ','}+)?
            ')'                                      EOS -> DeallocateStmt       {cons("deallocate-stmt")}

%%641
    ( 'STAT'   '=' StatVariable   )
  | ( 'ERRMSG' '=' ErrmsgVariable )                      -> DeallocOpt           {cons("dealloc-opt")}
