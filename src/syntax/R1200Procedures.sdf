      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section 12xx Procedures section
%%%%%%%%%%

%%module languages/fortran/syntax/R1200Procedures
module R1200Procedures

imports
  %% languages/fortran/syntax/FortranLex
  %% languages/fortran/syntax/Fortran90
  FortranLex
  Fortran

exports

sorts

  InterfaceBlock                      %% R1201
  InterfaceSpecification              %% R1202
  InterfaceStmt                       %% R1203
  EndInterfaceStmt                    %% R1204
  InterfaceBody                       %% R1205
  ProcedureStmt                       %% R1206
  GenericSpec                         %% R1207
  DefinedIoGenericSpec                %% R1208
  ImportStmt                          %% R1209
  ExternalStmt                        %% R1210
  ProcedureDeclarationStmt            %% R1211
  ProcInterface                       %% R1212
  ProcAttrSpec                        %% R1213
  ProcDecl                            %% R1214
                                      %% R1215  InterfaceName (FortranLex)
  ProcPointerInit                     %% R1216
  InitialProcTarget                   %% R1217
  IntrinsicStmt                       %% R1218
  FunctionReference                   %% R1219
  CallStmt                            %% R1220
  ProcedureDesignator                 %% R1221
  ActualArgSpec                       %% R1222
  ActualArg                           %% R1223
  AltReturnSpec                       %% R1224
  Prefix                              %% R1225
  PrefixSpec                          %% R1226
  FunctionSubprogram                  %% R1227
  FunctionStmt                        %% R1228
  ProcLanguageBindingSpec             %% R1229
  DummyArgName                        %% R1230
  Suffix                              %% R1231
  EndFunctionStmt                     %% R1232
  SubroutineSubprogram                %% R1233
  SubroutineStmt                      %% R1234
  DummyArg                            %% R1235
  EndSubroutineStmt                   %% R1236
  SeparateModuleSubprogram            %% R1237
  MpSubprogramStmt                    %% R1238
  EndMpSubprogramStmt                 %% R1239
  EntryStmt                           %% R1240
  ReturnStmt                          %% R1241
  ContainsStmt                        %% R1242
  StmtFunctionStmt                    %% R1243

context-free syntax

%%R1201
  InterfaceStmt
    InterfaceSpecification*
  EndInterfaceStmt                -> InterfaceBlock          {cons("InterfaceBlock")}

%%R1202
    InterfaceBody
  | ProcedureStmt                 -> InterfaceSpecification  {cons("InterfaceSpecification")}


%%R1203
  LblDef? 'INTERFACE' GenericSpec?                 EOS -> InterfaceStmt     {cons("InterfaceStmt")}
  LblDef? 'ABSTRACT' 'INTERFACE'                   EOS -> InterfaceStmt     {cons("InterfaceStmt")}
      
%%R1204
  LblDef? 'END' 'INTERFACE' GenericSpec?           EOS -> EndInterfaceStmt  {cons("EndInterfaceStmt")}

%%R1205
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  FunctionStmt   SpecificationPart EndFunctionStmt     -> InterfaceBody  {cons("InterfaceBody")}
  SubroutineStmt SpecificationPart EndSubroutineStmt   -> InterfaceBody  {cons("InterfaceBody")}

%%REMOVE-F08  LblDef FunctionPrefix FunctionName FunctionInterfaceRange           -> InterfaceBody
%%REMOVE-F08  LblDef 'SUBROUTINE' SubroutineName SubroutineInterfaceRange         -> InterfaceBody

%%REMOVE-F08  FunctionParList      EOS  SubprogramInterfaceBody EndFunctionStmt   -> FunctionInterfaceRange
%%REMOVE-F08  FunctionParList      EOS  EndFunctionStmt                           -> FunctionInterfaceRange

%%REMOVE-F08  SubroutineParList? ProcLanguageBindingSpec?
%%REMOVE-F08                       EOS  SubprogramInterfaceBody EndSubroutineStmt -> SubroutineInterfaceRange
%%REMOVE-F08  SubroutineParList? ProcLanguageBindingSpec?
%%REMOVE-F08                       EOS  EndSubroutineStmt                         -> SubroutineInterfaceRange

%%REMOVE-F08  SpecificationPartConstruct                                -> SubprogramInterfaceBody
%%REMOVE-F08  SubprogramInterfaceBody SpecificationPartConstruct        -> SubprogramInterfaceBody

%%R1206
  LblDef 'MODULE' 'PROCEDURE' OptCC {ProcedureName ','}+  EOS -> ProcedureStmt {cons("procedure-stmt_MODULE")}
  LblDef          'PROCEDURE' OptCC {ProcedureName ','}+  EOS -> ProcedureStmt {cons("procedure-stmt")}

%%R1207
  GenericName                                   -> GenericSpec           {cons("GenericSpec")}
  'OPERATOR'   '(' DefinedOperator ')'          -> GenericSpec           {cons("GenericSpec")}
  'ASSIGNMENT' '(' '='             ')'          -> GenericSpec           {cons("GenericSpec")}
  DefinedIoGenericSpec                          -> GenericSpec           {cons("GenericSpec")}

%%R1208
    ( 'READ'  '(' 'FORMATTED'   ')' )
  | ( 'READ'  '(' 'UNFORMATTED' ')' )
  | ( 'WRITE' '(' 'FORMATTED'   ')' )
  | ( 'WRITE' '(' 'UNFORMATTED' ')' )           -> DefinedIoGenericSpec  {cons("defined-io-generic-spec")}

%%R1209
  LblDef 'IMPORT' ( OptCC {ImportName ','}+ )?             EOS -> ImportStmt     {cons("import-stmt")}

%%R1210
  LblDef 'EXTERNAL' OptCC {ExternalName ','}+              EOS -> ExternalStmt   {cons("external-stmt")}

%%R1211
  LblDef? 'PROCEDURE'
             '(' ProcInterface? ')'
             (( ',' {ProcAttrSpec ','}+ )? '::')?
                                      {ProcDecl ','}+      EOS -> ProcedureDeclarationStmt
                                                                        {cons("ProcedureDeclarationStmt")}

%%R1212
    InterfaceName
  | DeclarationTypeSpec                               -> ProcInterface  {cons("ProcInterface")}

%%R1213
  AccessSpec                                          -> ProcAttrSpec  {cons("proc-attr-spec_AS")}
  ProcLanguageBindingSpec                             -> ProcAttrSpec  {cons("proc-attr-spec_PBS")}
  'INTENT' '(' IntentSpec ')'                         -> ProcAttrSpec  {cons("proc-attr-spec_INTENT")}
  'OPTIONAL'                                          -> ProcAttrSpec  {cons("proc-attr-spec_OPTIONAL")}
  'POINTER'                                           -> ProcAttrSpec  {cons("proc-attr-spec_POINTER")}
  'SAVE'                                              -> ProcAttrSpec  {cons("proc-attr-spec_SAVE")}

%%R1214
  ProcedureEntityName ( '=>' ProcPointerInit )?       -> ProcDecl      {cons("ProcDecl")}

%%R1215
%%Name                                                -> InterfaceName

%%R1216
    NullInit
  | InitialProcTarget                                 -> ProcPointerInit    {cons("proc-pointer-init")}

%%R1217
  ProcedureName                                       -> InitialProcTarget  {cons("initial-proc-target")}

%%R1218
  LblDef 'INTRINSIC' OptCC {IntrinsicProcedureName ','}+   EOS -> IntrinsicStmt  {cons("intrinsic-stmt")}

%%R1219
  ProcedureDesignator '(' {ActualArgSpec ','}* ')'    -> FunctionReference   {cons("function-reference")}

%%R1220
  LblDef 'CALL' ProcedureDesignator
                ('(' {ActualArgSpec ','}* ')')?   EOS -> CallStmt            {cons("call-stmt")}

%%R1221
    ( ProcedureName           )
  | ( ProcComponentRef        )
  | ( DataRef '%' BindingName )                       -> ProcedureDesignator {cons("procedure-designator")}

%%R1222
  ( Keyword '=' )? ActualArg                          -> ActualArgSpec       {cons("actual-arg-spec")}

%%R1223
    Expr
  | Variable
  | ProcedureName
  | ProcComponentRef
  | AltReturnSpec                                      -> ActualArg          {cons("actual-arg")}

context-free priorities

  Variable -> ActualArg  >  Expr -> ActualArg

context-free syntax

%%1224
  '*' Label                                            -> AltReturnSpec      {cons("alt-return-spec")}

%%1225
  PrefixSpec+                                          -> Prefix             {cons("prefix")}

%%1226
  DeclarationTypeSpec                                  -> PrefixSpec         {cons("prefix-spec_DTS")}
  'ELEMENTAL'                                          -> PrefixSpec         {cons("prefix-spec_ELEMENTAL")}
  'IMPURE'                                             -> PrefixSpec         {cons("prefix-spec_IMPURE")}
  'MODULE'                                             -> PrefixSpec         {cons("prefix-spec_MODULE")}
  'PURE'                                               -> PrefixSpec         {cons("prefix-spec_PURE")}
  'RECURSIVE'                                          -> PrefixSpec         {cons("prefix-spec_RECURSIVE")}

%%R1227
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%       ExecutionPart modified so it can be an empty list, thus it is not optional.
%%
  FunctionStmt
    SpecificationPart
    ExecutionPart
    InternalSubprogramPart?
  EndFunctionStmt                                      -> FunctionSubprogram  {cons("function-subprogram")}

%%R1228
  LblDef? Prefix? 'FUNCTION' FunctionName
              '(' {DummyArgName ','}* ')' Suffix?  EOS -> FunctionStmt        {cons("FunctionStmt")}

%%R1229
  LanguageBindingSpec                                  -> ProcLanguageBindingSpec  {cons("ProcLanguageBindingSpec")}

%%R1230
  Ident                                                -> DummyArgName     {cons("Name")}

%%R1231
  ProcLanguageBindingSpec ('RESULT' '(' ResultName ')')?   -> Suffix       {cons("Suffix")}
  'RESULT' '(' ResultName ')' ProcLanguageBindingSpec?     -> Suffix       {cons("Suffix")}

%%R1232
  LblDef? 'END' ('FUNCTION' FunctionName?)?        EOS -> EndFunctionStmt  {cons("EndFunctionStmt")}

%%R1233
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%       ExecutionPart modified so it can be an empty list, thus it is not optional.
%%
  SubroutineStmt
    SpecificationPart
    ExecutionPart
    InternalSubprogramPart?
  EndSubroutineStmt                             -> SubroutineSubprogram  {cons("subroutine-subprogram")}

%%1234
  LblDef? Prefix? 'SUBROUTINE' SubroutineName
         (
            '(' {DummyArg ','}* ')'
             ProcLanguageBindingSpec?
         )?                                 EOS -> SubroutineStmt        {cons("SubroutineStmt")}

%%R1235
  DummyArgName                                  -> DummyArg              {cons("DummyArg")}
  '*'                                           -> DummyArg              {cons("DummyArg")}

%%R1236
  LblDef? 'END' ('SUBROUTINE' SubroutineName?)? EOS -> EndSubroutineStmt {cons("EndSubroutineStmt")}

%%R1237
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%       ExecutionPart modified so it can be an empty list, thus it is not optional.
%%
  MpSubprogramStmt
    SpecificationPart
    ExecutionPart
    InternalSubprogramPart?
  EndMpSubprogramStmt                            -> SeparateModuleSubprogram {cons("separate-module-subprogram")}

%%R1238
  LblDef 'MODULE' 'PROCEDURE' ProcedureName  EOS -> MpSubprogramStmt         {cons("mp-subprogram-stmt")}

%%R1239
  LblDef 'END' ('PROCEDURE' ProcedureName?)? EOS -> EndMpSubprogramStmt      {cons("end-mp-subprogram-stmt")}

%%R1240
  LblDef 'ENTRY' EntryName ( '(' {DummyArg ','}* ')' Suffix? )?  EOS -> EntryStmt  {cons("entry-stmt")}

%%R1241
%%       expr substituted for scalar-int-expr
%%
  LblDef 'RETURN' Expr?                     EOS -> ReturnStmt          {cons("return-stmt")}

%%R1242
  LblDef 'CONTAINS'                         EOS -> ContainsStmt        {cons("contains-stmt")}

%%R1243
%%          scalar-expr replaced by expr
%%
  LblDef FunctionName '(' {DummyArgName ','}* ')' '=' Expr  EOS -> StmtFunctionStmt  {cons("stmt-function-stmt")}
