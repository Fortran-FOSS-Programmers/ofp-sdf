
%%%%%%%%%%
%% This Fortran grammar is structured according to document ISO/IEC 1539:1991. 
%% Rulenumbers are named R2xx - R12xx as in Annex D of 1539:1991
%% The grammar is adapted from an ELI project grammer, http://eli-project.cvs.sourceforge.net/eli-project
%%
%%%%%%%%%%
%% ISO/IEC 1539:1991 section R2xx Fortran terms and concepts
%%%%%%%%%%

%%module languages/fortran/syntax/Fortran90
module R1100ProgramUnits

%%imports languages/fortran/syntax/FortranLex
%%imports languages/fortran/syntax/R400DataTypes
%%imports languages/fortran/syntax/R500DataDeclarations
%%imports languages/fortran/syntax/R600UseDataObjects
%%imports languages/fortran/syntax/R700Expressions
%%imports languages/fortran/syntax/R800ExecutionControl
%%imports languages/fortran/syntax/R900IOStatements
%%imports languages/fortran/syntax/R1000_IOEditing
%%imports languages/fortran/syntax/R1100ProgramUnits
%%imports languages/fortran/syntax/R1200Procedures

imports FortranLex
imports R400DataTypes
imports R500DataDeclarations
imports R600UseDataObjects
imports R700Expressions
imports R800ExecutionControl
imports R900IOStatements
imports R1000_IOEditing
imports R1100ProgramUnits
imports R1200Procedures

exports

sorts
  
  Program                             %% R201
  ProgramUnit                         %% R202
  ExternalSubprogram                  %% R203
  SpecificationPart                   %% R204
  ImplicitPart                        %% R205
  ImplicitPartStmt                    %% R206
  DeclarationConstruct                %% R207
  ExecutionPart                       %% R208
  ExecutionPartConstruct              %% R209
  InternalSubprogramPart              %% R210
  InternalSubprogram                  %% R211
  OtherSpecificationStmt              %% R212
  ExecutableConstruct                 %% R213
  ActionStmt                          %% R214
  Keyword                             %% R215

  MainProgram                         %% R1101
  ProgramStmt                         %% R1102
  EndProgramStmt                      %% R1103

  Module                              %% R1104
  ModuleStmt                          %% R1105
  EndModuleStmt                       %% R1106
  ModuleSubprogramPart                %% R1107
  ModuleSubprogram                    %% R1108
  UseStmt                             %% R1109
  ModuleNature                        %% R1110
  Rename                              %% R1111
  Only                                %% R1112
  OnlyUseName                         %% R1113
  LocalDefinedOperator                %% R1114
  UseDefinedOperator                  %% R1115
  Submodule                           %% R1116
  SubmoduleStmt                       %% R1117
  ParentIdentifier                    %% R1118
  EndSubmoduleStmt                    %% R1119
  BlockData                           %% R1120
  BlockDataStmt                       %% R1121
  EndBlockDataStmt                    %% R1122

context-free start-symbols 
  Program

context-free syntax

%%R201 JD: the optional startcommentblock is needed to parse comment lines in 1st lines of a file.
%% original: ExecutableProgram ProgramUnit -> ExecutableProgram

%%R201
  StartCommentBlock?  ProgramUnit+             -> Program             {cons("Program")}

%%R202
    MainProgram
  | ExternalSubprogram
  | Module
  | Submodule
  | BlockData                                  -> ProgramUnit         {cons("ProgramUnit")}

%%R203
    FunctionSubprogram
  | SubroutineSubprogram                       -> ExternalSubprogram  {cons("external-subprogram")}
  
%%R204
  UseStmt*
  ImportStmt*
  ImplicitPart?
  DeclarationConstruct*                        -> SpecificationPart   {cons("SpecificationPart")}

%%R205
  ImplicitPartStmt* ImplicitStmt               -> ImplicitPart        {cons("ImplicitPart")}

%%R206
    ImplicitStmt
  | ParameterStmt
  | FormatStmt
  | EntryStmt                                  -> ImplicitPartStmt    {cons("ImplicitPartStmt")}

%%R207
    DerivedTypeDef
  | EntryStmt
  | EnumDef
  | FormatStmt
  | InterfaceBlock
  | ParameterStmt
  | ProcedureDeclarationStmt
  | OtherSpecificationStmt
  | TypeDeclarationStmt
  | StmtFunctionStmt                           -> DeclarationConstruct    {cons("DeclarationConstruct")}

%%R208
%%     WARNING-MODIFICATION:
%%       Removed the leading ExecutableConstruct to allow an empty list to
%%       be an ExecutionPart.  Check order of statements in a separate stage.
%%
  ExecutionPartConstruct*                      -> ExecutionPart           {cons("execution-part")}

%%R209
    ExecutableConstruct
  | FormatStmt
  | EntryStmt
  | DataStmt                                   -> ExecutionPartConstruct  {cons("execution-part-construct")}

%%R210
  ContainsStmt InternalSubprogram*             -> InternalSubprogramPart  {cons("internal-subprogram-part")}

%%R211
    FunctionSubprogram
  | SubroutineSubprogram                       -> InternalSubprogram      {cons("internal-subprogram")}

%%R212
    AccessStmt
  | AllocatableStmt
  | AsynchronousStmt
  | BindStmt
  | CodimensionStmt
  | CommonStmt
  | DataStmt
  | DimensionStmt
  | EquivalenceStmt
  | ExternalStmt
  | IntentStmt
  | IntrinsicStmt
  | NamelistStmt
  | OptionalStmt
  | PointerStmt
  | ProtectedStmt
  | SaveStmt
  | TargetStmt
  | VolatileStmt
  | ValueStmt                                  -> OtherSpecificationStmt  {cons("other-specification-stmt")}

%%R213
%%     WARNING-MODIFICATION:
%%       do-construct is problematic because a labeled statement may terminate it
%%          not necessarily an end-do-stmt.  Replace by do-stmt and end-do-stmt and
%%          resolve the construct end at a latter stage.
%%
    ActionStmt
  | AssociateConstruct
  | BlockConstruct
  | CaseConstruct
  | CriticalConstruct
%%| DoConstruct          %% Ambiguous - placed related statements in action-stmt
  | ForallConstruct
  | IfConstruct
  | SelectTypeConstruct
  | WhereConstruct
                                               -> ExecutableConstruct  {cons("executable-construct")}

%%R214
%%TODO-REMOVE  AssignStmt
%%TODO-REMOVE  AssignedGotoStmt
%%TODO-REMOVE  PauseStmt
%%TODO-REMOVE  StmtFunctionStmt  %% see R1226 comment
%%TODO-REMOVE  AllstopStmt
    AllocateStmt
  | AssignmentStmt
  | BackspaceStmt
  | CallStmt
  | CloseStmt
  | ContinueStmt
  | CycleStmt
  | DeallocateStmt
  | EndFunctionStmt
  | EndMpSubprogramStmt
  | EndProgramStmt
  | EndSubroutineStmt
  | EndfileStmt
  | ErrorStopStmt
  | ExitStmt
  | FlushStmt
  | ForallStmt
  | GotoStmt
  | IfStmt
  | InquireStmt
  | LockStmt
  | NullifyStmt
  | OpenStmt
  | PointerAssignmentStmt
  | PrintStmt
  | ReadStmt
  | ReturnStmt
  | RewindStmt
  | StopStmt
  | SyncAllStmt
  | SyncImagesStmt
  | SyncMemoryStmt
  | UnlockStmt
  | WaitStmt
  | WhereStmt
  | WriteStmt
  | ArithmeticIfStmt
  | ComputedGotoStmt
%% Following added as replacement for DoConstruct (because ambiguous)
  | LabelDoStmt     
  | NonlabelDoStmt
  | EndDoStmt                          -> ActionStmt  {cons("action-stmt")}

%%215
  Name                                 -> Keyword     {cons("keyword")}

%%R1101
%%TODO-REMOVE  ProgramStmt? MainRange                       -> MainProgram      {cons("main-program")}
%%TODO-REMOVE  BodyConstruct+         EndProgramStmt        -> MainRange        {cons("main-range")}
%%TODO-REMOVE  InternalSubprogramPart EndProgramStmt        -> MainRange        {cons("main-range")}
%%TODO-REMOVE  EndProgramStmt                               -> MainRange        {cons("main-range")}

%%TODO-REMOVE  SpecificationPart                            -> BodyConstruct
%%TODO-REMOVE  ExecutableConstruct                          -> BodyConstruct
%%TODO-REMOVE  BodyConstruct+                               -> Body

%%R1101
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%       ExecutionPart modified so it can be an empty list, thus it is not optional.
%%
  ProgramStmt?
    SpecificationPart
    ExecutionPart
    InternalSubprogramPart?
  EndProgramStmt                               -> MainProgram      {cons("MainProgram")}

%%R1102
  LblDef? 'PROGRAM'       ProgramName      EOS -> ProgramStmt      {cons("ProgramStmt")}

%%R1103
  LblDef? 'END' ('PROGRAM' ProgramName?)?  EOS -> EndProgramStmt   {cons("EndProgramStmt")}

%%R1104
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  ModuleStmt
    SpecificationPart
    ModuleSubprogramPart?
  EndModuleStmt                                -> Module           {cons("Module")}

%%R1105
  LblDef? 'MODULE' ModuleName              EOS -> ModuleStmt       {cons("ModuleStmt")}

%%R1106
  LblDef? 'END' ('MODULE' ModuleName?)?    EOS -> EndModuleStmt    {cons("EndModuleStmt")}

%%TODO-DELETE  SpecificationPartConstruct                   -> ModuleBody
%%TODO-DELETE  ModuleSubprogramPartConstruct                -> ModuleBody
%%TODO-DELETE  ModuleBody SpecificationPartConstruct        -> ModuleBody
%%TODO-DELETE  ModuleBody ModuleSubprogramPartConstruct     -> ModuleBody

%%R1107
  ContainsStmt ModuleSubprogram*               -> ModuleSubprogramPart  {cons("module-subprogram-part")}

%%R1108
    FunctionSubprogram
  | SubroutineSubprogram
  | SeparateModuleSubprogram                   -> ModuleSubprogram      {cons("module-subprogram")}

%%R1109
  LblDef? 'USE' ((',' ModuleNature)? '::')? ModuleName
           (','            {Rename ','}+)?              EOS -> UseStmt  {cons("UseStmt_Rename")}
  LblDef? 'USE' ((',' ModuleNature)? '::')? ModuleName
            ',' 'ONLY' ':' {Only   ','}*                EOS -> UseStmt  {cons("UseStmt_Only")}

%%R1110
  'INTRINSIC'                                  -> ModuleNature  {cons("ModuleNature_INTRINSIC")}
  'NON_INTRINSIC'                              -> ModuleNature  {cons("ModuleNature_NON_INTRINSIC")}

%%R1111
    ( LocalName '=>' UseName                  )
  | ( 'OPERATOR' '(' LocalDefinedOperator ')'
                '=>'
      'OPERATOR' '(' UseDefinedOperator   ')' )  -> Rename      {cons("rename")}

%%R1112
%%AMB-TODO-F08 PUTBACK    GenericSpec
    OnlyUseName
  | Rename                                       -> Only        {cons("Only")}

%%R1113
  Ident                                          -> OnlyUseName {cons("Name")}

%%R1114
    DefinedUnaryOp
  | DefinedBinaryOp                              -> LocalDefinedOperator  {cons("local-defined-operator")}

%%R1115
    DefinedUnaryOp
  | DefinedBinaryOp                              -> UseDefinedOperator  {cons("use-defined-operator")}

%%R1116
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  SubmoduleStmt
    SpecificationPart
    ModuleSubprogramPart?
  EndSubmoduleStmt                               -> Submodule         {cons("submodule")}

%%R1117
  LblDef 'SUBMODULE' '(' ParentIdentifier ')'
         SubmoduleName                       EOS -> SubmoduleStmt     {cons("submodule-stmt")}

%%R1118
  AncestorModuleName (':' ParentSubmoduleName)?  -> ParentIdentifier  {cons("parent-identifier")}

%%R1119
  LblDef 'END' ('SUBMODULE' SubmoduleName?)? EOS -> EndSubmoduleStmt  {cons("end-submodule-stmt")}

%%R1120
%%     WARNING-MODIFICATION: 
%%       The optional SpecificationPart is ambiguous.  The lack of a SpecificationPart
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  BlockDataStmt
    SpecificationPart
  EndBlockDataStmt                               -> BlockData         {cons("block-data")}

%%R1121
  LblDef 'BLOCK' 'DATA' BlockDataName?       EOS -> BlockDataStmt     {cons("block-data-stmt")}

%%R1122
  LblDef 'END' 'BLOCK' 'DATA' BlockDataName? EOS -> EndBlockDataStmt  {cons("end-block-data-stmt")}
  LblDef 'END'                               EOS -> EndBlockDataStmt  {cons("end-block-data-stmt")}

%%context-free priorities
%%
%%   OnlyUseName -> Only  {cons("Only_OUN")}
%% > GenericSpec -> Only  {cons("Only_GS")}
