
%%%%%%%%%%
%% This Fortran grammar is structured according to document ISO/IEC 1539:1991. 
%% Rulenumbers are named R2xx - R12xx as in Annex D of 1539:1991
%% The grammar is adapted from an ELI project grammer, http://eli-project.cvs.sourceforge.net/eli-project
%%
%%%%%%%%%%
%% ISO/IEC 1539:1991 section R2xx Fortran terms and concepts
%%%%%%%%%%

%%module languages/fortran/syntax/Fortran90
module R1100ProgramUnits

%%imports languages/fortran/syntax/FortranLex
%%imports languages/fortran/syntax/R400DataTypes
%%imports languages/fortran/syntax/R500DataDeclarations
%%imports languages/fortran/syntax/R600UseDataObjects
%%imports languages/fortran/syntax/R700Expressions
%%imports languages/fortran/syntax/R800ExecutionControl
%%imports languages/fortran/syntax/R900IOStatements
%%imports languages/fortran/syntax/R1000_IOEditing
%%imports languages/fortran/syntax/R1100ProgramUnits
%%imports languages/fortran/syntax/R1200Procedures

imports FortranLex
%%TODO imports R400DataTypes
imports R500DataDeclarations
%%TODO imports R600UseDataObjects
%%TODO imports R700Expressions
imports R800ExecutionControl
imports R900IOStatements
imports R1000_IOEditing
%%TODO imports R1100ProgramUnits
imports R1200Procedures

exports

sorts
  ActionStmt ArrayName Body
  BodyConstruct CommonBlockName ComponentName DefinedOperator
  ExtendedIntrinsicOp
%%TODO   DummyArgName EndName EntryName ExecutableConstruct ExecutableProgram
  ExecutionPartConstruct %%TODO ExternalName FunctionName GenericName %%TODO ImpliedDoVariable
  InternalSubProgPart InternalSubprogram %%TODO IntrinsicProcedureName  MainProgram
  MainRange ModuleNature ModuleSubprogram ModuleSubprogramPartConstruct %%TODO Name
%%TODO   NamelistGroupName ObjectName ProgramName ProgramUnit SFDummyArgName
  SpecificationPartConstruct %%TODO SpecificationStmt SubroutineName SubroutineNameUse TypeName

%%TODO - replace with above
  KeywordEqual OptKeywordEqual
  IntrinsicOperator
  ExecutableConstruct
  UseStmt UseName
  BlockDataStmt EndBlockDataStmt BlockDataBodyConstruct BlockDataName BlockDataBody
  
  Program                             %% R201
  ProgramUnit                         %% R202
  ExternalSubprogram                  %% R203
  SpecificationPart                   %% R204
  ImplicitPart                        %% R205
  ImplicitPartStmt                    %% R206
  DeclarationConstruct                %% R207

  OtherSpecificationStmt              %% R212

  MainProgram                         %% R1101
  ProgramStmt                         %% R1102
  EndProgramStmt                      %% R1103

  Module                              %% R1104
  ModuleStmt                          %% R1105
  EndModuleStmt                       %% R1106
  ModuleSubprogramPart                %% R1107
  ModuleBody
  Rename                              %% R1111
  Only                                %% R1112
  Submodule                           %% R1116
  SubmoduleStmt                       %% R1117
  ParentIdentifier                    %% R1118
  SubmoduleName
  AncestorModuleName
  ParentSubmoduleName
  EndSubmoduleStmt                    %% R1119
  BlockData                           %% R1120

context-free start-symbols 
  Program

context-free syntax

%%R201 JD: the optional startcommentblock is needed to parse comment lines in 1st lines of a file.
%% original: ExecutableProgram ProgramUnit -> ExecutableProgram

%%R201
  StartCommentBlock?  ProgramUnit+             -> Program          {cons("program")}

%%R202
    MainProgram
  | ExternalSubprogram
  | Module
  | Submodule
  | BlockData                                  -> ProgramUnit      {cons("program-unit")}

%%R203
    FunctionSubprogram
  | SubroutineSubprogram                       -> ExternalSubprogram  {cons("external-subprogram")}
  
%%R204
%%TODO-F2008 implement implicit-part by ignoring order and fix order in rewrite
  UseStmt*
  ImportStmt*
  ImplicitPart?
  DeclarationConstruct*                        -> SpecificationPart   {cons("specification-part")}

%%R204
%%DELETE-2008  ImplicitStmt                                 -> SpecificationPartConstruct
  ParameterStmt                                -> SpecificationPartConstruct
  FormatStmt                                   -> SpecificationPartConstruct
  EntryStmt                                    -> SpecificationPartConstruct
  DeclarationConstruct                         -> SpecificationPartConstruct
%%DELETE-2008  UseStmt                                      -> SpecificationPartConstruct

%%R205
  ImplicitPartStmt* ImplicitStmt               -> ImplicitPart  {cons("implicit-part")}

%%R206
    ImplicitStmt
  | ParameterStmt
  | FormatStmt
  | EntryStmt                                  -> ImplicitPartStmt      {cons("implicit-part-stmt")}

%%R207
%%TODO-F08 enum-stmt parameter-stmt stmt-function-stmt
    DerivedTypeDef
  | EntryStmt
  | EnumDef
  | FormatStmt
  | InterfaceBlock
  | ParameterStmt
  | ProcedureDeclarationStmt
  | OtherSpecificationStmt
  | TypeDeclarationStmt
  | StmtFunctionStmt                           -> DeclarationConstruct  {cons("declaration-construct")}

%%R208
%%TODO-F08 execution-part

%%R209
  ExecutableConstruct                          -> ExecutionPartConstruct
  FormatStmt                                   -> ExecutionPartConstruct
  EntryStmt                                    -> ExecutionPartConstruct
  DataStmt                                     -> ExecutionPartConstruct

%%R210
  Body ContainsStmt   InternalSubprogram       -> InternalSubProgPart
  ContainsStmt        InternalSubprogram       -> InternalSubProgPart
  InternalSubProgPart InternalSubprogram       -> InternalSubProgPart

%%R211
  FunctionSubprogram                   -> InternalSubprogram
  SubroutineSubprogram                 -> InternalSubprogram

%%R212
    AccessStmt
  | AllocatableStmt
  | AsynchronousStmt
  | BindStmt
  | CodimensionStmt
  | CommonStmt
  | DataStmt
  | DimensionStmt
  | EquivalenceStmt
  | ExternalStmt
  | IntentStmt
  | IntrinsicStmt
  | NamelistStmt
  | OptionalStmt
  | PointerStmt
  | ProtectedStmt
  | SaveStmt
  | TargetStmt
  | VolatileStmt
  | ValueStmt                                  -> OtherSpecificationStmt  {cons("other-specification-stmt")}

%%R213
  ActionStmt                    -> ExecutableConstruct
  AssociateConstruct            -> ExecutableConstruct
%%TODO-F08 block-construct
  CaseConstruct                 -> ExecutableConstruct
%%TODO-F08 critical-construct
  ForallConstruct               -> ExecutableConstruct
  IfConstruct                   -> ExecutableConstruct
  SelectTypeConstruct           -> ExecutableConstruct
%%TODO   WhereConstruct                -> ExecutableConstruct

%%AMB do-construct is problematic because a labeled statement
%%       may terminate it not necessarily an end-do-stmt.
%%       Replace by do-stmt and end-do-stmt and resolve
%%       the construct end at a latter stage.
%%AMB DoConstruct               -> ExecutableConstruct
  DoStmt                        -> ExecutableConstruct
  EndDoStmt                     -> ExecutableConstruct

%%R214
  AllocateStmt                  -> ActionStmt
  AllstopStmt                   -> ActionStmt
  CycleStmt                     -> ActionStmt
  DeallocateStmt                -> ActionStmt
  ExitStmt                      -> ActionStmt
  FlushStmt                     -> ActionStmt
  NullifyStmt                   -> ActionStmt
  PointerAssignmentStmt         -> ActionStmt
  WhereStmt                     -> ActionStmt
  ArithmeticIfStmt              -> ActionStmt
  AssignmentStmt                -> ActionStmt
%%TODO   AssignStmt                    -> ActionStmt
  BackspaceStmt                 -> ActionStmt
  CallStmt                      -> ActionStmt
  CloseStmt                     -> ActionStmt
  ContinueStmt                  -> ActionStmt
  EndfileStmt                   -> ActionStmt
  GotoStmt                      -> ActionStmt
  ComputedGotoStmt              -> ActionStmt
  AssignedGotoStmt              -> ActionStmt
  IfStmt                        -> ActionStmt
  InquireStmt                   -> ActionStmt
  OpenStmt                      -> ActionStmt
  PauseStmt                     -> ActionStmt
  PrintStmt                     -> ActionStmt
  ReadStmt                      -> ActionStmt
  ReturnStmt                    -> ActionStmt
  RewindStmt                    -> ActionStmt
%%  StmtFunctionStmt            -> ActionStmt see R1226 comment
  StopStmt                      -> ActionStmt
  WaitStmt                      -> ActionStmt
  WriteStmt                     -> ActionStmt

%%R212
  ContainsStmt                         -> ModuleSubprogramPartConstruct
  ModuleSubprogram                     -> ModuleSubprogramPartConstruct

%%R213
  FunctionSubprogram                   -> ModuleSubprogram
  SubroutineSubprogram                 -> ModuleSubprogram

%%R215
  Ident '='                     -> KeywordEqual          {cons("keyword")}
  KeywordEqual?                 -> OptKeywordEqual

%%R1101
  ProgramStmt? MainRange                       -> MainProgram      {cons("main-program")}
  BodyConstruct+       EndProgramStmt          -> MainRange        {cons("main-range")}
  InternalSubProgPart  EndProgramStmt          -> MainRange        {cons("main-range")}
  EndProgramStmt                               -> MainRange        {cons("main-range")}

  SpecificationPartConstruct                   -> BodyConstruct
  ExecutableConstruct                          -> BodyConstruct
  BodyConstruct+                               -> Body

%%R1102
  LblDef 'PROGRAM'       ProgramName       EOS -> ProgramStmt      {cons("program-stmt")}

%%R1103
  LblDef 'END' ('PROGRAM' ProgramName?)?   EOS -> EndProgramStmt   {cons("end-program-stmt")}

%%R1104
  ModuleStmt ModuleBody EndModuleStmt          -> Module           {cons("module")}
  ModuleStmt            EndModuleStmt          -> Module           {cons("module")}

%%R1105
  LblDef 'MODULE' ModuleName               EOS -> ModuleStmt       {cons("module-stmt")}

%%R1106
  LblDef 'END' ('MODULE' ModuleName?)?     EOS -> EndModuleStmt    {cons("end-module-stmt")}

  SpecificationPartConstruct                   -> ModuleBody
  ModuleSubprogramPartConstruct                -> ModuleBody
  ModuleBody SpecificationPartConstruct        -> ModuleBody
  ModuleBody ModuleSubprogramPartConstruct     -> ModuleBody

%%R1107
  ContainsStmt ModuleSubprogram+               -> ModuleSubprogramPart  {const("module-subprogram-part")}

%%R1108
  ContainsStmt                                 -> ModuleSubprogramPartConstruct
  ModuleSubprogram                             -> ModuleSubprogramPartConstruct

%%R1108
  FunctionSubprogram                           -> ModuleSubprogram
  SubroutineSubprogram                         -> ModuleSubprogram

%%R1109
  LblDef 'USE' (("," ModuleNature)? "::")? ModuleName
     (
           (","            {Rename ","}*)
        |  ("," 'ONLY' ":" {Only   ","}*)
     )?
                                           EOS -> UseStmt {cons("use-stmt")}

%%R1110
    'INTRINSIC'
  | 'NON_INTRINSIC'                            -> ModuleNature  {cons("module-nature")}


%%1111
%%TODO-F08 - add OPERATORs
  Ident "=>" UseName                           -> Rename

  Ident                                        -> UseName

%%R1112
%%TODO-F08 - add generic-spec, rename and only-use-name
  UseName                                    -> Only  {cons("only")}

%%R1116
%%       The optional specification-part is ambiguous.  The lack of a specification-part
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  SubmoduleStmt
    SpecificationPart
    ModuleSubprogramPart?
  EndSubmoduleStmt                               -> Submodule         {cons("submodule")}

%%R1117
  LblDef 'SUBMODULE' '(' ParentIdentifier ')'
         SubmoduleName                       EOS -> SubmoduleStmt     {cons("submodule-stmt")}

%%R1118
  AncestorModuleName (':' ParentSubmoduleName)?  -> ParentIdentifier  {cons("parent-identifier")}

  Ident                                          -> SubmoduleName        {cons("submodule-name")}
  Ident                                          -> AncestorModuleName   {cons("ancestor-module-name")}
  Ident                                          -> ParentSubmoduleName  {cons("parent-submodule-name")}

%%R1119
  LblDef 'END' ('SUBMODULE' SubmoduleName?)? EOS -> EndSubmoduleStmt  {cons("end-submodule-stmt")}

%%R1120
%%       The optional specification-part is ambiguous.  The lack of a specification-part
%%       is detectable from an empty list and None components in the specification-part ATerm.
%%
  BlockDataStmt
    SpecificationPart
  EndBlockDataStmt                               -> BlockData         {cons("block-data")}

%%R1121
  LblDef 'BLOCK' 'DATA' BlockDataName?       EOS -> BlockDataStmt     {cons("block-data-stmt")}

%%R1122
  LblDef 'END' 'BLOCK' 'DATA' BlockDataName? EOS -> EndBlockDataStmt  {cons("end-block-data-stmt")}
  LblDef 'END'                               EOS -> EndBlockDataStmt  {cons("end-block-data-stmt")}

  Ident -> BlockDataName

  BlockDataBodyConstruct+ -> BlockDataBody

  SpecificationPartConstruct -> BlockDataBodyConstruct

%%R310
  PowerOp                       -> IntrinsicOperator     {cons("intrinsic-operator")}
  MultOp                        -> IntrinsicOperator     {cons("intrinsic-operator")}
  AddOp                         -> IntrinsicOperator     {cons("intrinsic-operator")}
  ConcatOp                      -> IntrinsicOperator     {cons("intrinsic-operator")}
  RelOp                         -> IntrinsicOperator     {cons("intrinsic-operator")}
  NotOp                         -> IntrinsicOperator     {cons("intrinsic-operator")}
  AndOp                         -> IntrinsicOperator     {cons("intrinsic-operator")}
  OrOp                          -> IntrinsicOperator     {cons("intrinsic-operator")}
  EquivOp                       -> IntrinsicOperator     {cons("intrinsic-operator")}

%%R311

  DefinedUnaryOp                -> DefinedOperator
  DefinedBinaryOp               -> DefinedOperator
  ExtendedIntrinsicOp           -> DefinedOperator

%%R312

  IntrinsicOperator             -> ExtendedIntrinsicOp
